<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/09/17/hello-world/"/>
      <url>/2020/09/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 使用说明及测试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>复制文件时&quot;无法读取源文件或磁盘&quot;的解决方案记录</title>
      <link href="/2020/09/16/%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6%E6%97%B6%E6%97%A0%E6%B3%95%E8%AF%BB%E5%8F%96%E6%BA%90%E6%96%87%E4%BB%B6%E6%88%96%E7%A3%81%E7%9B%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2020/09/16/%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6%E6%97%B6%E6%97%A0%E6%B3%95%E8%AF%BB%E5%8F%96%E6%BA%90%E6%96%87%E4%BB%B6%E6%88%96%E7%A3%81%E7%9B%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>一段时间以前电脑上某些特定的文件开始出现无法复制、剪切的情况。一旦进行复制、剪切的操作，速度在某点处降到几乎为0，复制操作卡死，无法暂停或取消，2-3 min 后，系统弹出提示框，“无法读取源文件或磁盘”。</p><a id="more"></a><p>具体情况见下图</p><figure><img src="/2020/09/16/%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6%E6%97%B6%E6%97%A0%E6%B3%95%E8%AF%BB%E5%8F%96%E6%BA%90%E6%96%87%E4%BB%B6%E6%88%96%E7%A3%81%E7%9B%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/bandicam%202020-09-16%2013-05-55-274.mp4_20200916_163624.408%20-%201.jpg" alt><figcaption>复制时突然降速</figcaption></figure><figure><img src="/2020/09/16/%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6%E6%97%B6%E6%97%A0%E6%B3%95%E8%AF%BB%E5%8F%96%E6%BA%90%E6%96%87%E4%BB%B6%E6%88%96%E7%A3%81%E7%9B%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/bandicam%202020-09-16%2013-05-55-274.mp4_20200916_163916.105.jpg" alt><figcaption>提示无法读源文件或磁盘</figcaption></figure><p>据此进行如下猜测：</p><ul><li>文件损坏</li><li>磁盘有错误</li><li>文件系统错误</li></ul><p>下面一一排除。文件可以正常打开，说明文件应该没有损坏。接着在资源管理器中选择该磁盘，右键属性-工具-检查磁盘，结果未发现错误。</p><p>接着使用命令行 <code>chkdsk E: /f</code> 检查磁盘并修复错误，显示无错误</p><p><img src="/2020/09/16/%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6%E6%97%B6%E6%97%A0%E6%B3%95%E8%AF%BB%E5%8F%96%E6%BA%90%E6%96%87%E4%BB%B6%E6%88%96%E7%A3%81%E7%9B%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/微信图片_20200916164640-1600246095317.jpg"></p><p>那么怎么办呢？我们更进一步，输入命令<code>chkdsk E: /R</code> . 该命令执行相当缓慢，两个小时后我终于看到了结果。</p><p><img src="/2020/09/16/%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6%E6%97%B6%E6%97%A0%E6%B3%95%E8%AF%BB%E5%8F%96%E6%BA%90%E6%96%87%E4%BB%B6%E6%88%96%E7%A3%81%E7%9B%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/image-20200916165152444.png"></p><p>虽然提示出现未指定的错误，但我发现这时文件已经可以复制了。具体是什么原因造成了错误仍尚不清楚。</p><p>借此机会，我了解了以下chkdsk检查磁盘的用法：Chkdsk命令是用来检查磁盘并且显示状态报告的。</p><p>用法如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CHKDSK [volume[[path]filename]]] [/F] [/V] [/R] [/X] [/I] [/C] [/L[:size]]</span><br></pre></td></tr></table></figure><ul><li><code>volume</code> 指定驱动器(后面跟一个冒号)、装入点或卷名。</li><li><code>filename</code> 仅用于 FAT/FAT32: 指定要检查是否有碎片的文件。</li><li><code>/F</code> 修复磁盘上的错误。</li><li><code>/V</code> 在 FAT/FAT32 上: 显示磁盘上每个文件的完整路径和名称。在 NTFS 上: 如果有清除消息，将其显示。</li><li><code>/R</code> 查找不正确的扇区并恢复可读信息(隐含 <code>/F</code>)。</li><li><code>/L:size</code> 仅用于 NTFS: 将日志文件大小改成指定的 KB 数。如果没有指定大小，则显示当前的大小。</li><li><code>/X</code> 如果必要，强制卷先卸下。卷的所有打开的句柄就会无效(隐含 <code>/F</code>)。</li><li><code>/I</code> 仅用于 NTFS: 对索引项进行强度较小的检查。</li><li><code>/C</code> 仅用于 NTFS: 跳过文件夹结构的循环检查。</li><li><code>/I</code> 和 <code>/C</code> 命令行开关跳过卷的某些检查，减少运行 Chkdsk 所需的时间。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 疑难杂症 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 硬盘 </tag>
            
            <tag> 疑难杂症 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>讨论：是不是有误？——关于二项分布与负二项分布的关系</title>
      <link href="/2020/08/28/%E8%AE%A8%E8%AE%BA%EF%BC%9A%E6%98%AF%E4%B8%8D%E6%98%AF%E6%9C%89%E8%AF%AF%EF%BC%9F%E2%80%94%E2%80%94%E5%85%B3%E4%BA%8E%E4%BA%8C%E9%A1%B9%E5%88%86%E5%B8%83%E4%B8%8E%E8%B4%9F%E4%BA%8C%E9%A1%B9%E5%88%86%E5%B8%83%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
      <url>/2020/08/28/%E8%AE%A8%E8%AE%BA%EF%BC%9A%E6%98%AF%E4%B8%8D%E6%98%AF%E6%9C%89%E8%AF%AF%EF%BC%9F%E2%80%94%E2%80%94%E5%85%B3%E4%BA%8E%E4%BA%8C%E9%A1%B9%E5%88%86%E5%B8%83%E4%B8%8E%E8%B4%9F%E4%BA%8C%E9%A1%B9%E5%88%86%E5%B8%83%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<p>最近在阅读<em>Basic Probability Theory with Applications</em>一书, 在二项分布和负二项分布处耽搁了许久. 下图所示内容便是使我疑惑的地方.</p><a id="more"></a><figure><img src="/2020/08/28/%E8%AE%A8%E8%AE%BA%EF%BC%9A%E6%98%AF%E4%B8%8D%E6%98%AF%E6%9C%89%E8%AF%AF%EF%BC%9F%E2%80%94%E2%80%94%E5%85%B3%E4%BA%8E%E4%BA%8C%E9%A1%B9%E5%88%86%E5%B8%83%E4%B8%8E%E8%B4%9F%E4%BA%8C%E9%A1%B9%E5%88%86%E5%B8%83%E7%9A%84%E5%85%B3%E7%B3%BB/Basic%20Probability%20Theory_Binomial%20and%20negative%20binomial%20distribution.png" alt><figcaption>An Excerpt From Basic Probability Theory with Applications</figcaption></figure><p>注: 以下全部按照书中对于负二项分布的定义, 即随机变量<span class="math inline">\(X\)</span>表示第<span class="math inline">\(r\)</span>次伯努利试验成功时的总试验次数.</p><p>此处的两个公式意在阐明二项分布与负二项分布的联系.</p><p><strong>第一个公式</strong>不论从代数的角度还是从概率的实际意义都是容易说明的. 我们先从代数的角度说明一下.</p><p><strong>• 代数角度:</strong> 由于<span class="math inline">\(X\sim\mathrm{NB}(r,p)\)</span>, 因此 <span class="math display">\[P[X=x]=\binom{x-1}{r-1}p^{r}q^{x-r}\quad,q:=1-p\]</span> 而 <span class="math display">\[P[\mathrm{B}(x-1,p)=r-1]=\binom{x-1}{r-1}p^{r-1}q^{x-r}\]</span> 因此 <span class="math display">\[P[X=x]=P[\mathrm{B}(x-1,p)=r-1]p\]</span></p><p><strong>• 概率的实际意义:</strong> 我们来设置一个情境. 有一个狙击手进行射击, 每一发子弹命中的概率始终为<span class="math inline">\(p\)</span>. 左边的<span class="math inline">\(P[X=x]\)</span>表示要求该狙击手命中<span class="math inline">\(r\)</span>次, 结果他恰射击了<span class="math inline">\(x\)</span>次以后才完成目标的概率. 显然, 最后一次射击他命中了, 否则<span class="math inline">\(x-1\)</span>次的时候他已经完成目标了, 最后一次命中的概率为<span class="math inline">\(p\)</span>; 前面的<span class="math inline">\(x-1\)</span>次他只要任意命中<span class="math inline">\(r-1\)</span>次即可, 命中次数服从二项分布<span class="math inline">\(\mathrm{B}(x-1,p)\)</span>, 故概率为<span class="math inline">\(P[\mathrm{B}(x-1,p)=r-1]\)</span>. 所以左边的概率就等于<span class="math inline">\(P[\mathrm{B}(x-1,p)=r-1]p\)</span>.</p><p>但是, <strong>第二个公式</strong>似乎有些让人摸不着头脑. 我们按照<strong>概率的实际意义</strong>分析一下. 我们仍然设置这个情境: 狙击手进行射击, 每一发子弹命中的概率始终为<span class="math inline">\(p\)</span>. 左边的<span class="math inline">\(P[\mathrm{NB}(r,p)\leq x]\)</span>表示要求该狙击手命中<span class="math inline">\(r\)</span>次, 结果他在<span class="math inline">\(x\)</span>发子弹之内完成了任务的概率; 这与给狙击手<span class="math inline">\(x\)</span>发子弹射击, 结果他命中次数不少于<span class="math inline">\(r\)</span>次是等价的, 这用数学语言描述为<span class="math inline">\(P[\mathrm{B}(x,p)\geq r]\)</span>. 于是我们得到 <span class="math display">\[P[\mathrm{NB}(r,p)\leq x]=P[\mathrm{B}(x,p)\geq r].\]</span> 可是书中给出的公式却为<span class="math inline">\(P[\mathrm{NB}(r,p)\leq x]=P[\mathrm{B}(r+x,p)\geq r]\)</span>, 这是怎么一回事?</p><p>我们尝试用代数的方法进行解释, 如果我们得到的公式正确, 那么我们应该能够证明 <span class="math display">\[\sum_{k=r}^{x}\binom{k-1}{r-1}p^{r}q^{k-r}=\sum_{k=r}^{x}\binom{x}{k}p^{k}q^{x-k}\]</span></p><p>使用<strong>纯代数的方法</strong>可以这样证明(由别人给出的证法):</p><p>先证<span class="math inline">\(r=1\)</span>的情形, <span class="math display">\[\text{左边}=p\sum_{k=r}^{x}q^{k-1}=p\frac{1-q^{x}}{1-q}=1-q^{x}\]</span> <span class="math display">\[\text{右边}=\sum_{k=1}^{x}\binom{x}{k}p^{k}q^{x-k}=\left[\sum_{k=0}^{x}\binom{x}{k}p^{k}q^{x-k}\right]-q^{x}=(p+q)^{x}-q^{x}=1-q^{x}\]</span></p><p>对于任意<span class="math inline">\(r\in\mathbb{N}^{*}\)</span>的情形, 我们有 <span class="math display">\[\sum_{k=1}^{x}\binom{k-1}{r-1}p^{r}q^{k-r}=\sum_{k=1}^{x}\binom{x}{k}p^{k}q^{x-k}\]</span> <span class="math display">\[\sum_{k=1}^{r}\binom{k-1}{r-1}p^{r}q^{k-r}=\sum_{k=1}^{r}\binom{x}{k}p^{k}q^{x-k}\]</span> 两式相减即得结果.</p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
          <category> 概率论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概率论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一份不知是否应该称为&quot;关于&quot;的博客规划</title>
      <link href="/2020/08/24/%E4%B8%80%E4%BB%BD%E4%B8%8D%E7%9F%A5%E6%98%AF%E5%90%A6%E5%BA%94%E8%AF%A5%E7%A7%B0%E4%B8%BA_%E5%85%B3%E4%BA%8E_%E7%9A%84%E5%8D%9A%E5%AE%A2%E8%A7%84%E5%88%92/"/>
      <url>/2020/08/24/%E4%B8%80%E4%BB%BD%E4%B8%8D%E7%9F%A5%E6%98%AF%E5%90%A6%E5%BA%94%E8%AF%A5%E7%A7%B0%E4%B8%BA_%E5%85%B3%E4%BA%8E_%E7%9A%84%E5%8D%9A%E5%AE%A2%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<p>当初我建立此个人博客的时候，只是由于好奇心和探索欲的驱使，抱着尝尝鲜的态度创建的。网站测试完毕一切正常的时候，我虽热血沸腾，但对这个博客其实还没有一个明确的规划。“关于”页面我不知道要写些什么，于是只是留下了一个建站日期。细心的朋友也许会发现，我的主页只有一个标题，也没有填写网站简介。</p><p>这两天有了一些空闲时间，我决定对博客做一个比较明确的阶段规划。</p><a id="more"></a><h2 id="缘起">缘起</h2><p>自2020年7月4日创建此博客已经有将近两个月了。创建博客的时候其实是怀着"助人自助"的念头：发知识性博客既帮助自己梳理所学内容，形成知识体系，又或许能够帮助偶然路过的后来者。作为一名学生，由于知识能力所限，“助人”当然不能有太大的指望，如果我的文章恰好对你有帮助，那么这是我的荣幸。相比而言，更为实际的想法还是自助。</p><p>以写博客来辅助自己学习，或许会是一种有效的方式。它可以有以下的作用：</p><ol type="1"><li>输出的过程是一种相对高效的学习方式</li><li>可以把零碎的知识串联，搭建知识高速公路</li><li>相比纸质笔记本而言，便于分类收集</li><li>以后遗忘时可以方便地查看</li></ol><p>但是，它也会有以下的负面影响：</p><ol type="1"><li>费时费力，写一篇博文的时间可以用来干好些事情了。（尤其是输入大量数学公式很费时）</li><li>博文数量增多的时候管理起来也有一定挑战</li></ol><p>反思前面一段时间发布的C++系列文章，着实质量不高，变成了复习笔记的记述，而并没有突出脉络，强调重难点与易错点。如果没有写出自己的理解，那么文章还不如不写。于是，我列了一个规划，以约束自己以后发文的内容。</p><h2 id="博客规划">博客规划</h2><p>根据我目前的规划，为了最大化学习效果，我计划按以下方式编写博文：</p><h3 id="博文的主题">博文的主题</h3><p>以应用数学、统计学、计算数学为重点；计算机、程序设计、人工智能为次重点；英语摘录、闲书笔记不定期更新。</p><h3 id="博文的内容">博文的内容</h3><ol type="1"><li><strong>数学方面</strong>：由于逻辑体系已经较为清晰，书上定理都已经分条陈述，故不进行笔记类的知识记述，那样和把书上的内容照搬没啥区别。主要发布：<strong>专题式知识整合、有启发性的题组、数学趣题、在实际生产生活的应用</strong></li><li><strong>计算机方面</strong>：记录最<strong>核心知识脉络、关键点和易错点</strong>。如果知识较为零碎，则进行知识梳理。主要目的是理清主线，抗遗忘。</li><li><strong>其它</strong>：英语主要摘录好句，闲书笔记摘录核心思路与书摘，自己的探究性实践。</li></ol><p>关于内容还要作一点说明：由于输入数学公式的复杂性和设备局限性（难以在移动端输入），我会略过大部分基础知识，仅记录那些有启发性的、有趣的或者是有应用的数学内容。数学类的文章在数量上很可能会少于计算机类，但由于我的主要学习方向是数学，数学类的内容在深度上一定会更深一些。</p><h3 id="写作的方式">写作的方式</h3><p>预计在白天学习，非计算机内容在纸上记录要点，晚上整理一天的学习成果，正好复习；计算机内容因为多数会涉及代码，直接使用手机随学随记。</p><h3 id="错误的更正">错误的更正</h3><p>知识类或技术性博客，笔误或者由于知识水平所限而出现的错误在所难免。如果读者发现影响不大的笔误，在评论区评论即可，这样可以提醒其他读者注意存在笔误。但是目前使用的Valine评论区有一大弊端，我可以收到大家的评论，却难以区分是哪一篇文章的评论。因此，如果的确有问题向笔者反馈，欢迎点击页面最下方的邮件小按钮给我发送邮件，我将视情况对文章进行修改。</p><h2 id="致谢">致谢</h2><p>这个博客网站是我一手搭建的，并现在由我独立运营。页面的生成用的是Hexo工具，博客布局使用的是Volantis主题，在此我对其官方团队表示感谢！</p><p>本网站永久域名为 <a href="https://junyuanhe.github.io/">https://junyuanhe.github.io/</a> （注意是https，使用http协议无效）</p>]]></content>
      
      
      <categories>
          
          <category> 关于 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 关于 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++程序设计基础(8) - 变量的存储类型</title>
      <link href="/2020/08/23/C++%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80(8)%20-%20%E5%8F%98%E9%87%8F%E7%9A%84%E5%AD%98%E5%82%A8%E7%B1%BB%E5%9E%8B/"/>
      <url>/2020/08/23/C++%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80(8)%20-%20%E5%8F%98%E9%87%8F%E7%9A%84%E5%AD%98%E5%82%A8%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>先简要介绍程序的内存映像，然后重点介绍C++变量的存储类型, 包括auto类型、static类型、register类型，以及无名变量和多文件程序中的变量与函数使用.</p><a id="more"></a><h2 id="程序的内存映像">程序的内存映像</h2><p>程序运行时，先要将硬盘上的程序代码装载到内存中，然后运行内存中的代码。装载到内存中的程序区域就叫做程序的内存映像。那么，在内存映像中程序是如何存放的呢？</p><p>按存放内容的不同可以分为3个区域：</p><ol type="1"><li>程序区：存放程序指令</li><li>静态存储区：存放永久数据（常量、静态变量、全局变量）</li><li>动态存储区：存放临时数据（动态变量、局部变量）</li></ol><p>其中，如果在局部变量前面加上<code>static</code>前缀，则它变成了静态的局部变量，会存放在静态存储区；如果前缀为<code>auto</code>则为临时数据，存放在动态存储区；如果无前缀则默认为<code>auto</code>前缀。</p><p>如果再细分，可以分为以下区域：</p><ul><li><p>程序区：存放程序指令</p></li><li><p>静态存储区：存放永久数据（常量、静态变量、全局变量）</p><ul><li>常量区</li><li>静态变量区（静态变量、全局变量）</li></ul></li><li><p>动态存储区：存放临时数据（动态变量、局部变量）</p><ul><li>栈区（自动变量）</li><li>堆区（动态变量）</li></ul></li></ul><p>关于栈，还要解释几句。我们把栈形象地比喻为堆盘子。一堆盘子看作一个栈，最下面的盘子称为栈底，地址较大；最上面的盘子称为栈顶，地址较小。放上去一个盘子（存储一个变量）称为入栈或压栈，栈顶上移，地址变小；取出来一个盘子称为出栈，栈顶下移，地址变大。后叠上的盘子只能先取下（后存储的变量只能先取出）。</p><h2 id="变量的存储类型">变量的存储类型</h2><h3 id="auto类型和static类型">auto类型和static类型</h3><p><strong>Attention:</strong></p><p>• 当变量或数组没有给出初值时，静态存储区中的变量默认为0（所占字节全部为0）。也就是说 常量、静态变量、全局变量 未赋初值时默认初值为0。</p><p>当保存临时数据时，初始的数值不确定（残留值或者清为特定字节值）。也就是说，自动变量、动态变量的值是不确定的。</p><p>• 函数参数是自动数据（auto类型）</p><p>• 静态变量的定义和赋初值语句不论在程序的什么位置都会在主函数之前执行，且只会执行一次（运行主函数时会跳过该语句）。静态局部变量可以突破作用域的限制，在整个文件中都可使用。（故可以记录函数调用次数）</p><p>• static修饰的全局变量和函数只能在本文件中访问，不能在其它文件中访问。</p><h3 id="register类型">register类型</h3><p>在变量定义时，前缀<code>register</code>申请使用CPU的寄存器存储变量（可以提高运行效率）</p><h3 id="无名变量">无名变量</h3><p>• 动态变量是无名变量，可以通过指针调用</p><p>• 函数值也是无名变量，在所在调用语句结束后就撤销该变量。</p><h3 id="多文件程序中的变量或函数">多文件程序中的变量或函数</h3><p>• 一个程序可以由多个源文件构成，但是一个程序只能由一个<code>main</code>函数。</p><p>• 全局变量和函数可以跨文件使用（局部变量不可以）</p><p>• 在全局变量或函数之前加<code>static</code>关键字可以限制变量跨文件使用</p><p>• 一个文件定义了全局变量或者函数，其它文件对这些全局变量作extern变量说明后即可使用</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++程序设计基础(7) - 作用域</title>
      <link href="/2020/08/22/C++%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80(7)%20-%20%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
      <url>/2020/08/22/C++%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80(7)%20-%20%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<p>C++作用域</p><a id="more"></a><figure><img src="/2020/08/22/C++%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80(7)%20-%20%E4%BD%9C%E7%94%A8%E5%9F%9F/Cpp程序设计7%20作用域.png" alt><figcaption>C++程序设计7 作用域</figcaption></figure><p><strong>特别注意:</strong></p><ol type="1"><li><p>同一层级的作用域不允许出现同名的标识符。重名的标识符必须在不同层级出现，内层标识符隐藏外层标识符。</p></li><li><p>同一层级可以进行函数重载。不同层级下，<strong>内层函数说明隐藏一切外层函数（不论参数表是否相同）的说明</strong>。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++程序设计基础(6) - 函数</title>
      <link href="/2020/08/22/C++%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80(6)%20-%20%E5%87%BD%E6%95%B0/"/>
      <url>/2020/08/22/C++%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80(6)%20-%20%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>C++函数的核心知识</p><a id="more"></a><h2 id="核心知识自测">核心知识(自测)</h2><h3 id="函数的定义">函数的定义</h3><ol type="1"><li>函数定义、函数调用、函数说明的形式</li><li>函数定义的位置（可不可以放在另一个函数的函数体内？不可以）。函数说明什么时候可以省略？（先定义，后使用；如果要在定义之前使用，就必须添加函数说明。）函数说明的位置（可不可以放在另一个函数的函数体内？可以）</li><li>函数返回值的写法？void类型函数返回值的写法？函数返回值何种情况可以省略？（void类型函数，且return语句是函数体的最后一个语句）</li><li><code>rand()</code>函数定义所在的头文件?(<code>&lt;cstdlib&gt;</code>).</li><li><code>clock()</code>函数定义所在的头文件?(<code>&lt;ctime&gt;</code>). <code>clock()</code>函数的作用?(返回程序开始至此句经过的毫秒数).</li></ol><h3 id="函数的参数传递">函数的参数传递</h3><ol type="1"><li>函数的三种参数传递？(值传递、地址传递、引用传递)。描述三种参数传递的过程。</li><li>形参为普通变量，在函数体内改变变量值，实参的值会改变吗？（不会）。形参为数组，在函数体内改变数组元素，实参数组的值会改变吗？（会）。试解释原因。（形参数组的本质是形参指针变量）</li><li>若定义了<code>double a[10];</code>则执行<code>sizeof(a)</code>返回的值?(80). 有函数<code>void f(double a[], int n){ cout &lt;&lt; sizeof(a) &lt;&lt; endl; }</code>中执行<code>f(a, 10);</code>的值?(4, 同时可能会有Warning). 为什么?(返回的是<code>double*</code>类型的大小)</li><li>函数参数的传递次序? (从最后一个参数到第一个参数依次传递)</li></ol><h3 id="递归函数函数的重载含默认参数的函数">递归函数、函数的重载、含默认参数的函数</h3><ol type="1"><li>递归函数的设计?(递归终止点和递归调用).</li><li>写出求解汉诺塔(河内塔)问题的函数.</li><li>什么叫重载函数？（同一个函数名，使用不同的参数列表）</li><li>C++是否允许同名函数有相同的参数列表但函数类型不同？（不允许）</li><li>将默认参数函数<code>void f(int x, int y = 3){ cout &lt;&lt; x &lt;&lt; "\t" &lt;&lt; y &lt;&lt; endl; }</code>改写成重载函数以实现同样效果.</li><li>如何给出函数的默认参数? (默认参数函数通常在函数说明中给出(函数定义中无需给出), 函数给出的默认参数是靠后面的参数.)</li></ol><h3 id="内联函数">内联函数</h3><ol type="1"><li>内联函数与普通函数的最大区别? (直接嵌入代码)</li><li>如何定义内联函数? (在前面加<code>inline</code>关键字)</li><li>内联函数的注意点: 不可出现循环和switch语句, 不能递归, 实际是否嵌入函数由编译器决定.</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++程序设计基础(5) - 复合类型数据：指针与引用初步</title>
      <link href="/2020/08/20/C++%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80(5)%20-%20%E5%A4%8D%E5%90%88%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE_%E6%8C%87%E9%92%88%E4%B8%8E%E5%BC%95%E7%94%A8%E5%88%9D%E6%AD%A5/"/>
      <url>/2020/08/20/C++%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80(5)%20-%20%E5%A4%8D%E5%90%88%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE_%E6%8C%87%E9%92%88%E4%B8%8E%E5%BC%95%E7%94%A8%E5%88%9D%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<p>指针和引用类型的初步介绍, 更深入的内容留到后面再讲.</p><a id="more"></a><h2 id="指针">指针</h2><p><strong>指针就是地址</strong>. 所有的变量都在内存中有一个地址, 通过地址可以使用变量, 我们就把这些地址形象地称为指向变量的指针.</p><h3 id="指针的最基本用法">指针的最基本用法:</h3><p><strong>(1) 指针变量的定义</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">int</span> *p;  <span class="comment">//定义指针变量p, 指向int型变量. 称p为int*类型</span></span><br><span class="line">p = &amp;a;  <span class="comment">//&amp;表示取地址. 此句表明将a的地址赋给p.</span></span><br><span class="line">*p = <span class="number">3</span>;  <span class="comment">//使用p指向的变量</span></span><br></pre></td></tr></table></figure><p>注: 行2中和行4中星号的含义不同. 行2中是指针变量的定义, 星号表示该变量是一个指针变量, 即<code>int*</code>类型, 等价的写法是<code>int* p</code>(空格位置不影响), 但是我们提倡将<code>*</code>跟随变量名而不是类型名. 行4中星号表示取指针指向的变量.</p><p><strong>(2) 一次定义多个指针变量, 同时定义变量和指针</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a, *p = &amp;a, *q, b, *r = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>在这里, <code>a</code>, <code>b</code>为int型变量. <code>p</code>为int型指针, 指向<code>a</code>, 注意这里初值<code>&amp;a</code>赋给<code>p</code>, 而不是赋给<code>*p</code>, 等价于<code>int *p; p = &amp;a;</code>. <code>q</code>为int型指针, 没有指向任何变量, 称为野指针, 不可使用<code>*p</code>. <code>r</code>是0指针，不指向任何变量。使用0指针指向的变量是非法的。</p><p><strong>(3) 指针变量的指向类型不同, 使用结果也不同</strong></p><p>我们来看下面例子:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> f = <span class="number">5.0f</span>, *pf = &amp;f;</span><br><span class="line"><span class="keyword">int</span> *pi = (<span class="keyword">int</span> *) &amp;f;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *pf &lt;&lt; <span class="string">"\t"</span> &lt;&lt; *pi &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//结果: 51084227584</span></span><br></pre></td></tr></table></figure><p>这里, <code>pf</code>和<code>pi</code>保存的地址是相同的, 指向同一块二进制数据, 但是它们将这部分二进制数分别按int型解释和float型解释, 所以得到的结果不一样.</p><h3 id="指针的算术运算">指针的算术运算</h3><p>C++的指针可以进行算术运算, 但是指针的算术运算仅限于</p><p>①指针加/减一个整数, 表示以指向类型的存储单元为单位, 向前或向后移动若干个元素的位置. 如double型8个字节为一个单元, 若有定义<code>double a, *p = &amp;a;</code>则<code>p+1</code>表示的是<code>p</code>后面8个字节的位置.</p><p>②两个同类型的指针相减, 表示以指向类型的存储单元为单位, 两个地址之间相差的元素个数</p><h3 id="用指针处理数组">用指针处理数组</h3><p>指针的算术运算常常用来处理数组</p><p>在<strong>绝大多数情况下，数组名表示数组的首地址</strong>(数组第一个元素的地址)。即若定义<code>int a[]</code>则<code>a</code>等价于<code>&amp;a[0]</code>。</p><p>但是，需要注意的是，这里有<strong>两个例外: 第一个是<code>sizeof()</code>，第二个是取地址<code>&amp;</code></strong>。在这两种情况之下，我们不能把数组名等同于数组的首地址。</p><p>假设我们已经定义了<code>int a[10]</code>，那么</p><p>• <code>sizeof(a)</code>返回的是<strong>整个数组的长度</strong>40，而不是指向数组的指针的长度4。</p><p>• <code>&amp;a</code>得到的是一个<strong>指向数组的指针</strong>，而不是一个指向指针常量的指针。这里再要特别注意，是指向数组的指针，而不是指向数组第一个元素的指针。即<code>&amp;a</code>和<code>&amp;a+1</code>相差的是整个数组的长度，而<code>a</code>和<code>a+1</code>相差的只是一个数组元素的长度。</p><p>扫描数组的n个元素并进行处理有一下几种方式:</p><p>• 下标方式: <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="comment">//处理a[i]，或者处理*(a+i)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>• 指针方式: <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (p = a, <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="comment">//处理*p</span></span><br><span class="line"><span class="comment">//此方法用下标控制循环，用指针处理数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>• 纯指针方式: <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (p = a; p &lt; a + n; p++) &#123;</span><br><span class="line"><span class="comment">//处理*p</span></span><br><span class="line"><span class="comment">//此方法循环控制和数据处理均使用指针</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>利用好数组元素首地址这个指针常量，有时可以使得代码更加简洁。</p><h3 id="动态变量和动态数组">动态变量和动态数组</h3><p>用<code>new</code>运算符可以开辟一些临时变量和临时数组，不再使用时可以通过<code>delete</code>来释放空间。这样开辟的变量称为动态变量，开辟的数组称为动态数组它们没有名字，因此只能通过指针来使用它们。</p><p>动态数组的一个优势是它的长度可以使用变量给出(如<code>int *p, n=10; p = new int[n];</code>，而普通数组只可以使用常量<code>int a[10];</code>。这就为很多情况下程序的设计提供了方便。</p><p>下面是动态数组使用的一个例子 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">double</span> *p = <span class="keyword">new</span> <span class="keyword">double</span>[n];  <span class="comment">// 动态数组的定义</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) p[i] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">cout</span> &lt;&lt; p[i] &lt;&lt; <span class="string">"\t"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">delete</span>[] p;  <span class="comment">//释放动态数组p</span></span><br></pre></td></tr></table></figure></p><h2 id="引用">引用</h2><p>引用就是取别名.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a; <span class="keyword">int</span> &amp;b = a; <span class="keyword">int</span> &amp;c = b;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">5</span>;  <span class="comment">//等效于int a = 5;也等效于int c = 5;</span></span><br></pre></td></tr></table></figure><p>如上例, 我们先对<code>a</code>取了一个别名<code>b</code>, 于是<code>a</code>和<code>b</code>表示的是同一个变量. 我们接着对<code>b</code>取了一个别名叫<code>c</code>, 则<code>a</code>, <code>b</code>, <code>c</code>都表示同一个变量了. 我们称<code>b</code>, <code>c</code>都是<code>a</code>的引用.</p><p>取了别名后, 别名和原来的名字没有区别.</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++程序设计基础(4) - 复合类型数据：数组</title>
      <link href="/2020/08/16/C++%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80(4)%20-%20%E5%A4%8D%E5%90%88%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE_%E6%95%B0%E7%BB%84/"/>
      <url>/2020/08/16/C++%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80(4)%20-%20%E5%A4%8D%E5%90%88%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE_%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<p>介绍数组和C风格字符串的处理, 以及一些十分常用的数组算法.</p><a id="more"></a><h2 id="一维数组">一维数组</h2><p><strong>• 数组的定义:</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>]; <span class="keyword">double</span> b[<span class="number">20</span>]; <span class="keyword">char</span> c[<span class="number">80</span>];</span><br></pre></td></tr></table></figure><p>数组的大小必须是正的整数类型的常量表达式.</p><p><strong>• 一维数组赋初值:</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;; </span><br><span class="line"><span class="keyword">int</span> a1[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> a2[<span class="number">5</span>] = &#123;<span class="number">1</span>&#125;; <span class="comment">//后面默认初值为0</span></span><br></pre></td></tr></table></figure><p>注意: 如果数组未赋初值, 则数组中元素的值是不确定的(有的编译器会清为特定的值, 有的编译器保留残留值)</p><p><strong>• 计算数组元素个数:</strong> <code>sizeof(a)/sizeof(a[0])</code></p><h2 id="多维数组">多维数组</h2><p><strong>• 多维数组的定义:</strong> <code>int a[2][3][4];</code></p><p><strong>• 多维数组在内存中的存储:</strong> 按<code>a[0][0][0], a[0][0][1], a[0][0][2], a[0][0][3], a[0][1][0], a[0][1][1], a[0][1][2], a[0][1][3], a[0][2][0], ...</code> 依次存放, 占据连续空间</p><p><strong>• 多维数组赋初值:</strong></p><p>​ (1) 按行形式: <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">4</span>][<span class="number">4</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>&#125;,&#123;<span class="number">8</span>&#125;,&#123;<span class="number">0</span>&#125;&#125;; <span class="comment">//每行初值不足补0</span></span><br><span class="line"><span class="keyword">int</span> b[][<span class="number">4</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>&#125;,&#123;<span class="number">8</span>&#125;,&#123;<span class="number">0</span>&#125;&#125;; <span class="comment">//第一维大小可以省略,由初值行数确定. 但第二维大小不可省略.</span></span><br></pre></td></tr></table></figure> ​ (2) 按整体形式: <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">4</span>][<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">9</span>&#125;; <span class="comment">//数据按照内存中存放的顺序依次存储</span></span><br><span class="line"><span class="keyword">int</span> b[][<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">9</span>&#125;; <span class="comment">//第一维大小由初值个数所能构成的行数确定, 此处为2.</span></span><br></pre></td></tr></table></figure></p><h2 id="c风格字符串字符数组">C风格字符串(字符数组)</h2><p><strong>• C风格字符串:</strong> 用字符数组存放并用 '\0' 结束字符串, 用字符串首地址来使用字符串.</p><p><strong>• 赋初值:</strong> 可以按照普通字符数组赋初值的方式(不提倡, 繁琐且容易遗漏串结束标志<code>\0</code>), 通常按照赋字符串初值的方式. 见下例:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> s1[<span class="number">10</span>] = &#123;<span class="string">'H'</span>,<span class="string">'e'</span>,<span class="string">'l'</span>,<span class="string">'l'</span>,<span class="string">'o'</span>&#125;;  <span class="comment">//遗漏了串结束标志</span></span><br><span class="line"><span class="keyword">char</span> s2[] = &#123;<span class="string">'H'</span>,<span class="string">'e'</span>,<span class="string">'l'</span>,<span class="string">'l'</span>,<span class="string">'o'</span>,<span class="string">'\0'</span>&#125;;  <span class="comment">//正确</span></span><br><span class="line"><span class="keyword">char</span> s3[] = <span class="string">"Hello"</span>;  <span class="comment">//与s2的赋值等价</span></span><br></pre></td></tr></table></figure><p><strong>• 字符串的输入输出:</strong> C风格字符串可以直接输入输出, 无需使用循环</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> s[<span class="number">80</span>];</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s;  <span class="comment">//直接输入</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//直接输出</span></span><br></pre></td></tr></table></figure><p>几种输入方式的比较:</p><p>(定义<code>char ch; char s[80];</code>)</p><p><code>cin &gt;&gt; ch;</code> //输入一个字符到ch中, 跳过空格、跳格、回车等空白间隔符</p><p><code>ch = cin.get();</code> //等价于<code>cin.get(ch)</code>, 读取一个字符保存到ch中, 不跳过空白间隔符</p><p><code>cin &gt;&gt; s;</code> //输入一个单词到ch中, 遇到空白间隔符截断</p><p><code>cin.get(s, 80, '\n');</code> //第一个参数表示输入字符串到字符数组s中, 第二个参数表示此次输入保存的最大字符数(79个有效字符加一个串结束标志), 第三个参数(默认参数为<code>\n</code>,常常省略)表示遇到该字符结束输入, 不读取该字符, 并添加串结束标志. 注意: 如果前80个字符都没有回车字符, 那么将读取79个字符, 添加串结束标志, 并产生输入错误标志.</p><p><code>if(!cin) cin.clear();</code> //清除输入错误标志</p><p><code>cin.getline(s, 80, '\n');</code> //类似于<code>cin.get(s, 80, '\n')</code>, 只不过会读取回车字符<code>\n</code>然后丢弃.</p><p><strong>• 字符串的处理:</strong></p><ol type="1"><li><p>利用串结束标志控制循环</p></li><li><p>使用库函数. 常用的字符串</p></li></ol><p><code>strlen(s);</code> //求字符串s的长度, 不含串结束标志. 英文: length</p><p><code>strcpy(s1, s2);</code> //将字符串s2复制到s1中. 英文: copy</p><p><code>strcmp(s1, s2);</code> //按字典序比较s1和s2. 相同时函数值为0, 不相同时比较ASCII码, s1&gt;s2时函数值为1, s1&lt;s2时函数值为-1. (注意, 大写字符的ASCII码小于小写字母的). 英文: compare</p><p><code>strcat(s1, s2);</code> //将字符串s2合并到s1的后面. 英文: catenate</p><p><code>strlwr(s);</code> //变为小写. 英文: lowercase</p><p><code>strupr(s);</code> //变为大写. 英文: uppercase</p><h2 id="常用数组算法">常用数组算法</h2><p>非常常用! 非常重要! 必须掌握!</p><p>为突出重点, 我们这里只列出核心代码</p><h3 id="有序插入">有序插入</h3><p>有序插入指在一个已经排序的数组中将数据插入, 使得到的数组保持已排序的状态. 此处我们以升序数组中有序插入为例.</p><p>假设已有定义<code>double d[20]; double x; int i,n=19;</code> 其中<code>double d[20]</code>中已有<code>n=19</code>个升序排列的数值. 我们要将<code>x</code>有序插入数组<code>d</code>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i=n<span class="number">-1</span>; i&gt;=<span class="number">0</span> &amp;&amp; x&lt;d[i]; i--) &#123;  <span class="comment">//从后往前扫描数组直到插入位置, i始终处于空位的前一位</span></span><br><span class="line">    d[i+<span class="number">1</span>] = d[i];  <span class="comment">//扫描过的数据向后移动一位</span></span><br><span class="line">&#125;</span><br><span class="line">d[i+<span class="number">1</span>] = x; n++;  <span class="comment">// 插入数据, 数据个数增加1个</span></span><br></pre></td></tr></table></figure><h3 id="顺序查找">顺序查找</h3><p>较为简单. 假设已有定义<code>double d[20]; double x; int i,n=20;</code> 其中<code>double d[20]</code>中已有<code>n=20</code>个值. 我们在数组d中查找x. 只要</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">if</span>(d[i] == x) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (i &lt; n) &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"查找的数是数组中第"</span> &lt;&lt; i+<span class="number">1</span> &lt;&lt; <span class="string">"个数"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"查找的数不在数组中"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br></pre></td></tr></table></figure><p>即可</p><h3 id="折半查找">折半查找</h3><p>折半查找的前提是数组有序. 对于有序数组, 折半查找的效率大大高于顺序查找.</p><p>假设已有定义<code>double d[20]; double x; int i,n=20;</code> 其中<code>double d[20]</code>中已有<code>n=20</code>个值. 我们在数组d中查找x.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> low, up;  <span class="comment">//定义low, up, 分别表示正在查找区间的上界和下界</span></span><br><span class="line"><span class="keyword">for</span> (low = <span class="number">0</span>, up = n<span class="number">-1</span>; low &lt;= up; ) &#123;</span><br><span class="line">    i = (low + up)/<span class="number">2</span>;  <span class="comment">//取中间数的下标i</span></span><br><span class="line">    <span class="keyword">if</span>(d[i] == x) <span class="keyword">break</span>;  <span class="comment">//找到就跳出循环</span></span><br><span class="line">    <span class="keyword">if</span>(x &lt; d[i]) &#123; up = i<span class="number">-1</span>; &#125;  <span class="comment">//x在d[low]~d[i-1]内</span></span><br><span class="line">    <span class="keyword">else</span> &#123; low = i+<span class="number">1</span>; &#125;  <span class="comment">//x在d[i+1]~d[up]内</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (low &gt; up) &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"查找的数不在数组中"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"查找的是数组中第"</span> &lt;&lt; i+<span class="number">1</span> &lt;&lt; <span class="string">"个数"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br></pre></td></tr></table></figure><h3 id="选择法排序">选择法排序</h3><p>选择法排序(升序)的核心思想就是每次选择未处理的数中最小的, 放到左端已处理的数据之后.</p><p>假设已有定义<code>double d[100],t; int n,i,k,j;</code> 我们固定字母k用来记录下标.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (k=i, j=i+<span class="number">1</span>; j&lt;n; j++)  </span><br><span class="line">    <span class="keyword">if</span>(d[j]&lt;d[k]) k = j;  <span class="comment">//找i到n-1范围内的最小值, 下标记录在k中</span></span><br><span class="line"><span class="keyword">if</span>(k!=i) &#123; t = d[k]; d[k] = d[i]; d[i] = t; &#125;  <span class="comment">//若最小值不在d[i], 则交换到d[i]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="冒泡法排序">冒泡法排序</h3><p>冒泡排序法(升序), 就是每次从前往后对相邻的数据进行比较, 若次序不正确, 则交换次序. 注意到最大的数据每次交换后都移至最后, 所以每次扫描的数据就要减少1个. 这样, 经过n-1次扫描, 排序就完成了.</p><p>具体实现是这样的: 假设已有定义<code>double d[100],t; int n,i,k;</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (k = n<span class="number">-1</span>; k&gt;<span class="number">0</span>; k--) &#123;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;k; i++)   <span class="comment">//扫描数组的前k+1项数据</span></span><br><span class="line"><span class="keyword">if</span> (d[i]&gt;d[i+<span class="number">1</span>]) &#123; t = d[i]; d[i] = d[i+<span class="number">1</span>]; d[i+<span class="number">1</span>] = t; &#125;</span><br><span class="line">        <span class="comment">//相邻两项比较, 次序不对就换序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++程序设计基础(3) - 结构化程序设计</title>
      <link href="/2020/08/15/C++%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80(3)%20-%20%E7%BB%93%E6%9E%84%E5%8C%96%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
      <url>/2020/08/15/C++%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80(3)%20-%20%E7%BB%93%E6%9E%84%E5%8C%96%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<p>介绍两种基本的结构: 选择结构与循环结构</p><a id="more"></a><h2 id="语句">语句</h2><p>语句是C++程序的基本执行单位. 在C++中, 一个语句后面加分号表示语句的结束.</p><p>C++中的语句分为单语句、复合语句和结构性语句.</p><p>• 单语句: 单一用分号结束的语句. (可以为空语句, 即只有一个分号)</p><p>• 复合语句: 由多个语句组成, 用花括号括起来. 复合语句后面不用加分号.</p><p>• 结构性语句: 特定的语句结构, 如for语句、while语句、do...while语句、if语句、switch语句等.</p><p>语句可以嵌套, 因此有层级之分, 这在后面提及语句作用域的时候会特别说明.</p><h2 id="选择结构">选择结构</h2><h3 id="if语句">if语句</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(表达式) &#123;...&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(表达式) &#123;...&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(表达式) &#123;...&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;...&#125;</span><br></pre></td></tr></table></figure><h3 id="条件表达式">条件表达式</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">表达式<span class="number">1</span> ? 表达式<span class="number">2</span> : 表达式<span class="number">3</span></span><br></pre></td></tr></table></figure><p>表达式1为true时计算表达式2的值作为结果, 为false时计算表达式3的值作为结果.</p><h3 id="switch语句">switch语句</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(整数表达式)   <span class="comment">//包括int及其派生类型、字符类型、逻辑类型</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> 常量表达式<span class="number">1</span>: 语句序列<span class="number">1</span></span><br><span class="line"><span class="keyword">case</span> 常量表达式<span class="number">2</span>: 语句序列<span class="number">2</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">case</span> 常量表达式n: 语句序列n</span><br><span class="line"><span class="keyword">default</span>: 语句序列n+<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(grade)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'A'</span>:</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; “<span class="number">90</span>~<span class="number">100</span>” &lt;&lt; <span class="built_in">endl</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'B'</span>:</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; “<span class="number">80</span>~<span class="number">89</span>” &lt;&lt; <span class="built_in">endl</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'C'</span>:</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; “<span class="number">70</span>~<span class="number">79</span>” &lt;&lt; <span class="built_in">endl</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'D'</span>:</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; “<span class="number">60</span>~<span class="number">69</span>” &lt;&lt; <span class="built_in">endl</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'E'</span>:</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; “<span class="number">0</span>~<span class="number">59</span>” &lt;&lt; <span class="built_in">endl</span>; <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="循环结构">循环结构</h2><h3 id="while语句和do...while语句">while语句和do...while语句</h3><p>• while语句:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(表达式)&#123;...&#125;</span><br></pre></td></tr></table></figure><p>• do...while语句:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;...&#125;<span class="keyword">while</span>(表达式);</span><br></pre></td></tr></table></figure><p>两者的区别是while语句先进行判断再决定是否执行语句, 而do...while先执行一次内嵌语句再进行判断.</p><h3 id="for语句">for语句</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(表达式<span class="number">1</span>; 表达式<span class="number">2</span>; 表达式<span class="number">3</span>)&#123;...&#125;</span><br></pre></td></tr></table></figure><p>其中 表达式1为初始操作; 表达式2为循环条件; 表达式3在内嵌语句后执行</p><blockquote><p><strong>算法. 求最大公约数(辗转相除法)</strong> 求a, b两个整数的最大公约数 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b; b!=<span class="number">0</span>; r=a%b, a=b, b=r);</span><br></pre></td></tr></table></figure> 则得到的a为最大公约数.</p></blockquote><h3 id="break和continue语句">break和continue语句</h3><p>break跳出循环, 但只跳出一层循环. continue终止本次循环, 进入下一次循环.</p><blockquote><p><strong>算法. 判断是否为素数</strong> 设输入的数据为n, 判断其是否为素数 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (sqrtn = <span class="built_in">sqrt</span>((<span class="keyword">double</span>)n), i = <span class="number">2</span>; i &lt;= sqrtn; i++);</span><br><span class="line"><span class="keyword">if</span> (n % i == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (n &gt;= <span class="number">2</span> &amp;&amp; i &gt; sqrtn) <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; “ is prime” &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; “ is <span class="keyword">not</span> prime” &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++程序设计基础(2) - 数据与运算</title>
      <link href="/2020/08/15/C++%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80(2)%20-%20%E6%95%B0%E6%8D%AE%E4%B8%8E%E8%BF%90%E7%AE%97/"/>
      <url>/2020/08/15/C++%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80(2)%20-%20%E6%95%B0%E6%8D%AE%E4%B8%8E%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<p>主要介绍C++的基本数据类型和运算符, 略去了较为简单的内容</p><a id="more"></a><h2 id="c标识符">C++标识符</h2><p>• C++标识符的含义: C++中使用的名字, 如变量名、类型名、函数名等</p><p>• 合法的C++标识符：由字母、数字、下划线构成，首字母不能是数字.</p><h2 id="常量">常量</h2><p>• 八进制: 前缀为<code>0</code>十六进制: 前缀为<code>0x</code>或<code>0X</code></p><p>• 转义序列(预定义): 换行<code>\n</code> (newline), 跳格<code>\t</code> (tab), 回车<code>\r</code> (return), 警报<code>\a</code> (alarm), 回退一个字符<code>\b</code> (backspace), 反斜杠<code>\\</code>, 单引号<code>\'</code> 转义序列(ASCII): 用最多3位八进制(如<code>\103</code>) 或 <code>x</code>加上最多2位十六进制(如<code>\x6f</code>)表示字符.</p><p>• 最大整数 <code>maxInt = 0x7fffffff</code>, 最小整数 <code>minInt = 0x80000000</code></p><p>• 八进制输出 <code>cout &lt;&lt; oct &lt;&lt; maxInt;</code> 十六进制输出 <code>cout &lt;&lt; hex &lt;&lt; maxInt;</code> 十进制输出 <code>cout &lt;&lt; dec &lt;&lt; maxInt;</code></p><h2 id="基本运算及表达式">基本运算及表达式</h2><p>• 结合方向从右向左: (1) 部分一元运算: <code>*</code>(指向),<code>&amp;</code>(取地址), <code>new</code>, <code>delete</code>, <code>!</code>, <code>~</code>, <code>++</code>, <code>--</code>, <code>-</code>(取负), <code>sizeof()</code>, 显式转换 (2) 三元运算: <code>? :</code> (3) 赋值运算: <code>=</code>, <code>+=</code>, <code>-=</code>,<code>*=</code>, <code>/=</code>, <code>%=</code>, <code>&lt;&lt;=</code>, <code>&gt;&gt;=</code>, <code>&amp;=</code>, <code>^=</code>, <code>|=</code></p><p>• 左值: 表示存储单元的表达式, 可被赋值. 在C++中, 前置增量/减量运算, 赋值运算的结果是左值. 右值: 不是左值的表达式, 不可被赋值. 常量和计算值是右值.</p><p>• 连续输入数据, 以Ctrl^Z结束的方式: <code>while (cin &gt;&gt; x){...}</code></p><p>• 显式类型转换: 若定义<code>int a = 3;</code> 将其转换为double类型的方法如下<code>double(a);</code> 或 <code>(double)a;</code> 或 <code>static_cast&lt;double&gt;(a);</code></p><p>• 短路表达式: 逻辑表达式(与、或)一旦有了最终结果就不再计算.</p><h2 id="位运算">位运算</h2><p>与运算 <code>&amp;</code> : 都为1, 结果才为1.</p><p>或运算 <code>|</code> :只要有一个为1, 结果就为1.</p><p>非运算(取反运算) <code>~</code> : 0变1, 1变0.</p><p>异或运算 <code>^</code> : 不进位加法</p><p>移位运算: 左移 <code>&lt;&lt;</code> (右边补0), 右移 <code>&gt;&gt;</code> (左边拓展高位数字, 有符号类型进行符号拓展, 无符号类型进行0拓展)</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++程序设计基础(1) - 计算机基础知识</title>
      <link href="/2020/08/15/C++%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80(1)%20-%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2020/08/15/C++%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80(1)%20-%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>主要介绍进制的转换和计算机数值表示</p><a id="more"></a><h2 id="进制的转换">进制的转换</h2><p><strong>1.其它进制转换为十进制</strong></p><p>利用展开式直接计算。例如：将八进制数<span class="math inline">\((137.45)_{8}\)</span>转换为十进制</p><p><span class="math display">\[(137.45)_{8}=1\times8^{2}+3\times8^{1}+7\times8^{0}+4\times8^{-1}+5\times8^{-2}\]</span></p><p><strong>2.十进制转换为其它进制</strong></p><p>整数用短除法(反复除以进制数), 余数倒排. 小数反复乘以进制数, 余数部分依次排列</p><p><strong>3.二进制与八进制, 二进制与十六进制转换</strong></p><p>它们有直接的对应关系, 每3位二进制对应1位八进制, 每4位二进制对应1位十六进制.</p><h2 id="计算机数值表示">计算机数值表示</h2><p>1个<strong>字节</strong>由8位二进位组成, 是计算机的基本存储单位.</p><h3 id="整数表示">整数表示</h3><p>• <strong>无符号整数</strong>(unsigned类型): 直接用二进制表示, 高位补0.</p><p>• <strong>有符号整数</strong>(signed类型): 使用<strong>补码</strong>表示. 规定: 补码的最高位是符号位, 正数为0, 负数为1; 其余的位数用来表示数值. 正数直接用二进制表示, 负数用与正数二进制数相补的数表示(相加进位).</p><h3 id="实数表示-ieee标准">实数表示 (IEEE标准)</h3><p>实数采用二进制标准化科学计数法表示: 先写成二进制小数再使用科学计数法. 如:</p><p><span class="math display">\[+0.001=\underset{\text{符号位}}{+}\underset{\text{尾数部分(小数点以后)}}{1.0000011\ 00010010\ 01101110\ 10010111\ \cdots}\times\underset{\text{指数部分}}{2^{-10}}\]</span></p><p>数据分为三个部分存储: 符号位、指数部分、尾数部分.</p><p>• 符号位: 正数用0, 负数用1.</p><p>• 指数部分: 采用<strong>移码</strong>表示法. 对指数部分加上 <span class="math inline">\((0111\cdots111)_{2}\)</span> , 得到的二进制数称为移码. (加上一个大整数是为了将负数转化为正数)</p><p>• 尾数部分: 截断时舍入规则为0舍1入. 注意: 单精度和双精度格式的尾数部分只保存小数点后的小数, 而扩展精度的要保存整数部分的1.</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Mint安装及LaTeX-Lyx配置踩坑记</title>
      <link href="/2020/07/26/Linux-Mint%E5%AE%89%E8%A3%85%E5%8F%8ALaTeX-Lyx%E9%85%8D%E7%BD%AE%E8%B8%A9%E5%9D%91%E8%AE%B0/"/>
      <url>/2020/07/26/Linux-Mint%E5%AE%89%E8%A3%85%E5%8F%8ALaTeX-Lyx%E9%85%8D%E7%BD%AE%E8%B8%A9%E5%9D%91%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>本文记录安装Linux Mint系统过程中以及使用Linux版的LaTeX和Lyx时出现的问题，并给出解决方案。</p><a id="more"></a><h2 id="来由">来由</h2><p>前几天在Deepin系统上试图安装Lyx，但是Lyx在Deepin软件源中的版本滞后，无法打开我之前的Lyx文档。于是我便试图在Deepin中加载Ubuntu的软件源。一开始，一切似乎都无比正常，<code>sudo apt-get update</code>顺利执行，说明软件源加载成功。然后，我用<code>sudo apt-cache policy lyx</code>检查了软件源中Lyx的版本，由原来的<code>2.2.2</code>提升到了<code>2.3.5.2</code>，是最新的stable版本。大喜之下，一行<code>sudo apt-get install lyx</code>开始安装，提示要添加三百多个软件包，更新四百多个，删除两百多个。也没多想，就敲了Y，漫长的更新过程大概持续了十几分钟。然后怀着迫切的心情，我立即查看是否安装成功，打开Lyx正常，版本号正确。但很快，我就发现了事情的严重性，开始菜单无法弹出，深度监视器无法打开，最糟糕的是——无法关机，无法重启！只好强制关机，可谁知，关机后便再也无法进入系统（卡在Deepin的徽标界面）。网友们给出的解释是Deepin的图形界面相关的软件包被卸载或者更新，而更新后的软件包可能与其它模块不兼容，因此无法进入系统。</p><p>所以，总结一下，<strong>第一个坑：不要在Deepin上加载Ubuntu软件源！</strong></p><p>LaTeX对于我是刚需，而Lyx对于喜欢记记杂碎问题的我是一大利器。于是，我决定果断放弃Deepin。</p><h2 id="初识linux-mint">初识Linux Mint</h2><p>在网上进行了一番比较，似乎对于个人家用，Ubuntu和Linux Mint是首选，而Linux Mint基于Ubuntu，在图形界面上占优势。便挑选了Linux Mint。</p><p>一番常规操作之后，我用U盘作为启动盘进入了安装程序，磁盘分区可把我分的头都大了，本来就是双硬盘双系统，分出的区特别多。这里建议<strong>可以事先在Windows上用DiskGenius查看原本有哪些分区，分别对应什么，然后手机拍照记录下来</strong>。这样等到真正分区的时候就不会乱了。</p><p>麻烦的事情发生了：我选择将启动引导器安装到<code>dev/sdb</code>（我的SSD），可是却报错</p><blockquote><p>Ubuntu Error: The partition table format in use on your disks normally requires you to create a separate partition for boot loader code. This partition should be marked for use as a "Reserved BIOS boot area" and should be at least 1MB in size. Note that this is not the same as a partition mounted on <code>/boot</code>.</p></blockquote><p>于是，我按照它的提示，创建了一个保留BIOS分区。选择安装启动引导器到该分区，没有报错。但这只是冰山一角。</p><p>安装即将结束的时候，报错：</p><blockquote><p>fatal error: 执行 ‘grub-install /dev/sdb' 失败，这是一个致命错误</p></blockquote><p>解决方案：<strong>制作Linux Mint启动盘不可以用Ultra ISO</strong>，它会默认选择UEFI的启动模式，而且Linux Mint的原生安装包实际上还缺失两个文件，需要制作时补上。那么如何制作呢？<strong>使用rufus，避开UEFI启动的选项</strong>，制作前，它会提示自动下载那两个文件。使用重新制作的启动盘，那两个错误都不会出现。并且<strong>启动引导器就直接安装在硬盘上，不要安装在分区中，更无需创建保留BIOS分区</strong>。</p><p>Linux Mint刚刚打开的时候，第一眼注意到的就是它优美的图形界面。字体或许有点小，但这是容易调节的。</p><h2 id="安装texlive和lyx">安装Texlive和Lyx</h2><p>LaTeX是刚需，自然少不了安装相关的环境。安装Texlive和Lyx除了耗时较长以外，没有出现错误信息。问题出现在全部安装完毕，打开Lyx编写文档时。我选择“从模版新建”，并选择ctex.lyx ，这时弹出提示信息ctexart.cls和一些sty找不到，导致无法编译文档。经过检查，Texlive已经完整安装，ctexart.cls和相关sty文件都存在。</p><p>解决方案：<strong>终端中执行<code>texhash</code> ，然后在Lyx中“重新配置Lyx“</strong>。</p><h2 id="一些其它的坑">一些其它的坑</h2><p>关于Linux分区大小问题：最好一次到位，后面调整比较麻烦。要充分预估后面安装的软件数量。我这次的分区为： <code>/boot</code> 500MB；<code>/</code> 46GB；<code>/home</code> 45GB</p><p>但是实际使用过程中发现，安装完必备的软件（主要是Texlive较大）已经占用了27GB <code>/</code> 下的空间了，而 <code>/home</code> 才放了不到2GB的文件。实际上，<code>/home</code> 的用处不是很大，因为在Windows和Linux双系统中，可以挂载Windows下的磁盘，也就是说，Linux下可以访问Windows系统的文件（但Windows下不能直接访问Linux的文件，原因是磁盘文件系统不同（Linux为ext4））。所以，在Linux下我们存储文件可以存放在磁盘的任意位置，不需要存放于 <code>/home</code> 中，在分区时根目录 <code>/</code> 应该适当预留大一些，而 <code>/home</code> 则不需要太大。</p><p>如果让我重新分区，我会分为 <strong><code>/boot</code> 500MB；<code>/</code> 71GB；<code>/home</code> 20GB</strong> <strong>这是Linux Mint和Windows双系统中比较合适的比例。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> LaTeX </tag>
            
            <tag> Lyx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合元素个数与线性空间的维数</title>
      <link href="/2020/07/12/%E9%9B%86%E5%90%88%E5%85%83%E7%B4%A0%E4%B8%AA%E6%95%B0%E4%B8%8E%E7%BA%BF%E6%80%A7%E7%A9%BA%E9%97%B4%E7%9A%84%E7%BB%B4%E6%95%B0/"/>
      <url>/2020/07/12/%E9%9B%86%E5%90%88%E5%85%83%E7%B4%A0%E4%B8%AA%E6%95%B0%E4%B8%8E%E7%BA%BF%E6%80%A7%E7%A9%BA%E9%97%B4%E7%9A%84%E7%BB%B4%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>证明一个集合元素个数不超过线性空间的维数, 可以去证明这个集合的元素是线性无关的. 而证明线性空间的维数不超过集合元素个数n, 可以考虑证明线性空间中任意n+1个元素都线性相关. 这在域论中是常见的手法.</p><p>下面给出几个例子.</p><a id="more"></a><blockquote><p><strong>问题 1</strong> 设<span class="math inline">\(V\)</span>为 n 维实线性空间, <span class="math inline">\(M\subseteq\mathrm{End}V\)</span>, 满足</p><ol type="1"><li><p><span class="math inline">\(\mathrm{id}\in M,0\notin M\)</span>;</p></li><li><p>若<span class="math inline">\(\mathscr{A},\mathscr{B}\in M\)</span>, 则<span class="math inline">\(\mathscr{AB}\in M\)</span>或<span class="math inline">\(\mathscr{BA}\in M\)</span>;</p></li><li><p>若<span class="math inline">\(\mathscr{A},\mathscr{B}\in M\)</span>, 则<span class="math inline">\(\mathscr{AB}=\mathscr{BA}\)</span>或<span class="math inline">\(\mathscr{AB}=-\mathscr{BA}\)</span>;</p></li><li><p>若<span class="math inline">\(\mathscr{A}\in M\)</span>且<span class="math inline">\(\mathscr{A}\neq\pm\mathrm{id}\)</span>, 则存在<span class="math inline">\(\mathscr{B}\in M\)</span>, s.t. <span class="math inline">\(\mathscr{AB=-BA}\)</span></p></li></ol><p>证明: <span class="math inline">\(M\)</span>中的元素个数不超过<span class="math inline">\(2n^{2}\)</span>.</p></blockquote><p>证明: (提示: 证明一个集合元素个数不超过线性空间的维数, 可以去证明这个集合的元素是线性无关的. 此处<span class="math inline">\(n^{2}\)</span>暗示维数, <span class="math inline">\(\mathscr{A},-\mathscr{A}\)</span>可以同时出现, 所以有个 2 倍.)</p><p>首先证明<span class="math inline">\(\forall\mathscr{A}\in M\)</span>, 都有<span class="math inline">\(\mathscr{A}^{2}=\pm\mathrm{id}\)</span>.</p><p>任取<span class="math inline">\(\mathscr{A}\in M\)</span> , 由(2)得<span class="math inline">\(\mathscr{A}^{2}\in M\)</span>. 如果<span class="math inline">\(\mathscr{A}^{2}\neq\pm\mathrm{id}\)</span> , 则由(4), <span class="math inline">\(\exists\mathscr{B}\in M\)</span>, s.t. <span class="math inline">\(\mathscr{A}^{2}\mathscr{B}=-\mathscr{BA}^{2}\)</span>.</p><p>另一方面, 若<span class="math inline">\(\mathscr{AB}=\mathscr{BA}\)</span>, 则<span class="math inline">\(\mathscr{A}^{2}\mathscr{B}=\mathscr{A}(\mathscr{AB})=\mathscr{A}(\mathscr{BA})=(\mathscr{AB})\mathscr{A}=\mathscr{B}\mathscr{A}^{2}\)</span>; 若<span class="math inline">\(\mathscr{AB}=-\mathscr{BA}\)</span>, 则<span class="math inline">\(\mathscr{A}^{2}\mathscr{B}=\mathscr{A}(\mathscr{AB})=\mathscr{A}(-\mathscr{BA})=-(\mathscr{AB})\mathscr{A}=\mathscr{B}\mathscr{A}^{2}\)</span>. 即总有<span class="math inline">\(\mathscr{A}^{2}\mathscr{B}=\mathscr{B}\mathscr{A}^{2}\)</span>. 所以<span class="math inline">\(M\ni\mathscr{A}^{2}\mathscr{B}=0\)</span>, 这与(1)矛盾.</p><p>然后证明<span class="math inline">\(M\)</span>中不同且不互为相反数的元素线性无关.</p><p>(反证法)假设<span class="math inline">\(M\)</span>中不同且不互为相反数的元素线性相关, 那么一定可以找到一个最小的<span class="math inline">\(n\)</span>, 使得<span class="math inline">\(M\)</span>中不同且不互为相反数的<span class="math inline">\(n\)</span>个元素线性相关.</p><p>设<span class="math inline">\(\mathscr{A}_{1}, \mathscr{A}_{2}, \cdots, \mathscr{A}_{n}\in M\)</span>互不相同且<span class="math inline">\(\forall i\neq j\)</span>, <span class="math inline">\(\mathscr{A}_{i}+\mathscr{A}_{j}\neq0\)</span>, <span class="math inline">\(\mathscr{A}_{1}, \mathscr{A}_{2}, \cdots, \mathscr{A}_{n}\)</span>线性相关.</p><p><span class="math inline">\(\exists k_{i}\neq0\)</span> , 使得 <span class="math inline">\(\sum_{i=1}^{n} k_{i} \mathscr{A}_{i}=0\)</span>. 不妨设<span class="math inline">\(\mathscr{A}_{1}=\pm\mathrm{id}\)</span> (否则考虑<span class="math inline">\(\sum_{i=1}^{n} k_{i} \mathscr{A}_{1} \mathscr{A}_{i}=0\)</span>) , 则<span class="math inline">\(\mathscr{A}_{2},\cdots,\mathscr{A}_{n}\neq\pm\mathrm{id}\)</span>.</p><p><span class="math inline">\(\mathscr{A}_{n}\neq\pm\mathrm{id}\)</span>和(4)可知<span class="math inline">\(\mathscr{C}\in M\)</span>, s.t. <span class="math inline">\(\mathscr{A}_{n}\mathscr{C}=-\mathscr{C}\mathscr{A}_{n}\)</span>.</p><p>不妨假设对<span class="math inline">\(1\leq i\leq t\)</span>, <span class="math inline">\(\mathscr{A}_{i}\mathscr{C}=\mathscr{C}\mathscr{A}_{i}\)</span>; 对<span class="math inline">\(t+1\leq i\leq n-1\)</span>, <span class="math inline">\(\mathscr{A}_{i}\mathscr{C}=-\mathscr{C}\mathscr{A}_{i}\)</span>. 对式子</p><p><span class="math display">\[\sum_{i=1}^{n-1}k_{i}\mathscr{A}_{i}=-k_{n}\mathscr{A}_{n}\]</span></p><p>分别用<span class="math inline">\(\mathscr{C}\)</span>左作用和右作用, 得</p><p><span class="math display">\[\sum_{i=1}^{t}k_{i}\mathscr{C}\mathscr{A}_{i}+\sum_{i=t}^{n-1}k_{i}\mathscr{C}\mathscr{A}_{i}=-k_{n}\mathscr{C}\mathscr{A}_{n}\]</span></p><p><span class="math display">\[\sum_{i=1}^{t}k_{i}\mathscr{A}_{i}\mathscr{C}+\sum_{i=t}^{n-1}k_{i}\mathscr{A}_{i}\mathscr{C}=-k_{n}\mathscr{A}_{n}\mathscr{C}\]</span></p><p>由于对<span class="math inline">\(t+1\leq i\leq n\)</span>, <span class="math inline">\(\mathscr{A}_{i}\mathscr{C}=-\mathscr{C}\mathscr{A}_{i}\)</span>. 故将两式相加, 得到</p><p><span class="math display">\[\sum_{i=1}^{t}k_{i}\mathscr{C}\mathscr{A}_{i}=0\]</span></p><p>而<span class="math inline">\(t\leq n-1\)</span>, 与<span class="math inline">\(n\)</span>的最小性矛盾.</p><p>因此, <span class="math inline">\(M\)</span>中不同且不互为相反数的元素线性无关. 而<span class="math inline">\(\dim M\leq n^{2}\)</span>. 故<span class="math inline">\(\left|M\right|\leq2n^{2}\)</span>. <span class="math inline">\(\square\)</span></p><blockquote><p><strong>问题 2</strong> [Dedekind-Artin] 设<span class="math inline">\(G\)</span>是一个幺半群, <span class="math inline">\(\mathbb{K}\)</span>是一个域 (则<span class="math inline">\(K^{*} := \mathbb{K}-\{0\}\)</span>是一个群). <span class="math inline">\(\sigma_{1},\sigma_{2},\ldots,\sigma_{n}\)</span>是两两不同的非零同态<span class="math inline">\(G\rightarrow K^{*}\)</span>, 则它们在<span class="math inline">\(\mathbb{K}\)</span>上线性无关.</p></blockquote><p>证明: 假设存在这样的一组非零同态, 使得它们在<span class="math inline">\(\mathbb{K}\)</span>上线性无关, 则一定能找到其中元素个数最少的一组. 设<span class="math inline">\(n\)</span>是满足</p><p><span class="math display">\[a_{1}\sigma_{1}+\cdots+a_{n}\sigma_{n}=0,\ a_{i}\in\mathbb{K}\text{不全为}0\]</span></p><p>的最小的正整数. 则<span class="math inline">\(n\geq2\)</span>, <span class="math inline">\(a_{i}\)</span>均不为 0.</p><p>因为<span class="math inline">\(\sigma_{1},\sigma_{2}\)</span>不同, 故<span class="math inline">\(\exists z\in G\)</span>使得<span class="math inline">\(\sigma_{1}(z)\neq\sigma_{2}(z)\)</span>. 对于任意<span class="math inline">\(x\in G\)</span>, 都有 <span class="math display">\[a_{1}\sigma_{1}(xz)+\cdots+a_{n}\sigma_{n}(xz)=0\]</span></p><p>由于<span class="math inline">\(\sigma_{i}\)</span>是同态, 则有</p><p><span class="math display">\[a_{1}\sigma_{1}(z)\sigma_{1}+\cdots+a_{n}\sigma_{n}(z)\sigma_{n}=0\]</span></p><p>两边同除<span class="math inline">\(\sigma_{1}\)</span>并与第一个式子相减, 得</p><p><span class="math display">\[\left(a_{2}\dfrac{\sigma_{2}(z)}{\sigma_{1}(z)}-a_{2}\right)\sigma_{2}+\cdots+\left(a_{n}\dfrac{\sigma_{n}(z)}{\sigma_{1}(z)}-a_{n}\right)\sigma_{n}=0\]</span></p><p>其第一个系数就不为 0, 且比第一个式子少一个元素, 这与<span class="math inline">\(n\)</span>的最小性矛盾.</p><p>因此, 任意一组两两不同的非零同态<span class="math inline">\(G\rightarrow K^{*}\)</span>在<span class="math inline">\(\mathbb{K}\)</span>上线性无关. <span class="math inline">\(\square\)</span></p><blockquote><p><strong>问题 3</strong> [Artin] 设<span class="math inline">\(\mathbb{E}\)</span>为数域, <span class="math inline">\(G\)</span>为<span class="math inline">\(\mathrm{Aut}\mathbb{E}\)</span>的有限子群, 则<span class="math inline">\(\left|G\right|\geq\left[\mathbb{E}:\mathbb{F}\right]\)</span>.</p></blockquote><p>证明: 设<span class="math inline">\(G=\{\sigma_{1}=\mathrm{id},\sigma_{2},\ldots,\sigma_{n}\}\)</span>. 要证<span class="math inline">\(\left[\mathbb{E}:\mathbb{F}\right]\leq\left|G\right|=n\)</span>, 只要证<span class="math inline">\(\mathbb{E}\)</span>上任意<span class="math inline">\(n+1\)</span>个元素在<span class="math inline">\(\mathbb{F}\)</span>上线性相关.</p><p><span class="math inline">\(\forall\alpha_{1},\alpha_{2},\ldots,\alpha_{n},\alpha_{n+1}\in\mathbb{E}\)</span>, 则<span class="math inline">\(\mathbb{E}\)</span>上的线性方程组</p><p><span class="math display">\[\begin{pmatrix}\sigma_{1}(\alpha_{1}) &amp; \sigma_{1}(\alpha_{2}) &amp; \cdots &amp; \sigma_{1}(\alpha_{n+1})\\\sigma_{2}(\alpha_{1}) &amp; \sigma_{2}(\alpha_{2}) &amp; \cdots &amp; \sigma_{2}(\alpha_{n+1})\\\vdots &amp; \vdots &amp;  &amp; \vdots\\\sigma_{n}(\alpha_{1}) &amp; \sigma_{n}(\alpha_{2}) &amp; \cdots &amp; \sigma_{1}(\alpha_{n+1})\end{pmatrix}_{n\times(n+1)}\begin{pmatrix}x_{1}\\x_{2}\\\vdots\\x_{n+1}\end{pmatrix}=0\]</span></p><p>必有非 0 解 (未知数的个数大于方程个数).</p><p>考虑其中包含非 0 元素最少的非零解<span class="math inline">\(\begin{pmatrix}b_{1} &amp; b_{2} &amp; \cdots &amp; b_{m} &amp; 0 &amp; \cdots &amp; 0\end{pmatrix}\)</span>, 其中<span class="math inline">\(b_{i}\neq0,i=1,2,\ldots,m\)</span>. 不妨设<span class="math inline">\(b_{1}=1\)</span>, (否则考虑<span class="math inline">\(\begin{pmatrix}1 &amp; \dfrac{b_{2}}{b_{1}} &amp; \cdots &amp; \dfrac{b_{m}}{b_{1}} &amp; 0 &amp; \cdots &amp; 0\end{pmatrix}\)</span>).</p><p>方程组两边用<span class="math inline">\(\sigma_{i}\)</span>作用, 由<span class="math inline">\(\sigma_{i}\)</span>是同态, 可以得到<span class="math inline">\(\begin{pmatrix}\sigma_{i}(b_{1}) &amp; \sigma_{i}(b_{2}) &amp; \cdots &amp; \sigma_{i}(b_{m}) &amp; 0 &amp; \cdots &amp; 0\end{pmatrix}\)</span>是一组非零解, 其中<span class="math inline">\(\sigma_{i}(b_{1})=\sigma_{i}(1)=1\)</span>. 将两组解相减, 得</p><p><span class="math display">\[\begin{pmatrix}0 &amp; \sigma_{i}(b_{2})-b_{2} &amp; \cdots &amp; \sigma_{i}(b_{m})-b_{m} &amp; 0 &amp; \cdots &amp; 0\end{pmatrix}\]</span></p><p>也是一组非零解. 但这组解比<span class="math inline">\(\begin{pmatrix}b_{1} &amp; b_{2} &amp; \cdots &amp; b_{m} &amp; 0 &amp; \cdots &amp; 0\end{pmatrix}\)</span>含有更少的非零元, 因此它只能是零解, 即</p><p><span class="math display">\[\sigma_{i}(b_{j})=b_{j},\ \forall1\leq i\leq n,\ 1\leq j\leq m\]</span></p><p>由<span class="math inline">\(\mathbb{F}\)</span>的定义知<span class="math inline">\(b_{j}\in\mathbb{F},\ \forall1\leq j\leq m\)</span>. 所以</p><p><span class="math display">\[0=\sum_{j=1}^{n+1}\sigma_{1}(\alpha_{j})b_{j}=\sum_{j=1}^{n+1}\mathrm{id}(\alpha_{j})b_{j}=\sum_{j=1}^{n+1}b_{j}\alpha_{j}\]</span></p><p>这表明<span class="math inline">\(\alpha_{1},\ldots,\alpha_{n+1}\)</span>在<span class="math inline">\(\mathbb{F}\)</span>上线性相关. <span class="math inline">\(\square\)</span></p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
          <category> 代数 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 抽象代数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Excerpts of Where the Crawdads Sing</title>
      <link href="/2020/07/08/Excerpts-of-Where-the-Crowdads-Sing/"/>
      <url>/2020/07/08/Excerpts-of-Where-the-Crowdads-Sing/</url>
      
        <content type="html"><![CDATA[<p>Excerpts made when reading the novel <em>Where the Crawdads Sing</em>.</p><a id="more"></a><blockquote><p>Secretly Kya hoped not to catch a fish, but she felt a tug, jerked her line, and raised a thick bream, flashing silver and blue. Pa leaned out and snatched it in the net, then sat back, slapping his knee and yahooing like she'd never seen. She grinned wide and they looked into each other's eyes, closing a circuit.</p><p>---- <em>Chapter 7: The Fishing Season</em></p></blockquote><blockquote><p>Sycamore and hickories stretched naked limbs against the dull sky and the relentless wind sucked any joy the winter sun might have spread across the bleakness.</p><p>---- <em>Chapter 11 Croker Sacks Full</em></p></blockquote><blockquote><p>Then the kerosene light flickered, faded, and died. One minute there was a soft circle of the world, and then darkness.</p><p>---- <em>Chapter 11 Croker Sacks Full</em></p></blockquote><blockquote><p>Here - instead of the estuaries and enormous sweeps of grass, as in her marsh - clear water followed as far as she could see through a bright and open cypress forest. Brilliant white herons and storks stood among water lilies and floating plants so green they seemed to glow.</p><p>---- <em>Chapter 26 The Boat Ashore</em></p></blockquote><blockquote><p>Clouds lazed in the folded arms of the hills, then billowed up and drifted away. Some tendrils twisted into tight spirals and traced the warmer ravines, behaving like mist tracking the dank fens of the marsh.</p><p>---- <em>Chapter 27 Out Hog Mountain Road</em></p></blockquote><blockquote><p>Colors, which had been muted by the dimness formed into shapes as they moved into the light.</p><p>---- <em>Chapter 35 The Compass</em></p></blockquote><blockquote><p>Sunsets are never simple. Twilight is refracted and reflected, But never true. Even tide is a disguise Covering tracks, Covering lies.</p><p>We don't care That dusk deceives, We see brilliant colors, And never learn The sun has dropped Beneath the earth. By the time we see the burn.</p><p>Sunsets are in disguise, Covering truth, covering lies.</p><p>---- <em>Chapter 35 The Compass</em></p></blockquote><blockquote><p>Even though she only went to school one day in her life - because the other children harassed her - she educated herself and became a well known naturalist and author. We called her the Marsh Girl; now scientific institutions recognize her as the Marsh Expert.</p><p>---- <em>Chapter 53 Missing Link</em></p></blockquote><blockquote><p>I believe you can put all of the rumors and tall tales aside, I believe you will come to a judgment based on the facts you heard in this courtroom, not the false rumors you have heard for years.</p><p>---- <em>Chapter 53 Missing Link</em></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> English </tag>
            
            <tag> book </tag>
            
            <tag> novel </tag>
            
            <tag> excerpt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试文档</title>
      <link href="/2020/07/04/%E6%B5%8B%E8%AF%95%E6%96%87%E6%A1%A3/"/>
      <url>/2020/07/04/%E6%B5%8B%E8%AF%95%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<p>此文档用于测试网站兼容性，路人请忽略此文档。</p><a id="more"></a><h2 id="数学测试">数学测试</h2><p>这是一个测试文档，我们将在这里进行网站内容发布的一些测试。</p><p>首先是数学公式测试</p><p>行内公式 <span class="math inline">\(\int_0^1 \sin x dx = -\cos x|_0^1\)</span> 测试。</p><p>行间公式测试 <span class="math display">\[e^{i\pi}=-1\]</span></p><p><span class="math display">\[\left(\dfrac{n+1}{e}\right)^{n}&lt;n!&lt;e\left(\dfrac{n+1}{e}\right)^{n+1}\]</span></p><p><span class="math display">\[\dfrac{1}{2}+\dfrac{1}{3}+\cdots+\dfrac{1}{n}&lt;\ln(n+1)&lt;1+\dfrac{1}{2}+\cdots+\dfrac{1}{n}\]</span></p><p>行间公式测试完毕。</p><h2 id="代码测试">代码测试</h2><p>下面是一段C++代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, n = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">2</span>; j &lt; <span class="built_in">sqrt</span>(i); j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%j == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j &gt; <span class="built_in">sqrt</span>(i)) <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">"\t"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="图片测试">图片测试</h2><p>下面插入一张图片</p><figure><img src="/2020/07/04/%E6%B5%8B%E8%AF%95%E6%96%87%E6%A1%A3/SquirrelHeather_ZH-CN1683129884_1920x1080.jpg" alt><figcaption>Squirrel</figcaption></figure>]]></content>
      
      
      <categories>
          
          <category> 使用说明及测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
