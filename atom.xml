<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jun&#39;s Blog</title>
  
  
  <link href="/junblog/atom.xml" rel="self"/>
  
  <link href="https://heliumhe.gitee.io/"/>
  <updated>2021-02-19T07:21:45.471Z</updated>
  <id>https://heliumhe.gitee.io/</id>
  
  <author>
    <name>He</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>R Basics</title>
    <link href="https://heliumhe.gitee.io/2021/02/19/R%20Basics/"/>
    <id>https://heliumhe.gitee.io/2021/02/19/R%20Basics/</id>
    <published>2021-02-19T07:15:32.000Z</published>
    <updated>2021-02-19T07:21:45.471Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vectors">Vectors</h2><p>To create a vector, use the <code>c</code> command, which stands for <em>concatenate or combine</em>.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; v &lt;- c(<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">9</span>)</span><br></pre></td></tr></table></figure><p>To create a scalar, type</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; n &lt;- <span class="number">100</span></span><br></pre></td></tr></table></figure><p>and R views n as a vector of length 1.</p><p>We can know many properties of a vector immediately. For instance, <code>sum(V)</code> adds up all the components of a vector and <code>max(v)</code> gives the largests element of v, <code>length(v)</code> returns the length of the vector v.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; sum(v)</span><br><span class="line">[<span class="number">1</span>] <span class="number">23</span></span><br><span class="line">&gt; max(v)</span><br><span class="line">[<span class="number">1</span>] <span class="number">9</span></span><br><span class="line">&gt; min(v)</span><br><span class="line">[<span class="number">1</span>] <span class="number">1</span></span><br><span class="line">&gt; length(v)</span><br><span class="line">[<span class="number">1</span>] <span class="number">6</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>Generating a subvector from an existing vector is easy</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; v[c(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>)]</span><br><span class="line">[<span class="number">1</span>] <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line">&gt; v[-(<span class="number">2</span>:<span class="number">4</span>)]</span><br><span class="line">[<span class="number">1</span>] <span class="number">3</span> <span class="number">5</span> <span class="number">9</span></span><br></pre></td></tr></table></figure><p>Put the <code>c</code> command in the brackets, say<code>v[c(1,3,5)]</code> concatenates the 1st, 3rd and 5th element of the vector v and forms a new vector. <code>v[-(2:4)]</code> excludes the 2nd through 4th element from v.</p><blockquote><p>Notice in R the index is labelled from 1 rather than 0 !</p></blockquote><p>There's a shortcut for getting the vector (1,2, ... , n), see</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v2 = <span class="number">1</span>:<span class="number">28</span></span><br></pre></td></tr></table></figure><p>Operations in R are performed component wise, e.g.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>/(<span class="number">1</span>:<span class="number">20</span>)^<span class="number">5</span></span><br></pre></td></tr></table></figure><p>means <span class="math inline">\((1,1/2^5,1/3^5,\ldots,1/20^5)\)</span> .</p><p>If we add a shorter vector to a longer one, what will happen? see</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; v &lt;- c(<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">9</span>)</span><br><span class="line">&gt; v3 &lt;- c(<span class="number">100</span>, <span class="number">200</span>)</span><br><span class="line">&gt; v + v3</span><br><span class="line">[<span class="number">1</span>] <span class="number">103</span> <span class="number">201</span> <span class="number">104</span> <span class="number">201</span> <span class="number">105</span> <span class="number">209</span></span><br></pre></td></tr></table></figure><p>v3 is "recycled" and adds to v in a cycle.</p><h2 id="factorials-and-binomial-coefficients">Factorials and Binomial Coefficients</h2><p>We get <span class="math inline">\(n!\)</span> by <code>factorial(n)</code>, get <span class="math inline">\(\binom{n}{k}\)</span> by <code>choose(n,k)</code>.</p><p>What if <span class="math inline">\(n!\)</span> or <span class="math inline">\(\binom{n}{k}\)</span> get too large to compute? Fortunately, R gives functions to compute <span class="math inline">\(\log{n!}\)</span> or <span class="math inline">\(\log{\binom{n}{k}}\)</span> , by using <code>lfactorial(n)</code> and <code>lchoose(n,k)</code> respectively.</p><h2 id="r-for-probability---sampling-and-simulation">R for probability - Sampling and simulation</h2><p>The sample command generates random samples in R.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; n &lt;- <span class="number">10</span>; k &lt;- <span class="number">5</span></span><br><span class="line">&gt; sample(n,k)</span><br></pre></td></tr></table></figure><p>generates a random sample of 5 from 1 to 10, without replacement and with equal probability assigned to each number.</p><p>We can also generate samples with replacement and give a probability to each number:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; sample(<span class="number">4</span>, <span class="number">10</span>, replace = <span class="literal">TRUE</span>, prob = c(<span class="number">0.1</span>, <span class="number">0.2</span>, <span class="number">0.3</span>, <span class="number">0.4</span>))</span><br><span class="line"> [<span class="number">1</span>] <span class="number">3</span> <span class="number">4</span> <span class="number">4</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">4</span> <span class="number">3</span> <span class="number">3</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>The above example draws 10 samples from {1, 2, 3, 4}, the probability of 1, 2, 3, 4 is respectively 0.1, 0.2, 0.3, 0.4</p><p>Use the <code>replicate</code> command generates many samples so that we can perform a simulation for a probability problem. Here is an example</p><blockquote><p><strong>Problem (matching problem)</strong> Consider a well-shuffled deck of n cards, labeled 1 through n. You flip over the cards one by one, saying the number 1 through n as you do so. You win the game if, at some point, the number you say aloud is the same as the number on the card being flipped over. What is the probability of winning?</p></blockquote><p><img src="/junblog/2021/02/19/R%20Basics/image-20210219150750127.png"></p><p><img src="/junblog/2021/02/19/R%20Basics/image-20210219150830674.png"></p><p>Simulation goes as follows</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; n &lt;- <span class="number">100</span></span><br><span class="line">&gt; r &lt;- replicate(<span class="number">10</span>^<span class="number">4</span>, sum(sample(n)==(<span class="number">1</span>:n)))</span><br><span class="line">&gt; sum(r&gt;=<span class="number">1</span>)/<span class="number">10</span>^<span class="number">4</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">0.6344</span></span><br></pre></td></tr></table></figure><p>in which we generated <span class="math inline">\(10^4\)</span> examples and calculated the frequency of winning. The result agrees with mathematical derivation.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;vectors&quot;&gt;Vectors&lt;/h2&gt;
&lt;p&gt;To create a vector, use the &lt;code&gt;c&lt;/code&gt; command, which stands for &lt;em&gt;concatenate or combine&lt;/em&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight r&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; v &amp;lt;- c(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;To create a scalar, type&lt;/p&gt;
&lt;figure class=&quot;highlight r&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; n &amp;lt;- &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;and R views n as a vector of length 1.&lt;/p&gt;
&lt;p&gt;We can know many properties of a vector immediately. For instance, &lt;code&gt;sum(V)&lt;/code&gt; adds up all the components of a vector and &lt;code&gt;max(v)&lt;/code&gt; gives the largests element of v, &lt;code&gt;length(v)&lt;/code&gt; returns the length of the vector v.&lt;/p&gt;
&lt;figure class=&quot;highlight r&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; sum(v)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; max(v)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; min(v)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; length(v)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="https://heliumhe.gitee.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="R" scheme="https://heliumhe.gitee.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/R/"/>
    
    
      <category term="R" scheme="https://heliumhe.gitee.io/tags/R/"/>
    
      <category term="Probability" scheme="https://heliumhe.gitee.io/tags/Probability/"/>
    
  </entry>
  
  <entry>
    <title>B002 Classification - SGD Method</title>
    <link href="https://heliumhe.gitee.io/2021/02/11/B002%20Classification%20-%20SGD/"/>
    <id>https://heliumhe.gitee.io/2021/02/11/B002%20Classification%20-%20SGD/</id>
    <published>2021-02-11T15:04:56.000Z</published>
    <updated>2021-02-15T02:25:24.501Z</updated>
    
    <content type="html"><![CDATA[<h2 id="what-is-a-classification-problem">What is a classification problem?</h2><p>Imagine an elementary school student is given a batch of learning materials: lots of pictures of handwitten digits. His parents is teaching him, "this is 1, o-n-e, one.""That is 5, f-i-v-e, five". And the student gradually learn to identify the digits 0~9 by their shapes. Now, whoever write a number, the little boy can name it correctly.</p><p>The above process is what classification problems look like:</p><ul><li>First, given a dataset with labels, called training set, to the machine</li><li>Next, using some kind of algorithm, the machine learns to classify data of different labels based on the training set.</li><li>Then, we can use a test set to check the effectiveness of the learning process. If the machine is not satisfying, we can improve the algorithm or give better training sets to retrain the computer, until it is satisfying.</li><li>Finally, the machine can be put into practical use.</li></ul><a id="more"></a><h2 id="sgd-as-a-binary-classifier">SGD as a binary classifier</h2><p>A binary classification problem is the easiest among all. It is like a "yes-or-no" question, with only two choices. Stochastic Gradient Descent method is a popular and relatively elementary method in solving the problem.</p><p>SGD(Stochastic Gradient Descent) Classifier has a good performance when handling large datasets. Scikit-learn has a <code>SGDClassifier</code> class for this algorithm.</p><p>First, prepare the dataset.</p><p>Here, we use the MINST dataset (handwritten digits of 0~9) as an example.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># train_images</span></span><br><span class="line">train_images_idx3_ubyte_file = <span class="string">"dataset/MINST/train-images.idx3-ubyte"</span></span><br><span class="line"><span class="comment"># train_labels</span></span><br><span class="line">train_labels_idx1_ubyte_file = <span class="string">"dataset/MINST/train-labels.idx1-ubyte"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># test_images</span></span><br><span class="line">test_images_idx3_ubyte_file = <span class="string">"dataset/MINST/t10k-images.idx3-ubyte"</span></span><br><span class="line"><span class="comment"># test_labels</span></span><br><span class="line">test_labels_idx1_ubyte_file = <span class="string">"dataset/MINST/t10k-labels.idx1-ubyte"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode_idx3_ubyte</span><span class="params">(idx3_ubyte_file)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    A universal function for decoding idx3 files</span></span><br><span class="line"><span class="string">    :param idx3_ubyte_file: idx3 file path</span></span><br><span class="line"><span class="string">    :return: dataset</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 读取二进制数据</span></span><br><span class="line">    bin_data = open(idx3_ubyte_file, <span class="string">"rb"</span>).read()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解析文件头信息，依次为魔数、图片数量、每张图片高、每张图片宽</span></span><br><span class="line">    offset = <span class="number">0</span></span><br><span class="line">    fmt_header = <span class="string">"&gt;iiii"</span>  <span class="comment"># 因为数据结构中前4行的数据类型都是32位整型，所以采用i格式，但我们需要读取前4行数据，所以需要4个i。我们后面会看到标签集中，只使用2个ii。</span></span><br><span class="line">    magic_number, num_images, num_rows, num_cols = struct.unpack_from(</span><br><span class="line">        fmt_header, bin_data, offset</span><br><span class="line">    )</span><br><span class="line">    print(</span><br><span class="line">        <span class="string">"魔数:%d, 图片数量: %d张, 图片大小: %d*%d"</span> % (magic_number, num_images, num_rows, num_cols)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解析数据集</span></span><br><span class="line">    image_size = num_rows * num_cols</span><br><span class="line">    offset += struct.calcsize(</span><br><span class="line">        fmt_header</span><br><span class="line">    )  <span class="comment"># 获得数据在缓存中的指针位置，从前面介绍的数据结构可以看出，读取了前4行之后，指针位置（即偏移位置offset）指向0016。</span></span><br><span class="line">    print(offset)</span><br><span class="line">    fmt_image = (</span><br><span class="line">        <span class="string">"&gt;"</span> + str(image_size) + <span class="string">"B"</span></span><br><span class="line">    )  <span class="comment"># 图像数据像素值的类型为unsigned char型，对应的format格式为B。这里还有加上图像大小784，是为了读取784个B格式数据，如果没有则只会读取一个值（即一副图像中的一个像素值）</span></span><br><span class="line">    print(fmt_image, offset, struct.calcsize(fmt_image))</span><br><span class="line">    images = np.empty((num_images, num_rows, num_cols))</span><br><span class="line">    <span class="comment"># plt.figure()</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num_images):</span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span>) % <span class="number">10000</span> == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">"已解析 %d"</span> % (i + <span class="number">1</span>) + <span class="string">"张"</span>)</span><br><span class="line">            print(offset)</span><br><span class="line">        images[i] = np.array(struct.unpack_from(fmt_image, bin_data, offset)).reshape(</span><br><span class="line">            (num_rows, num_cols)</span><br><span class="line">        )</span><br><span class="line">        <span class="comment"># print(images[i])</span></span><br><span class="line">        offset += struct.calcsize(fmt_image)</span><br><span class="line">    <span class="comment">#        plt.imshow(images[i],'gray')</span></span><br><span class="line">    <span class="comment">#        plt.pause(0.00001)</span></span><br><span class="line">    <span class="comment">#        plt.show()</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> images</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode_idx1_ubyte</span><span class="params">(idx1_ubyte_file)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    A universal function for decoding idx1 files</span></span><br><span class="line"><span class="string">    :param idx1_ubyte_file: idx1 file path</span></span><br><span class="line"><span class="string">    :return: dataset</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 读取二进制数据</span></span><br><span class="line">    bin_data = open(idx1_ubyte_file, <span class="string">"rb"</span>).read()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解析文件头信息，依次为魔数和标签数</span></span><br><span class="line">    offset = <span class="number">0</span></span><br><span class="line">    fmt_header = <span class="string">"&gt;ii"</span></span><br><span class="line">    magic_number, num_images = struct.unpack_from(fmt_header, bin_data, offset)</span><br><span class="line">    print(<span class="string">"魔数:%d, 图片数量: %d张"</span> % (magic_number, num_images))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解析数据集</span></span><br><span class="line">    offset += struct.calcsize(fmt_header)</span><br><span class="line">    fmt_image = <span class="string">"&gt;B"</span></span><br><span class="line">    labels = np.empty(num_images)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num_images):</span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span>) % <span class="number">10000</span> == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">"已解析 %d"</span> % (i + <span class="number">1</span>) + <span class="string">"张"</span>)</span><br><span class="line">        labels[i] = struct.unpack_from(fmt_image, bin_data, offset)[<span class="number">0</span>]</span><br><span class="line">        offset += struct.calcsize(fmt_image)</span><br><span class="line">    <span class="keyword">return</span> labels</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_train_images</span><span class="params">(idx_ubyte_file=train_images_idx3_ubyte_file)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    TRAINING SET IMAGE FILE (train-images-idx3-ubyte):</span></span><br><span class="line"><span class="string">    [offset] [type]          [value]          [description]</span></span><br><span class="line"><span class="string">    0000     32 bit integer  0x00000803(2051) magic number</span></span><br><span class="line"><span class="string">    0004     32 bit integer  60000            number of images</span></span><br><span class="line"><span class="string">    0008     32 bit integer  28               number of rows</span></span><br><span class="line"><span class="string">    0012     32 bit integer  28               number of columns</span></span><br><span class="line"><span class="string">    0016     unsigned byte   ??               pixel</span></span><br><span class="line"><span class="string">    0017     unsigned byte   ??               pixel</span></span><br><span class="line"><span class="string">    ........</span></span><br><span class="line"><span class="string">    xxxx     unsigned byte   ??               pixel</span></span><br><span class="line"><span class="string">    Pixels are organized row-wise. Pixel values are 0 to 255. 0 means background (white), 255 means foreground (black).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param idx_ubyte_file: idx file path</span></span><br><span class="line"><span class="string">    :return: n*row*col维np.array对象，n为图片数量</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> decode_idx3_ubyte(idx_ubyte_file)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_train_labels</span><span class="params">(idx_ubyte_file=train_labels_idx1_ubyte_file)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    TRAINING SET LABEL FILE (train-labels-idx1-ubyte):</span></span><br><span class="line"><span class="string">    [offset] [type]          [value]          [description]</span></span><br><span class="line"><span class="string">    0000     32 bit integer  0x00000801(2049) magic number (MSB first)</span></span><br><span class="line"><span class="string">    0004     32 bit integer  60000            number of items</span></span><br><span class="line"><span class="string">    0008     unsigned byte   ??               label</span></span><br><span class="line"><span class="string">    0009     unsigned byte   ??               label</span></span><br><span class="line"><span class="string">    ........</span></span><br><span class="line"><span class="string">    xxxx     unsigned byte   ??               label</span></span><br><span class="line"><span class="string">    The labels values are 0 to 9.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param idx_ubyte_file: idx文件路径</span></span><br><span class="line"><span class="string">    :return: n*1维np.array对象，n为图片数量</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> decode_idx1_ubyte(idx_ubyte_file)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_test_images</span><span class="params">(idx_ubyte_file=test_images_idx3_ubyte_file)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    TEST SET IMAGE FILE (t10k-images-idx3-ubyte):</span></span><br><span class="line"><span class="string">    [offset] [type]          [value]          [description]</span></span><br><span class="line"><span class="string">    0000     32 bit integer  0x00000803(2051) magic number</span></span><br><span class="line"><span class="string">    0004     32 bit integer  10000            number of images</span></span><br><span class="line"><span class="string">    0008     32 bit integer  28               number of rows</span></span><br><span class="line"><span class="string">    0012     32 bit integer  28               number of columns</span></span><br><span class="line"><span class="string">    0016     unsigned byte   ??               pixel</span></span><br><span class="line"><span class="string">    0017     unsigned byte   ??               pixel</span></span><br><span class="line"><span class="string">    ........</span></span><br><span class="line"><span class="string">    xxxx     unsigned byte   ??               pixel</span></span><br><span class="line"><span class="string">    Pixels are organized row-wise. Pixel values are 0 to 255. 0 means background (white), 255 means foreground (black).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param idx_ubyte_file: idx文件路径</span></span><br><span class="line"><span class="string">    :return: n*row*col维np.array对象，n为图片数量</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> decode_idx3_ubyte(idx_ubyte_file)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_test_labels</span><span class="params">(idx_ubyte_file=test_labels_idx1_ubyte_file)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    TEST SET LABEL FILE (t10k-labels-idx1-ubyte):</span></span><br><span class="line"><span class="string">    [offset] [type]          [value]          [description]</span></span><br><span class="line"><span class="string">    0000     32 bit integer  0x00000801(2049) magic number (MSB first)</span></span><br><span class="line"><span class="string">    0004     32 bit integer  10000            number of items</span></span><br><span class="line"><span class="string">    0008     unsigned byte   ??               label</span></span><br><span class="line"><span class="string">    0009     unsigned byte   ??               label</span></span><br><span class="line"><span class="string">    ........</span></span><br><span class="line"><span class="string">    xxxx     unsigned byte   ??               label</span></span><br><span class="line"><span class="string">    The labels values are 0 to 9.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param idx_ubyte_file: idx文件路径</span></span><br><span class="line"><span class="string">    :return: n*1维np.array对象，n为图片数量</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> decode_idx1_ubyte(idx_ubyte_file)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    train_images = load_train_images()</span><br><span class="line">    train_labels = load_train_labels()</span><br><span class="line">    test_images = load_test_images()</span><br><span class="line">    test_labels = load_test_labels()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查看前十个数据及其标签以读取是否正确</span></span><br><span class="line"><span class="comment">#     for i in range(10):</span></span><br><span class="line"><span class="comment">#         print(train_labels[i])</span></span><br><span class="line"><span class="comment">#         plt.imshow(train_images[i], cmap='gray')</span></span><br><span class="line"><span class="comment">#         plt.pause(0.000001)</span></span><br><span class="line"><span class="comment">#         plt.show()</span></span><br><span class="line"><span class="comment">#     print('done')</span></span><br></pre></td></tr></table></figure><pre><code>魔数:2051, 图片数量: 60000张, 图片大小: 28*2816&gt;784B 16 784已解析 10000张7839232已解析 20000张15679232已解析 30000张23519232已解析 40000张31359232已解析 50000张39199232已解析 60000张47039232魔数:2049, 图片数量: 60000张已解析 10000张已解析 20000张已解析 30000张已解析 40000张已解析 50000张已解析 60000张魔数:2051, 图片数量: 10000张, 图片大小: 28*2816&gt;784B 16 784已解析 10000张7839232魔数:2049, 图片数量: 10000张已解析 10000张</code></pre><blockquote><p>The above code used https://blog.csdn.net/panrenlong/article/details/81736754 as a reference.</p></blockquote><p>We then solve the following classification problem: 3 or not-3.</p><p>In order to enhance training effects, we shuffle the index of the training set.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">shuffle_index = np.random.permutation(<span class="number">60000</span>)</span><br><span class="line">train_images, train_labels = train_images[shuffle_index], train_labels[shuffle_index]</span><br><span class="line"></span><br><span class="line">X_train = np.empty((<span class="number">60000</span>, <span class="number">28</span> * <span class="number">28</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">60000</span>):</span><br><span class="line">    X_train[i] = train_images[i].flatten()</span><br><span class="line"></span><br><span class="line">X_test = np.empty((<span class="number">10000</span>, <span class="number">28</span> * <span class="number">28</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10000</span>):</span><br><span class="line">    test_images[i].flatten()</span><br><span class="line"></span><br><span class="line">y_train, y_test = train_labels, test_labels</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">y_train_3 = y_train == <span class="number">3</span></span><br><span class="line">y_test_3 = y_test == <span class="number">3</span></span><br><span class="line"></span><br><span class="line">print(X_train)</span><br><span class="line">print(y_train_3)</span><br><span class="line">print(y_test_3)</span><br></pre></td></tr></table></figure><pre><code>[[0. 0. 0. ... 0. 0. 0.] [0. 0. 0. ... 0. 0. 0.] [0. 0. 0. ... 0. 0. 0.] ... [0. 0. 0. ... 0. 0. 0.] [0. 0. 0. ... 0. 0. 0.] [0. 0. 0. ... 0. 0. 0.]][False False False ... False False False][False False False ... False False False]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> SGDClassifier</span><br><span class="line"></span><br><span class="line">sgd_clf = SGDClassifier(random_state=<span class="number">42</span>)</span><br><span class="line">sgd_clf.fit(X_train, y_train_3)</span><br></pre></td></tr></table></figure><pre><code>SGDClassifier(random_state=42)</code></pre><p>We assess the accuracy of the model in a simple way:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">success = <span class="number">0.0</span></span><br><span class="line">total = <span class="number">0.0</span></span><br><span class="line">rate = <span class="number">0.0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10000</span>):</span><br><span class="line">    res = sgd_clf.predict([X_test[i]])</span><br><span class="line">    <span class="keyword">if</span> res[<span class="number">0</span>] == y_test_3[i]:</span><br><span class="line">        success += <span class="number">1</span></span><br><span class="line">    total += <span class="number">1</span></span><br><span class="line">rate = success / total</span><br><span class="line">print(<span class="string">"The accuracy on the test set is &#123;0&#125;"</span>.format(rate))</span><br></pre></td></tr></table></figure><pre><code>The accuracy on the test set is 0.899</code></pre><h2 id="mathematical-explanation-of-sgd-method">Mathematical explanation of SGD method</h2><p>A mathematical explanation of Perceptron and SGD method is given below:</p><figure><img src="/junblog/2021/02/11/B002%20Classification%20-%20SGD/Mathematical%20Explanation%20of%20SGD.jpg" alt="Mathematical Explanation of SGD Method"><figcaption aria-hidden="true">Mathematical Explanation of SGD Method</figcaption></figure><p>Base on the mathematical explanation, we will then implement the SGD algorithm by ourselves.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SGD</span>:</span></span><br><span class="line">    omega = <span class="number">0</span></span><br><span class="line">    b = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, omega, b)</span>:</span></span><br><span class="line">        self.omega = omega</span><br><span class="line">        self.b = b</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(self, x_predict)</span>:</span></span><br><span class="line">        x_predict = np.array(x_predict)</span><br><span class="line">        dim = x_predict[<span class="number">0</span>].size</span><br><span class="line">        all_size = x_predict.size</span><br><span class="line">        size = int(all_size/dim)</span><br><span class="line">        y_predict = np.empty(size, bool)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,size):</span><br><span class="line">            y_predict[i] = ((np.dot(self.omega.T, x_predict[i]) + self.b) &gt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> y_predict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SGD_train</span><span class="params">(x_train, y_train_ori, learning_rate = <span class="number">0.5</span>, max_iter = <span class="number">50000</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :param x_train: 2-D ndarray</span></span><br><span class="line"><span class="string">    :param y_train: 1-D ndarray</span></span><br><span class="line"><span class="string">    :param learning_rate: float number in (0,1]</span></span><br><span class="line"><span class="string">    :return: perceptron object</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># fetch the size of the training data</span></span><br><span class="line">    size = y_train_ori.size</span><br><span class="line">    dim = x_train[<span class="number">0</span>].size</span><br><span class="line"></span><br><span class="line">    y_train = y_train_ori*<span class="number">2</span><span class="number">-1</span></span><br><span class="line">    print(y_train)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Choose the initial value omega, b</span></span><br><span class="line">    omega = np.zeros(dim)</span><br><span class="line">    b = <span class="number">0.0</span></span><br><span class="line">    learning_rate = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    correct_iter = <span class="number">0</span></span><br><span class="line">    counter = <span class="number">0</span></span><br><span class="line">    best_omega = np.zeros(dim)</span><br><span class="line">    best_b = <span class="number">0</span></span><br><span class="line">    largest_iter = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># Randomly choose data in the data set</span></span><br><span class="line">        i = np.random.randint(<span class="number">0</span>, size)</span><br><span class="line">        <span class="keyword">if</span> (y_train[i] * (np.dot(omega.T, x_train[i]) + b)) &lt;= <span class="number">0</span>:</span><br><span class="line">            omega = omega + learning_rate * y_train[i] * x_train[i]</span><br><span class="line">            b = b + learning_rate * y_train[i]</span><br><span class="line">            <span class="comment"># print('iteration &#123;0&#125;, current loop &#123;1&#125;'.format(counter, correct_iter))</span></span><br><span class="line">            best_omega = omega <span class="keyword">if</span>(correct_iter&gt;largest_iter) <span class="keyword">else</span> best_omega</span><br><span class="line">            best_b = b <span class="keyword">if</span>(correct_iter&gt;largest_iter) <span class="keyword">else</span> best_b</span><br><span class="line">            largest_iter = correct_iter <span class="keyword">if</span>(correct_iter&gt;largest_iter) <span class="keyword">else</span> largest_iter</span><br><span class="line">            counter += <span class="number">1</span></span><br><span class="line">            correct_iter = <span class="number">0</span></span><br><span class="line">        correct_iter += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Conditions to exit the loop</span></span><br><span class="line">        <span class="keyword">if</span> correct_iter &gt; <span class="number">0.005</span> * size:</span><br><span class="line">            print(<span class="string">'iteration &#123;0&#125;, current loop &#123;1&#125;'</span>.format(counter, correct_iter))</span><br><span class="line">            print(<span class="string">'omega: &#123;0&#125;'</span>.format(best_omega))</span><br><span class="line">            print(<span class="string">'b: &#123;0&#125;'</span>.format(best_b))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> counter &gt; max_iter:</span><br><span class="line">            print(<span class="string">'Reached maximum iteration &#123;0&#125; steps.'</span>.format(max_iter))</span><br><span class="line">            print(<span class="string">'omega: &#123;0&#125;'</span>.format(best_omega))</span><br><span class="line">            print(<span class="string">'b: &#123;0&#125;'</span>.format(best_b))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> SGD(best_omega, best_b)</span><br></pre></td></tr></table></figure><p>Testing our model on the test set:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sgd = SGD_train(X_train, y_train_3, <span class="number">0.4</span>, <span class="number">50000</span>)</span><br><span class="line">y_testres = sgd.predict(X_test)</span><br><span class="line"></span><br><span class="line">success = <span class="number">0.0</span></span><br><span class="line">total = <span class="number">0.0</span></span><br><span class="line">rate = <span class="number">0.0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10000</span>):</span><br><span class="line">    <span class="keyword">if</span> y_testres[i] == y_test_3[i]:</span><br><span class="line">        success += <span class="number">1</span></span><br><span class="line">    total += <span class="number">1</span></span><br><span class="line">rate = success / total</span><br><span class="line">print(<span class="string">"Success: &#123;0&#125;. Total: &#123;1&#125;. The accuracy on the test set is &#123;2&#125;"</span>.format(success, total, rate))</span><br></pre></td></tr></table></figure><pre><code>[-1 -1 -1 ... -1 -1 -1]iteration 42632, current loop 301omega: [ 0.0000e+00  0.0000e+00  0.0000e+00  0.0000e+00  0.0000e+00  0.0000e+00  0.0000e+00  0.0000e+00  0.0000e+00  0.0000e+00  0.0000e+00  0.0000e+00  0.0000e+00  0.0000e+00  0.0000e+00  ..........  0.0000e+00  0.0000e+00  0.0000e+00  0.0000e+00  0.0000e+00  0.0000e+00]b: -1123.0Success: 8990.0. Total: 10000.0. The accuracy on the test set is 0.899</code></pre><p>By observing the results, the overall accuracy on the test set reached 89.9%, the same as the SGDClassifier in the Scikit-learn module.</p><p>We may think that 89.9% may not be a satisfactory result. That is because we used a linear model, but the dataset is not linear separable. In order to improve the result, try using the KNN algorithm, which will be covered in later posts.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;what-is-a-classification-problem&quot;&gt;What is a classification problem?&lt;/h2&gt;
&lt;p&gt;Imagine an elementary school student is given a batch of learning materials: lots of pictures of handwitten digits. His parents is teaching him, &quot;this is 1, o-n-e, one.&quot;&quot;That is 5, f-i-v-e, five&quot;. And the student gradually learn to identify the digits 0~9 by their shapes. Now, whoever write a number, the little boy can name it correctly.&lt;/p&gt;
&lt;p&gt;The above process is what classification problems look like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First, given a dataset with labels, called training set, to the machine&lt;/li&gt;
&lt;li&gt;Next, using some kind of algorithm, the machine learns to classify data of different labels based on the training set.&lt;/li&gt;
&lt;li&gt;Then, we can use a test set to check the effectiveness of the learning process. If the machine is not satisfying, we can improve the algorithm or give better training sets to retrain the computer, until it is satisfying.&lt;/li&gt;
&lt;li&gt;Finally, the machine can be put into practical use.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="AI" scheme="https://heliumhe.gitee.io/categories/AI/"/>
    
    
      <category term="AI" scheme="https://heliumhe.gitee.io/tags/AI/"/>
    
      <category term="Python" scheme="https://heliumhe.gitee.io/tags/Python/"/>
    
      <category term="Machine Learning" scheme="https://heliumhe.gitee.io/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>数据库概论知识点总结</title>
    <link href="https://heliumhe.gitee.io/2021/01/23/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E5%A4%8D%E4%B9%A0/"/>
    <id>https://heliumhe.gitee.io/2021/01/23/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E5%A4%8D%E4%B9%A0/</id>
    <published>2021-01-23T06:17:22.000Z</published>
    <updated>2021-01-23T07:52:49.038Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据库系统的基本概念">数据库系统的基本概念</h2><h3 id="从数据到数据库">从数据到数据库</h3><h4 id="数据">数据</h4><h5 id="数据的概念">数据的概念</h5><p><strong>数据：</strong>数据的内容是信息；数据的表现形式是符号记录</p><h5 id="数据的分类">数据的分类</h5><ul><li><p>按数据加工程度分：分为三次数据、二次数据、一次数据、零次数据（加工程度由高到低）</p></li><li><p>按结构化程度分：</p></li></ul><table><thead><tr class="header"><th>类型</th><th>含义</th><th>本质</th><th>举例</th></tr></thead><tbody><tr class="odd"><td>结构化数据</td><td>直接可用关系型数据库存储和管理的数据</td><td>先有结构，后有数据</td><td>关系数据库中的数据</td></tr><tr class="even"><td>半结构化数据</td><td>经过一定的加工处理以后可以用关系数据库存储和管理的数据</td><td>先有数据，后有结构</td><td>HTML、XML</td></tr><tr class="odd"><td>非结构化数据</td><td>无法用关系型数据库存储和管理的数据</td><td>没有（或难以发现）统一结构的数据</td><td>语音、图像文件</td></tr></tbody></table><a id="more"></a><h4 id="数据库">数据库</h4><p><strong>数据库（Database, DB）：</strong>按一定结构存管数据的库</p><p><strong>数据库的特点：</strong>（1）集成性：特定的数据和联系集中在一起按一定结构存储；（2）共享性：数据库中的数据能被多个应用程序的用户使用</p><h4 id="数据库系统">数据库系统</h4><p><strong>数据库系统（Database System, DBS)</strong>又称数据库应用系统，是具有数据库技术支持的应用系统。如：网银系统、点餐系统、教务系统</p><p><strong>数据库管理系统（Database Management System，DBMS）</strong>是建立、操作、管理、控制数据库和数据的应用软件。如：SQL Server，MySQL，Oracle</p><p>注：DBS包含DB和DBMS及其它应用软件</p><h4 id="数据模型">数据模型</h4><p>数据从现实世界进入数据库，需要经历3个阶段</p><figure><img src="/junblog/2021/01/23/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E5%A4%8D%E4%B9%A0/数据模型.png" alt="数据模型"><figcaption aria-hidden="true">数据模型</figcaption></figure><h4 id="概念模型e-r图的设计">概念模型：E-R图的设计</h4><p><strong>E-R图设计的基本方法：</strong> （1）确定实体 （2）确定联系类型（1:1, 1:n, n:m） （3）把实体类型和联系类型组成E-R图 （4）确定实体类型和联系类型的属性 （5）确定实体类型的主键</p><p>E-R图示例：餐馆点餐系统</p><figure><img src="/junblog/2021/01/23/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E5%A4%8D%E4%B9%A0/ER图.png" alt="ER图"><figcaption aria-hidden="true">ER图</figcaption></figure><h4 id="数据库系统的模式结构">数据库系统的模式结构</h4><p>数据库系统通过3个层次的抽象，构成了三级模式结构</p><p>（1）外模式or子模式：对应视图 （2）逻辑模式or概念模式：对应概念数据库 （3）内模式or存储模式：对应物理数据库</p><p>三级模式结构的优点： （1）是数据库系统中最本质的系统结构 （2）数据共享 （3）简化用户接口 （4）数据安全</p><h3 id="t-sql常用操作语言的分类">T-SQL常用操作语言的分类</h3><ol type="1"><li>数据定义语言（Data Definition Language，DDL） 对数据库、视图、表、索引的创建、修改、删除，主要是<code>CREATE</code>, <code>ALTER</code>, <code>DROP</code></li><li>数据操作语言（Data Manipulation Language，DML） 插入数据<code>INSERT</code>，更新数据<code>UPDATE</code>，删除数据<code>DELETE</code>，数据查询<code>SELECT</code></li><li>数据控制语言（Data Control Language，DCL） 对数据库进行安全管理和权限控制，如赋予权限GRANT，禁止赋予的权限DENY，收回权限REVOKE</li><li>事务管理语言（Transact Management Language，TML） 用于事务管理，提交事务COMMIT，撤销事务ROLLBACK</li><li>其它附加的语言：包括可编程性（函数、存储过程、触发器等）</li></ol><h2 id="数据定义语言">数据定义语言</h2><h3 id="数据库的创建修改删除">数据库的创建、修改、删除</h3><h4 id="数据库的创建">数据库的创建</h4><p>主数据文件<code>.mdf</code>（仅一个），次数据文件<code>.ndf</code>（可有多个），日志文件<code>.ldf</code>（可以有多个，不属于任何文件组）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/****** 建立数据库 ******/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> restaurant</span><br><span class="line"><span class="keyword">ON</span> </span><br><span class="line">PRIMARY   <span class="comment">--指定文件组，默认为PRIMARY</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">NAME</span> = restaurant_data,  <span class="comment">--指定数据文件逻辑名，不可省</span></span><br><span class="line">    FILENAME = <span class="string">'C:\sql\restaurant_data.mdf'</span>,   <span class="comment">--指定物理文件名</span></span><br><span class="line">    <span class="keyword">SIZE</span> = <span class="number">5</span> MB,   <span class="comment">--初始大小</span></span><br><span class="line">    <span class="keyword">MAXSIZE</span> = <span class="number">500</span> MB,   <span class="comment">--最大大小</span></span><br><span class="line">    FILEGROWTH = <span class="number">10</span> %   <span class="comment">--增长方式</span></span><br><span class="line">),</span><br><span class="line">FILEGROUP group01   <span class="comment">--指定文件组 group01</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">NAME</span> = restaurant_data_group_01_01,  <span class="comment">--指定数据文件逻辑名，不可省</span></span><br><span class="line">    FILENAME = <span class="string">'C:\sql\restaurant_data_group01_01.ndf'</span>,   <span class="comment">--指定物理文件名</span></span><br><span class="line">    <span class="keyword">SIZE</span> = <span class="number">5</span> MB,   <span class="comment">--初始大小</span></span><br><span class="line">    <span class="keyword">MAXSIZE</span> = <span class="number">500</span> MB,   <span class="comment">--最大大小</span></span><br><span class="line">    FILEGROWTH = <span class="number">10</span> %   <span class="comment">--增长方式</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">LOG</span> <span class="keyword">ON</span>   <span class="comment">--指明日志文件，不可省</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">NAME</span> = restaurant_log,  <span class="comment">--指定逻辑名，不可省</span></span><br><span class="line">    FILENAME = <span class="string">'C:\sql\restaurant_log.ldf'</span>,</span><br><span class="line">    <span class="keyword">SIZE</span> = <span class="number">5</span> MB,</span><br><span class="line">    <span class="keyword">MAXSIZE</span> = <span class="number">100</span> MB,</span><br><span class="line">    FILEGROWTH = <span class="number">2</span> MB</span><br><span class="line">)</span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h4 id="数据库的修改">数据库的修改</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/****** 重命名数据库 ******/</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> restaurant</span><br><span class="line"><span class="keyword">MODIFY</span> <span class="keyword">NAME</span> = restaurant_new   <span class="comment">--将数据库restaurant重命名为restaurant_new</span></span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/****** 增加数据文件 ******/</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> restaurant_new</span><br><span class="line"><span class="comment">--向主文件组增加数据文件</span></span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">FILE</span> </span><br><span class="line"><span class="keyword">ON</span> PRIMARY</span><br><span class="line">(</span><br><span class="line">    <span class="keyword">NAME</span> = restaurant_data_02,  <span class="comment">--指定数据库逻辑名，不可省</span></span><br><span class="line">    FILENAME = <span class="string">'C:\sql\restaurant_data_02.ndf'</span>,   <span class="comment">--指定物理文件名</span></span><br><span class="line">    <span class="keyword">SIZE</span> = <span class="number">5</span> MB,   <span class="comment">--初始大小</span></span><br><span class="line">    <span class="keyword">MAXSIZE</span> = <span class="number">500</span> MB,   <span class="comment">--最大大小</span></span><br><span class="line">    FILEGROWTH = <span class="number">10</span> %   <span class="comment">--增长方式</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">--向某一文件组增加数据文件</span></span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">FILE</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">NAME</span> = restaurant_data_group_01_02,  <span class="comment">--指定数据文件逻辑名，不可省</span></span><br><span class="line">    FILENAME = <span class="string">'C:\sql\restaurant_data_group01_02.ndf'</span>,</span><br><span class="line">    <span class="keyword">SIZE</span> = <span class="number">5</span> MB,</span><br><span class="line">    <span class="keyword">MAXSIZE</span> = <span class="number">500</span> MB,</span><br><span class="line">    FILEGROWTH = <span class="number">10</span> % </span><br><span class="line">)</span><br><span class="line"><span class="keyword">TO</span> FILEGROUP group01</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/****** 修改数据文件 ******/</span></span><br><span class="line">使用<span class="keyword">MODIFY</span> <span class="keyword">FILE</span> filename</span><br><span class="line"></span><br><span class="line"><span class="comment">/****** 增加、修改日志文件 ******/</span></span><br><span class="line">类似，使用<span class="keyword">ADD</span> <span class="keyword">LOG</span> <span class="keyword">FILE</span>, <span class="keyword">MODIFY</span> <span class="keyword">FILE</span>(注意没有<span class="keyword">MODIFY</span> <span class="keyword">LOG</span> <span class="keyword">FILE</span>)</span><br></pre></td></tr></table></figure><h4 id="数据库的删除">数据库的删除</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> restaurant_new</span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h3 id="表的创建修改删除">表的创建、修改、删除</h3><h4 id="表的创建">表的创建</h4><p>以餐馆点餐系统为例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Customer</span><br><span class="line">(</span><br><span class="line">    customer_no <span class="built_in">INT</span> <span class="keyword">IDENTITY</span>(<span class="number">1000000</span>,<span class="number">1</span>) PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">nickname <span class="built_in">CHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">phone <span class="built_in">CHAR</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">pass <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    is_vip <span class="built_in">CHAR</span>(<span class="number">2</span>) <span class="keyword">CHECK</span>(is_vip=<span class="string">'是'</span> <span class="keyword">OR</span> is_vip=<span class="string">'否'</span>) <span class="keyword">DEFAULT</span> <span class="string">'否'</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Menu</span><br><span class="line">(</span><br><span class="line">    dish_no <span class="built_in">CHAR</span>(<span class="number">8</span>) PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">    dish_name <span class="built_in">CHAR</span>(<span class="number">20</span>) <span class="keyword">UNIQUE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">discount <span class="built_in">NUMERIC</span>(<span class="number">3</span>,<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="number">1</span>,</span><br><span class="line">    price <span class="built_in">NUMERIC</span>(<span class="number">6</span>,<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    is_spicy <span class="built_in">CHAR</span>(<span class="number">8</span>) <span class="keyword">CHECK</span>(is_spicy=<span class="string">'不辣'</span> <span class="keyword">OR</span> is_spicy=<span class="string">'微辣'</span> <span class="keyword">OR</span> is_spicy=<span class="string">'辣'</span> <span class="keyword">OR</span> is_spicy=<span class="string">'很辣'</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Orders</span><br><span class="line">(</span><br><span class="line">    order_no <span class="built_in">INT</span> <span class="keyword">IDENTITY</span>(<span class="number">1000000</span>,<span class="number">1</span>) PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">    customer_no <span class="built_in">INT</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> <span class="keyword">REFERENCES</span> Customer(customer_no) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    employee_no <span class="built_in">CHAR</span>(<span class="number">8</span>) <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> <span class="keyword">REFERENCES</span> Employee(employee_no),</span><br><span class="line">    order_time DATETIME,</span><br><span class="line">    people_num <span class="built_in">INT</span>,</span><br><span class="line">    discount <span class="built_in">NUMERIC</span>(<span class="number">3</span>,<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="number">1</span>,</span><br><span class="line">total_price <span class="built_in">NUMERIC</span>(<span class="number">6</span>,<span class="number">2</span>),</span><br><span class="line">    order_status <span class="built_in">CHAR</span>(<span class="number">6</span>) <span class="keyword">CHECK</span>(order_status <span class="keyword">IN</span> (<span class="string">'未提交'</span>,<span class="string">'待付款'</span>,<span class="string">'已接单'</span>,<span class="string">'已完成'</span>,<span class="string">'已评价'</span>)),</span><br><span class="line">    <span class="comment">/**************************************** </span></span><br><span class="line"><span class="comment">    如果想给约束起个名字，可以使用表级约束，然后使用CONSTRAINT起名</span></span><br><span class="line"><span class="comment">    CONSTRAINT CK_order_status    CHECK(order_status IN ('未提交','待付款','已接单','已完成','已评价'))</span></span><br><span class="line"><span class="comment">    *****************************************/</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Orders_content</span><br><span class="line">(</span><br><span class="line">order_no <span class="built_in">INT</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> <span class="keyword">REFERENCES</span> Orders(order_no),</span><br><span class="line">dish_no <span class="built_in">CHAR</span>(<span class="number">8</span>) <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> <span class="keyword">REFERENCES</span> Menu(dish_no),</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (order_no,dish_no)</span><br><span class="line">    <span class="comment">/*****************************************</span></span><br><span class="line"><span class="comment">    使用表级外键约束</span></span><br><span class="line"><span class="comment">    FOREIGN KEY (order_no) REFERENCES Orders(order_no),</span></span><br><span class="line"><span class="comment">    FOREIGN KEY (dish_no) REFERENCES Menu(dish_no)</span></span><br><span class="line"><span class="comment">    ******************************************/</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="补充使用查询结果来创建新表select-into">*补充：使用查询结果来创建新表：SELECT INTO</h4><p><code>SELECT INTO</code> 字句根据 SELECT命令选择的列和WHERE字句选择的行创建新表。它和CREATE TABLE命令的最大区别就是：不必经历通常的数据定义过程，而是基于现有字段和数据直接生成新表。</p><p>注意：SELECT INTO创建的表是一个真实的、独立的、永久的表，这与视图所对应的虚表不同。</p><h4 id="表的修改">表的修改</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Orders</span><br><span class="line"><span class="comment">/****** 修改某列定义 ******/</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> people_num <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/****** 添加一列 ******/</span></span><br><span class="line"><span class="keyword">ADD</span> remarks <span class="built_in">VARCHAR</span>(<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/****** 删除某列/某约束 ******/</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">COLUMN</span> discount</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> CK_order_status</span><br></pre></td></tr></table></figure><p>不是所有列都可以被修改，也不可以对某列进行任意的修改，否则表中的数据可能发生错误。为了避免此种情况发生，SQL Server中规定：</p><p>具有以下特性的列不能被修改：</p><ul><li>数据类型为timestamp的列</li><li>计算列</li><li>全局标识符列</li><li>用于索引的列</li><li>用于由<code>CREATE STATISTICS</code>生成统计的列</li><li>用于主键或外键约束的列</li><li>关联有默认值的列</li></ul><p>改变列的数据类型时，要满足以下条件：</p><ul><li>原数据类型必须能够转换至新类型</li><li>新类型不能为timestamp类型</li><li>如果被修改列属性中有“标识规范”属性，则新数据类型必须是有效的“标识规范”数据类型</li></ul><p>总之，不要轻易修改表结构。</p><h4 id="表的删除">表的删除</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> Orders_content</span><br></pre></td></tr></table></figure><h3 id="视图的创建修改删除">视图的创建、修改、删除</h3><h4 id="何为视图">何为视图？</h4><p>视图的定义是：为了得到另一个关系而对基关系进行一次或多次操作所得到的动态结果。</p><p>通俗地说：视图就是一个在已有表或视图中进行子查询得到的虚表，在数据库中并不存在，需要时根据要求临时生成。</p><p>视图对应三级模式中的外模式。</p><p><strong>视图的种类：</strong></p><ol type="1"><li>标准视图：用户定义的视图（内容为一个查询）</li><li>索引视图：具体化的视图，可以为其建立索引（关键步骤：使用 WITH SCHEMABINDING 选项创建视图，并为视图创建唯一的聚集索引。）</li><li>分区视图</li><li>系统视图</li></ol><p><strong>注意：</strong></p><ol type="1"><li>不能将规则或DEFAULT定义与视图关联</li><li>不能将AFTER触发器与视图相关联，只有INSTEAD OF触发器可以与之相关联</li><li>定义视图的查询不能包含ORDER BY子句，除非在SELECT语句中有TOP子句</li><li>不能创建临时视图，也不能为临时表创建视图</li></ol><h4 id="创建视图">创建视图</h4><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> viewName [(newColumnName [,...] )]</span><br><span class="line">[<span class="keyword">WITH</span> ENCRYPTION | <span class="keyword">WITH</span> SECHEMABINDING]</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> ... <span class="keyword">FROM</span> ...</span><br><span class="line">[<span class="keyword">WITH</span> [<span class="keyword">CASCADED</span>|<span class="keyword">LOCAL</span>] <span class="keyword">CHECK</span> <span class="keyword">OPTION</span>] </span><br><span class="line"><span class="comment">--要求对该视图执行的所有数据修改语句都必须符合select语句中设置的条件。CASCADED CHECK OPTION指明级联检查是否符合视图的定义（比如B视图在A视图基础上创建，级联检查就是既检查是否符合B视图的定义，又检查是否符合A视图的定义。）LOCAL CHECK OPTION就是只检查是否符合当前视图的定义。</span></span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> every_order (订单号, 菜品号, 菜品反馈)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> order_no, dish_no, dish_feedback</span><br><span class="line"><span class="keyword">FROM</span> Orders_content</span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h4 id="修改视图">修改视图</h4><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">VIEW</span> viewName [(newColumnName [,...] )]</span><br><span class="line">[<span class="keyword">WITH</span> ENCRYPTION | <span class="keyword">WITH</span> SECHEMABINDING]</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> ... <span class="keyword">FROM</span> ...</span><br><span class="line">[<span class="keyword">WITH</span> [<span class="keyword">CASCADED</span>|<span class="keyword">LOCAL</span>] <span class="keyword">CHECK</span> <span class="keyword">OPTION</span>]</span><br></pre></td></tr></table></figure><p>注：其实就是把CREATE改为ALTER。</p><h4 id="删除视图">删除视图</h4><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> viewName</span><br></pre></td></tr></table></figure><p>实际操作的时候可以先检查该名称的视图是否存在。检查的方法：利用系统表<code>INFORMATION_SCHEMA.VIEWS</code>中<code>TABLE_NAME</code>列（该列存放视图名字）</p><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> restaurant</span><br><span class="line"><span class="keyword">IF</span> <span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> TABLE_NAME <span class="keyword">FROM</span> INFORMATION_SCHEMA.VIEWS <span class="keyword">WHERE</span> TABLE_NAME = <span class="string">'every_order'</span>)</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> every_order</span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h4 id="利用视图更新数据">利用视图更新数据</h4><p>视图虽然是虚表，但由于它是最终都是建立在实表的基础上的，因此也承载了更新数据的功能。对视图中数据的更新最终要转化为对基本表的更新。</p><p>为了防止用户对不属于视图范围内的数据进行操作，定义视图时最好加上<code>WITH CHECK OPTION</code>选项</p><p><strong>什么样的视图是可更新视图？</strong></p><ol type="1"><li>创建视图的SELECT语句中没有聚合函数，也没有<code>TOP</code>, <code>GROUP BY</code>, <code>HAVING</code>和<code>DISTINCT</code>关键字</li><li>创建视图的<code>SELECT</code>语句中的各列必须是来自基表/视图的列，不能是表达式</li><li>若视图包括多个基础表，且要更改的列属于不同基础表或为基础表的公共列，则不能通过视图更改基础表的数据</li></ol><p>满足更新视图的要求的情况下，在视图上插入<code>INSERT</code>，更新<code>UPDATE</code>，删除<code>REMOVE</code>数据的语法和对表的操作完全相同。</p><p>关键在于思考我们在视图上修改表数据的操作是否是被允许的。</p><h3 id="索引的创建修改删除">索引的创建、修改、删除</h3><h4 id="创建索引">创建索引</h4><p>创建索引的语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">UNIQUE</span>] [CLUSTERED|NONCLUSTERED] <span class="keyword">INDEX</span></span><br><span class="line"><span class="keyword">ON</span> tableName (columnName [<span class="keyword">ASC</span>|<span class="keyword">DESC</span>] [,...])</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> CLUSTERED <span class="keyword">INDEX</span> index_order_date</span><br><span class="line"><span class="keyword">ON</span> Orders(order_time <span class="keyword">DESC</span>)</span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><p>聚集索引决定数据存放顺序，在一张表中只能有一个</p><p>非聚集索引在表中可以有多个</p><h4 id="删除索引">删除索引</h4><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">INDEX</span> indexName</span><br></pre></td></tr></table></figure><h4 id="索引的分类">索引的分类</h4><ul><li>按存储结构：分为聚集索引、非聚集索引</li><li>按数据的唯一性：分为唯一索引和非唯一索引</li></ul><h3 id="使用规则默认值和约束保证数据完整性">使用规则、默认值和约束保证数据完整性</h3><h4 id="规则">规则</h4><h5 id="创建规则">创建规则</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> RULE rule_discount</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">@discount &lt;= <span class="number">1.00</span> <span class="keyword">AND</span> @discount &gt; <span class="number">0</span></span><br></pre></td></tr></table></figure><h5 id="绑定规则">绑定规则</h5><p>将规则绑定至某张表的某一列，一列至多绑定一个规则。</p><p>规则与CHECK约束作用类似，但形式不同：</p><ul><li>规则是依附于表的，而CHECK约束不依附于表（它可以对列应用，对表应用，也可以作为一个CONSTRAINT存在）</li><li>CHECK约束优先级高于规则</li><li>一个列中可以有多个CHECK约束，但是只能有一个规则。可以同时有CHECK约束和规则。</li></ul><p>绑定规则需要使用系统存储过程（SQL Server）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EXEC sp_bindrule rule_discount, &#39;Orders.discount&#39;</span><br><span class="line">-- 参数分别为 规则名, 表名.列名</span><br></pre></td></tr></table></figure><h5 id="解绑规则">解绑规则</h5><p>使用系统存储过程（SQL Server）解绑规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EXEC sp_unbindrule &#39;Orders.discount&#39;</span><br><span class="line">-- 参数名为列名</span><br></pre></td></tr></table></figure><p>注：为何参数名只有列名？因为一个列只能绑定一个规则，所以给出列名足以使DBMS明白需要解绑的是哪个规则。</p><h5 id="删除规则">删除规则</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> RULE rule_discount</span><br><span class="line"><span class="comment">-- 直接后接规则名即可，可以跟多个</span></span><br></pre></td></tr></table></figure><h4 id="默认值">默认值</h4><h5 id="创建默认值">创建默认值</h5><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DEFAULT</span> defaultName </span><br><span class="line"><span class="keyword">AS</span> const_expression</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DEFAULT</span> default_discount</span><br><span class="line"><span class="keyword">AS</span> <span class="number">1.00</span></span><br></pre></td></tr></table></figure><h5 id="绑定默认值">绑定默认值</h5><p>只能使用系统存储过程，与绑定规则类似</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXEC sp_bindefault default_discount, &#39;Orders.discount&#39;</span><br></pre></td></tr></table></figure><p><em>:exclamation: 注意是bindefault而不是binddefault，省略了一个d !</em></p><h5 id="解绑默认值">解绑默认值</h5><p>（SQL Server）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sp_unbindefault &#39;Orders.discount&#39;</span><br></pre></td></tr></table></figure><h5 id="删除默认值">删除默认值</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">DEFAULT</span> default_discount</span><br><span class="line"><span class="comment">-- 参数为 默认值名称</span></span><br></pre></td></tr></table></figure><p>注意：删除默认值的时候必须先解绑，否则出错！</p><h4 id="约束">约束</h4><p>前面实际上已经在创建表的时候使用过表级约束和列级约束，那时我们虽然没有使用CONSTRAINT关键字，但系统已经将其作为一个CONSTRAINT看待，并给它赋予了一个名称（不过这个名称通常异常复杂）。如果我们显式地使用CONSTRAINT关键字，那么可以给约束起名字，方便重复使用。</p><p>SQL Server中共有6中约束：</p><ul class="task-list"><li><input type="checkbox" disabled>主键约束（PRIMARY KEY）</li><li><input type="checkbox" disabled>外键约束（FOREIGN KEY）</li><li><input type="checkbox" disabled>唯一性约束（UNIQUE）</li><li><input type="checkbox" disabled>检查约束（CHECK）</li><li><input type="checkbox" disabled>默认约束（DEFAULT）</li><li><input type="checkbox" disabled>非空值约束（NOT NULL）</li></ul><p>你都还有印象吗？</p><p>尝试：试将下例中列级约束全部改为显式指定CONSTRAINT的表级约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Menu</span><br><span class="line">(</span><br><span class="line">    dish_no <span class="built_in">CHAR</span>(<span class="number">8</span>) PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">    dish_name <span class="built_in">CHAR</span>(<span class="number">20</span>) <span class="keyword">UNIQUE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">discount <span class="built_in">NUMERIC</span>(<span class="number">3</span>,<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="number">1</span>,</span><br><span class="line">    price <span class="built_in">NUMERIC</span>(<span class="number">6</span>,<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    is_spicy <span class="built_in">CHAR</span>(<span class="number">8</span>) <span class="keyword">CHECK</span>(is_spicy=<span class="string">'不辣'</span> <span class="keyword">OR</span> is_spicy=<span class="string">'微辣'</span> <span class="keyword">OR</span> is_spicy=<span class="string">'辣'</span> <span class="keyword">OR</span> is_spicy=<span class="string">'很辣'</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Orders</span><br><span class="line">(</span><br><span class="line">    order_no <span class="built_in">INT</span> <span class="keyword">IDENTITY</span>(<span class="number">1000000</span>,<span class="number">1</span>) PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">    customer_no <span class="built_in">INT</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> <span class="keyword">REFERENCES</span> Customer(customer_no) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    employee_no <span class="built_in">CHAR</span>(<span class="number">8</span>) <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> <span class="keyword">REFERENCES</span> Employee(employee_no),</span><br><span class="line">    order_time DATETIME,</span><br><span class="line">    people_num <span class="built_in">INT</span>,</span><br><span class="line">    service_feedback <span class="built_in">NUMERIC</span>(<span class="number">2</span>,<span class="number">1</span>),</span><br><span class="line">    discount <span class="built_in">NUMERIC</span>(<span class="number">3</span>,<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="number">1</span>,</span><br><span class="line">total_price <span class="built_in">NUMERIC</span>(<span class="number">6</span>,<span class="number">2</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 修改后</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Menu</span><br><span class="line">(</span><br><span class="line">    dish_no <span class="built_in">CHAR</span>(<span class="number">8</span>),</span><br><span class="line">    dish_name <span class="built_in">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">discount <span class="built_in">NUMERIC</span>(<span class="number">3</span>,<span class="number">2</span>),</span><br><span class="line">    price <span class="built_in">NUMERIC</span>(<span class="number">6</span>,<span class="number">2</span>),</span><br><span class="line">    is_spicy <span class="built_in">CHAR</span>(<span class="number">8</span>)，</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">CONSTRAINT</span> pk_dish_no PRIMARY <span class="keyword">KEY</span> (dish_no),</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> uni_dish_name <span class="keyword">UNIQUE</span> (dish_name),</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> default_discount <span class="keyword">DEFAULT</span> <span class="number">1</span> <span class="keyword">FOR</span> (discount),</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> notnull_price <span class="keyword">NOT</span> <span class="literal">NULL</span> (dish_name, price),</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> ck_is_spicy <span class="keyword">CHECK</span> (is_spicy <span class="keyword">IN</span> (<span class="string">'不辣'</span>, ‘微辣<span class="string">', '</span>辣<span class="string">', '</span>很辣<span class="string">') )</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">CREATE TABLE Orders</span></span><br><span class="line"><span class="string">(</span></span><br><span class="line"><span class="string">    order_no INT IDENTITY(1000000,1) PRIMARY KEY,</span></span><br><span class="line"><span class="string">    customer_no INT FOREIGN KEY REFERENCES Customer(customer_no) NOT NULL,</span></span><br><span class="line"><span class="string">    employee_no CHAR(8) FOREIGN KEY REFERENCES Employee(employee_no),</span></span><br><span class="line"><span class="string">    order_time DATETIME,</span></span><br><span class="line"><span class="string">    people_num INT,</span></span><br><span class="line"><span class="string">    service_feedback NUMERIC(2,1),</span></span><br><span class="line"><span class="string">total_price NUMERIC(6,2),</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    CONSTRAINT pk_order_no PRIMARY KEY (order_no),</span></span><br><span class="line"><span class="string">    CONSTRAINT notnull_customer_no NOT NULL (customer_no),</span></span><br><span class="line"><span class="string">CONSTRAINT fk_customer_no FOREIGN KEY (customer_no) REFERENCES Customer(customer_no),</span></span><br><span class="line"><span class="string">    CONSTRAINT fk_employee_no FOREIGN KEY (employee_no) REFERENCES Employee(employee_no),</span></span><br><span class="line"><span class="string">)</span></span><br></pre></td></tr></table></figure><h2 id="数据操作语言">数据操作语言</h2><h3 id="数据的添加更新和删除">数据的添加、更新和删除</h3><h4 id="数据的添加">数据的添加</h4><p>假设Menu表的逻辑结构是Menu(<u>dish_no</u>, dish_name, discount, price, is_spicy)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/******** 往所有列上插入数据 ********/</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Menu</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">'001'</span>, <span class="string">'小炒黄牛肉'</span>, <span class="number">1.00</span>, <span class="number">66.00</span>, <span class="string">'辣'</span>),</span><br><span class="line">(<span class="string">'002'</span>, <span class="string">'柠檬脆皮鸭'</span>, <span class="number">0.85</span>, <span class="number">58.00</span>, <span class="string">'不辣'</span>)</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/******** 往指定列上插入数据 ********/</span></span><br><span class="line"><span class="comment">-- 用括号给出指定列的列名</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Menu (dish_no, dish_name, price, is_spicy)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">'001'</span>, <span class="string">'小炒黄牛肉'</span>, <span class="number">66.00</span>, <span class="string">'辣'</span>),</span><br><span class="line">(<span class="string">'002'</span>, <span class="string">'柠檬脆皮鸭'</span>, <span class="number">58.00</span>, <span class="string">'不辣'</span>)</span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><p>INSERT后面也可以直接跟一张表（要求表的字段名和INSERT INTO的那张表匹配），这样可以将表中数据直接全部添加进去。如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Menu</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Menu2</span><br></pre></td></tr></table></figure><h4 id="数据的更新">数据的更新</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> Menu</span><br><span class="line"><span class="keyword">SET</span> price = <span class="number">45.00</span></span><br><span class="line"><span class="keyword">WHERE</span> dish_no = <span class="string">'001'</span></span><br></pre></td></tr></table></figure><h4 id="数据的删除">数据的删除</h4><p>DELETE语句删除的内容会记入日志，而TRUNCATE语句不会把每一行的删除操作记入日志</p><h5 id="使用delete语句删除">使用DELETE语句删除</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/******** 删除表中所有行 ********/</span></span><br><span class="line"><span class="keyword">DELETE</span> Orders </span><br><span class="line"><span class="comment">-- 等价于DELETE FROM Orders，因为FROM可以省略</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/******** 删除表中某些行 ********/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 用WHERE字句筛选</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> Orders</span><br><span class="line"><span class="keyword">WHERE</span> Order_id = <span class="string">'1000001'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 用TOP筛选</span></span><br><span class="line"><span class="keyword">DELETE</span> TOP <span class="number">10</span> <span class="keyword">FROM</span> Orders</span><br></pre></td></tr></table></figure><h5 id="使用truncate语句删除">使用TRUNCATE语句删除</h5><p>TRUNCATE语句一次删去表中所有数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> Orders</span><br></pre></td></tr></table></figure><h3 id="数据查询">数据查询</h3><p>简单的数据查询此处略，复杂的放在可编程性之后</p><h2 id="可编程性">可编程性</h2><h3 id="变量及常量">变量及常量</h3><p>此处注意<code>@</code>开头为用户定义的变量，<code>@@</code>开头为全局变量</p><h3 id="程序控制流语句">程序控制流语句</h3><p>灵活使用CASE函数</p><blockquote><p>例子：</p><p>Menu表中is_spicy 有4种取值('不辣', '微辣', '辣', '很辣')，现希望对其进行如下查询</p><p>（1）输出形如</p><table><thead><tr class="header"><th style="text-align: center;">口味</th><th style="text-align: center;">数量</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">不辣</td><td style="text-align: center;">2</td></tr><tr class="even"><td style="text-align: center;">微辣</td><td style="text-align: center;">3</td></tr><tr class="odd"><td style="text-align: center;">辣</td><td style="text-align: center;">5</td></tr><tr class="even"><td style="text-align: center;">很辣</td><td style="text-align: center;">4</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> is_spicy <span class="keyword">AS</span> 口味, <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> 数量</span><br><span class="line"><span class="keyword">FROM</span> Menu</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> is_spicy</span><br></pre></td></tr></table></figure><p>（2）输出形如</p><table><thead><tr class="header"><th style="text-align: center;">微辣</th><th style="text-align: center;">不辣</th><th style="text-align: center;">辣</th><th style="text-align: center;">很辣</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">3</td><td style="text-align: center;">2</td><td style="text-align: center;">5</td><td style="text-align: center;">4</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line"><span class="keyword">COUNT</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> is_spicy = <span class="string">'微辣'</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">AS</span> <span class="string">'微辣'</span></span><br><span class="line"><span class="keyword">COUNT</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> is_spicy = <span class="string">'不辣'</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">AS</span> <span class="string">'不辣'</span></span><br><span class="line"><span class="keyword">COUNT</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> is_spicy = <span class="string">'辣'</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">AS</span> <span class="string">'辣'</span></span><br><span class="line"><span class="keyword">COUNT</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> is_spicy = <span class="string">'很辣'</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">AS</span> <span class="string">'很辣'</span></span><br><span class="line"><span class="keyword">FROM</span> Menu</span><br></pre></td></tr></table></figure></blockquote><h3 id="函数">函数</h3><h4 id="标量函数">标量函数</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> function_name (@parameter_name parameter_type)</span><br><span class="line"><span class="keyword">RETURNS</span> return_type</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">function_body</span><br><span class="line"><span class="keyword">RETURN</span> <span class="keyword">var</span></span><br></pre></td></tr></table></figure><h4 id="内嵌表值函数">内嵌表值函数</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> function_name (@parameter_name parameter_type)</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="keyword">TABLE</span> </span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">function_body</span><br><span class="line"><span class="keyword">RETURN</span> (<span class="keyword">SELECT</span> column1, column2, ... )</span><br></pre></td></tr></table></figure><h4 id="多语句表值函数">多语句表值函数</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> function_name (@parameter_name parameter_type)</span><br><span class="line"><span class="keyword">RETURNS</span> @return_tablename <span class="keyword">TABLE</span> (</span><br><span class="line">        <span class="keyword">Name</span> <span class="built_in">char</span>(<span class="number">8</span>),</span><br><span class="line">        sno <span class="built_in">char</span>(<span class="number">10</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">        function_body</span><br><span class="line">        <span class="keyword">RETURN</span>   —返回的是@return_tablename那张表</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><p>注：<code>AS</code>后面的<code>BEGIN...END...</code>均可省略</p><h4 id="执行用户自定义函数">执行用户自定义函数</h4><p>使用时需要加上架构名（dbo） 如执行标量函数DatetoQuarter的语句为<code>SELECT dbo.DatetoQuarter(‘2020-4-5’)</code> 执行表值函数dish_ranking的语句为<code>SELECT * FROM dbo.dish_ranking()</code></p><h4 id="修改删除函数">修改、删除函数</h4><p>修改使用<code>ALTER TABLE</code></p><p><code>sp_help function_name</code>查看函数的信息</p><p><code>sp_helptext function_name</code>查看函数的定义</p><blockquote><p>例子：（待完善）字符串类型的聚合统计查询 将表中的人名（name列）进行聚合（按行访问使用游标） 不使用游标的做法：将每一次取得的name累加</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> @<span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">200</span>)</span><br><span class="line"><span class="keyword">SET</span> @<span class="keyword">name</span> = ‘’</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="keyword">name</span> = @<span class="keyword">name</span> + ‘, ’ <span class="keyword">name</span> <span class="keyword">FROM</span> student  — 但是第一个人名字之前有逗号，使用<span class="keyword">substring</span>库函数</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> @<span class="keyword">name</span> = <span class="keyword">substring</span>(@<span class="keyword">name</span>, <span class="number">2</span>, <span class="keyword">LEN</span>(@<span class="keyword">name</span>) )</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实现字符串类型的聚合统计查询 抽象成自定义标量值函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> mergenames (＠tdno <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="built_in">varchar</span> (<span class="number">512</span>)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> @allnames <span class="built_in">VARCHAR</span>(<span class="number">512</span>)</span><br><span class="line">    <span class="keyword">SET</span> @allnames=’’</span><br><span class="line">    <span class="keyword">IF</span> @tdno <span class="keyword">is</span> <span class="literal">null</span></span><br><span class="line">    <span class="keyword">SELECT</span> @allnames=@allnames +’, ’+<span class="keyword">RTRIM</span>(<span class="keyword">LTRIM</span>(sname) <span class="keyword">FROM</span> student </span><br><span class="line">    <span class="keyword">ELSE</span></span><br><span class="line">    <span class="keyword">SELECT</span> @allnames=@allnames+’, ’ + <span class="keyword">RTRIM</span>(<span class="keyword">LTRIM</span>(sname) ) <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> dno= @tdno</span><br><span class="line">    <span class="keyword">RETURN</span> <span class="keyword">substring</span> (@allnames, <span class="number">2</span>, <span class="keyword">len</span>(@allnames) )</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">SELECT</span> dno, dbo.mergenames(dno) </span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> dno</span><br></pre></td></tr></table></figure></blockquote><h3 id="游标">游标</h3><h4 id="游标的基本使用">游标的基本使用</h4><ol type="1"><li>定义游标</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> cur_customer <span class="keyword">CURSOR</span></span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">SELECT</span> <span class="keyword">id</span>, <span class="keyword">name</span>, addr, tel</span><br><span class="line"><span class="keyword">FROM</span> customer</span><br></pre></td></tr></table></figure><ol start="2" type="1"><li>打开游标</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OPEN cur_customer</span><br></pre></td></tr></table></figure><ol start="3" type="1"><li>读取游标</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FETCH NEXT FROM cur_customer</span><br><span class="line">FETCH PRIOR FROM cur_customer</span><br><span class="line">FETCH FIRST FROM cur_customer</span><br><span class="line">FETCH LAST FROM cur_customer</span><br></pre></td></tr></table></figure><ol start="4" type="1"><li>关闭游标</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CLOSE cur_customer</span><br></pre></td></tr></table></figure><ol start="5" type="1"><li>释放游标</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DEALLOCATE</span> cur_customer</span><br></pre></td></tr></table></figure><p>注: DEALLOCATE 命令只删除游标对命名变量的引用</p><h4 id="进一步使用游标">进一步使用游标</h4><h5 id="使用游标函数">使用游标函数</h5><ol type="1"><li><code>@@CURSOR_ROWS</code> 返回游标结果集里上次打开并读取的行数 打开游标后，该函数返回当前游标的总行数 static 的 cursor 才能使用 cursor rows</li><li><code>CURSOR_STATUS</code> 返回指定游标的状态</li><li><code>@@FETCH_STATUS</code> 返回被 FETCH 语句执行的最后游标的状态(不是当前被打开的游标的状态) 返回值: <code>0</code> FETCH 语句成功 <code>-1</code> FETCH 语句失败或者此行不在结果集里 <code>-2</code> 被提取的行不存在</li></ol><h5 id="用游标读取数据的一般方式">用游标读取数据的一般方式</h5><p>获取数据并存储到变量里面</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 定义变量用于保存数据</span></span><br><span class="line"><span class="keyword">DECLARE</span> @tmpId <span class="built_in">CHAR</span>(<span class="number">8</span>), @tmpName <span class="built_in">CHAR</span>(<span class="number">20</span>), @tmpAddr <span class="built_in">CHAR</span>(<span class="number">20</span>), @tmpTel <span class="built_in">CHAR</span>(<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 定义游标</span></span><br><span class="line"><span class="keyword">DECLARE</span> cur_customer <span class="keyword">CURSOR</span></span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">SELECT</span> <span class="keyword">id</span>, <span class="keyword">name</span>, addr, tel</span><br><span class="line"><span class="keyword">FROM</span> customer</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 打开游标</span></span><br><span class="line"><span class="keyword">OPEN</span> cur_customer</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 读取游标</span></span><br><span class="line"><span class="keyword">FETCH</span> <span class="keyword">NEXT</span> <span class="keyword">FROM</span> cur_customer <span class="keyword">INTO</span> @tmpId, @tmpName, @tmpAddr, @tmpTel</span><br><span class="line"></span><br><span class="line"><span class="keyword">WHILE</span> @@fetch_status = <span class="number">0</span></span><br><span class="line">    <span class="keyword">BEGIN</span></span><br><span class="line">    PRINT(@tmpId + @tmpName + @tmpAddr + @tmpTel)</span><br><span class="line">    <span class="keyword">FETCH</span> <span class="keyword">NEXT</span> <span class="keyword">FROM</span> cur_customer <span class="keyword">INTO</span> @tmpId, @tmpName, @tmpAddr, @tmpTel  <span class="comment">-- 游标所在行的内容被按顺序读取至 4 个变量中</span></span><br><span class="line">    <span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 关闭游标</span></span><br><span class="line"><span class="keyword">CLOSE</span> cur_customer</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 释放游标</span></span><br><span class="line"><span class="keyword">DEALLOCATE</span> cur_customer</span><br></pre></td></tr></table></figure><h5 id="使用变量作为游标名游标变量">使用变量作为游标名(游标变量)</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 定义游标变量</span></span><br><span class="line"><span class="keyword">DECLARE</span> @cur_var <span class="keyword">CURSOR</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方式 1: 定义游标，再通过游标名赋值给游标变量</span></span><br><span class="line"><span class="keyword">DECLARE</span> cur_customer <span class="keyword">CURSOR</span></span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> customer</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> @cur_var = cur_customer</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方式 2: (常用)创建游标，直接赋值给游标变量</span></span><br><span class="line"><span class="keyword">SET</span> @cur_var = <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> customer</span><br></pre></td></tr></table></figure><h5 id="滚动游标的控制">滚动游标的控制</h5><p>用 SCROLL 声明游标以后，在 FETCH 语句中可以用: <code>NEXT</code>滚动到下一条 <code>PRIOR</code>滚动到前一条 <code>FIRST</code>滚动到第一条 <code>LAST</code>滚动到最后一条 <code>ABSOLUTE</code> 滚动到第几行 <code>RELATIVE</code> 正值为向下滚动的行数，负值为向上滚动的行数</p><h3 id="存储过程">存储过程</h3><p>存储过程是 SQL 语句或控制流语言的已命名集合。可以为常用功能创建存储过程以提高性能。SAP ASE 也提供系统过程来执行可更新系统表的管理任务。 存储过程可以:</p><ul><li>带参数</li><li>调用其它过程</li><li>把状态值返回给调用过程或批处理,以指明成功或失败,以及失败的原因</li><li>把参数的值返回给调用过程或批处理</li><li>在远程服务器上执行</li></ul><h4 id="创建存储过程">创建存储过程</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> procedureName @param_in [,...], @param_out <span class="keyword">OUTPUT</span> [,...]</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">procedure_body</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> add_to_cart @dish_no <span class="built_in">CHAR</span>(<span class="number">8</span>) ,@order_no <span class="built_in">INT</span></span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Orders_content</span><br><span class="line"><span class="keyword">VALUES</span>(@order_no, @dish_no, <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h4 id="执行存储过程">执行存储过程</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXEC procedure_name value01 [,...], @var OUTPUT [,...]</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> @order_no <span class="built_in">INT</span></span><br><span class="line">EXEC add_to_cart <span class="string">'001'</span>, @order_no <span class="keyword">OUTPUT</span></span><br></pre></td></tr></table></figure><h3 id="触发器">触发器</h3><p>触发器是一种特殊的存储过程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> trigger_name</span><br><span class="line"><span class="keyword">ON</span> table_name</span><br><span class="line">[<span class="keyword">WITH</span> ENCRYPTION]</span><br><span class="line">[<span class="keyword">FOR</span> | <span class="keyword">AFTER</span> | INSTEAD <span class="keyword">OF</span>] [<span class="keyword">INSERT</span> | <span class="keyword">DELETE</span> | <span class="keyword">UPDATE</span>]</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">    ......</span><br></pre></td></tr></table></figure><p>按发生的时间分: instead of，after 触发器 instead of 触发器: （事前预防） 生成两张临时表: inserted 和 deleted (如果合法，那么执行更新数据的操作) after 触发器：（事后检查）在操作完成后执行。 也生成两张临时表然后直接进行数据更改。可以撤销操作所造成的后果(触发器工作在事务模式下，如果检测出操作不合法，那么执行 rollback，如果合法，那么 after 触发器不执行任何操作) 在一张表中可以有多个</p><p>没有指定类型时是 after 类型的触发器</p><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> add_total_price</span><br><span class="line"><span class="keyword">ON</span> Orders_content</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">DECLARE</span> @price <span class="built_in">NUMERIC</span>(<span class="number">6</span>,<span class="number">2</span>)</span><br><span class="line"><span class="keyword">SELECT</span> @price = <span class="keyword">SUM</span>(price*discount)</span><br><span class="line"><span class="keyword">FROM</span> inserted <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Menu <span class="keyword">ON</span> inserted.dish_no=Menu.dish_no</span><br><span class="line"><span class="keyword">UPDATE</span> Orders</span><br><span class="line"><span class="keyword">SET</span> total_price = (total_price + @price)*discount</span><br><span class="line"><span class="keyword">WHERE</span> order_no <span class="keyword">IN</span> (<span class="keyword">SELECT</span> order_no <span class="keyword">FROM</span> inserted)</span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><p>DML 触发器:</p><ul><li>强制执行比 CHECK 约束更为复杂的约束</li><li>以多条语句的方式实行完整性检查</li><li>CHECK Constraint 是在 CREATE TABLE 的时候设置的，只能针对一张表中的数据，跨越两张表的完整性检查只能通过 DML 触发器检查</li><li>一张表上可以定义多个同类型的 DML触发器</li><li>主外键约束的完整性(跨越表)。使用 DML 跨越数据库的完整性约束(引用完整性 DRI 是不能跨越数据库的)</li><li>INSTEAD OF 触发器通过了，但触发器表的约束被违反，那么触发器运行后被回滚(执行顺序: INSTEAD OF 触发器-&gt;表约束-&gt;AFTER 触发器)</li></ul><h4 id="多个触发器的执行顺序">多个触发器的执行顺序</h4><p>如果有多个 AFTER 触发器，那么可以通过<code>sp_settriggerorder</code>可以执行第一个和最后一个执行的触发器，中间其它触发器的顺序无法保证</p><p>同类型的触发器不会导致递归(不会出现一个触发器执行之后调用自身)</p><p>定义触发器的时候的规则</p><ul><li>CREATE TRIGGER 必须是批处理中的第一个语句</li><li>如果表有外键定义了级联 DELETE/UPDATE 操作(<code>CASCADE</code>)那么无法在此表定义 DELETE/UPDATE 触发器</li></ul><h4 id="删除触发器">删除触发器</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> triggerName</span><br></pre></td></tr></table></figure><h2 id="事务管理语言">事务管理语言</h2><h3 id="事务">事务</h3><h4 id="事务的属性-原子性一致性隔离性持久性">事务的属性: 原子性、一致性、隔离性、持久性</h4><p>原子性: 保证一个整体 一致性: 事务执行前数据一致、执行后也一致 隔离性: 事务之间互相不影响。事务完成之前，对数据库的修改对于其他事务不可见 持久性: 事务完成后，它对系统的影响是永久的</p><h4 id="事务模式">事务模式</h4><p>显式事务，隐式事务，自动事务模式</p><h4 id="启动事务语句">启动事务语句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span> <span class="keyword">TRANSACTION</span> transaction_name</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span> <span class="keyword">TRANSACTION</span> transaction_name</span><br></pre></td></tr></table></figure><p>transaction_name 既可以用常量也可以使用变量</p><h4 id="事务回滚rollback">事务回滚(ROLLBACK)</h4><p>一旦出错，进行回滚，恢复到事务执行之前的状态</p><p>使用 ROLLBACK 通常结合 IF 语句来写(若检测到事务无法继续的因素，则进行回滚处理)</p><p>ROLLBACK语法格式:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TRANSACTION</span> transaction_name</span><br></pre></td></tr></table></figure><p>当T-SQL 语句产生运行时错误时，让 SQL SERVER 自动回滚当前事务: <code>SET XACT_ABORT ON</code> (不自动回滚为<code>SET XACT_ABORT OFF</code> 指的是回滚当前出错命令，但是该事务中已经执行的其它命令不会被回滚)</p><p>事务由大到小: 任务-进程-线程 线程是操作系统执行的最小单位</p><h2 id="数据控制语言">数据控制语言</h2><p>角色与权限管理</p><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">EXEC sp_addrole 'customer_role'</span><br><span class="line">EXEC sp_addrole 'employee_role'</span><br><span class="line">EXEC sp_addrole 'manager_role'</span><br><span class="line"></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>, <span class="keyword">INSERT</span>, <span class="keyword">UPDATE</span> <span class="keyword">ON</span> Customer <span class="keyword">TO</span> customer_role</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>, <span class="keyword">INSERT</span>, <span class="keyword">UPDATE</span> <span class="keyword">ON</span> Orders <span class="keyword">TO</span> customer_role</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>, <span class="keyword">INSERT</span>, <span class="keyword">UPDATE</span> <span class="keyword">ON</span> Orders_content <span class="keyword">TO</span> customer_role</span><br><span class="line"></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">EXECUTE</span> <span class="keyword">ON</span> add_to_cart <span class="keyword">TO</span> customer_role</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">EXECUTE</span> <span class="keyword">ON</span> check_is_ordering <span class="keyword">TO</span> customer_role</span><br></pre></td></tr></table></figure><h3 id="登录账号和数据库用户">登录账号和数据库用户</h3><p>登录账号在服务器级创建，数据库用户在数据库级创建</p><p>数据库用户总是与某一登录账号相关联，一个登录账号可以关联多个数据库用户（一对多）</p><h3 id="权限">权限</h3><h4 id="权限的种类">权限的种类</h4><ol type="1"><li>对象权限</li><li>语句权限</li><li>隐含权限</li></ol><h4 id="权限管理">权限管理</h4><p><code>GRANT</code>赋予权限</p><p><code>DENY</code>禁止权限</p><p><code>REVOKE</code>收回已赋予的权限</p><h3 id="角色">角色</h3><h4 id="角色的分类">角色的分类</h4><ul><li>固定角色<ul><li>固定服务器角色</li><li>固定数据库角色</li></ul></li><li>用户定义数据库角色</li></ul><h2 id="数据库的备份与恢复">数据库的备份与恢复</h2><h3 id="备份">备份</h3><h3 id="恢复">恢复</h3><p>SQL Server的三种恢复模型：</p><ul><li>简单恢复模型：恢复到上次备份处</li><li>完全恢复模型：恢复到特定时间点</li><li>大容量日志记录恢复模型：介于简单恢复模型和完全恢复模型之间（在性能和日志占用空间方面找到平衡）</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数据库系统的基本概念&quot;&gt;数据库系统的基本概念&lt;/h2&gt;
&lt;h3 id=&quot;从数据到数据库&quot;&gt;从数据到数据库&lt;/h3&gt;
&lt;h4 id=&quot;数据&quot;&gt;数据&lt;/h4&gt;
&lt;h5 id=&quot;数据的概念&quot;&gt;数据的概念&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;数据：&lt;/strong&gt;数据的内容是信息；数据的表现形式是符号记录&lt;/p&gt;
&lt;h5 id=&quot;数据的分类&quot;&gt;数据的分类&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;按数据加工程度分：分为三次数据、二次数据、一次数据、零次数据（加工程度由高到低）&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;按结构化程度分：&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&quot;header&quot;&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;th&gt;本质&lt;/th&gt;
&lt;th&gt;举例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;结构化数据&lt;/td&gt;
&lt;td&gt;直接可用关系型数据库存储和管理的数据&lt;/td&gt;
&lt;td&gt;先有结构，后有数据&lt;/td&gt;
&lt;td&gt;关系数据库中的数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;半结构化数据&lt;/td&gt;
&lt;td&gt;经过一定的加工处理以后可以用关系数据库存储和管理的数据&lt;/td&gt;
&lt;td&gt;先有数据，后有结构&lt;/td&gt;
&lt;td&gt;HTML、XML&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;非结构化数据&lt;/td&gt;
&lt;td&gt;无法用关系型数据库存储和管理的数据&lt;/td&gt;
&lt;td&gt;没有（或难以发现）统一结构的数据&lt;/td&gt;
&lt;td&gt;语音、图像文件&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="https://heliumhe.gitee.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="数据库" scheme="https://heliumhe.gitee.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="SQL" scheme="https://heliumhe.gitee.io/tags/SQL/"/>
    
      <category term="T-SQL" scheme="https://heliumhe.gitee.io/tags/T-SQL/"/>
    
      <category term="数据库" scheme="https://heliumhe.gitee.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Hexo网站搭建教程 - BY HJY</title>
    <link href="https://heliumhe.gitee.io/2021/01/20/hexo%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B%20-%20BY%20HJY/"/>
    <id>https://heliumhe.gitee.io/2021/01/20/hexo%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B%20-%20BY%20HJY/</id>
    <published>2021-01-20T08:44:37.000Z</published>
    <updated>2021-01-20T08:45:08.197Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面">写在前面</h2><p>我们这里采用的是hexo工具来生成博客网站的方案, 我们简单介绍一下它的基本构架.</p><p>整个方案分为三大部分: 其一是博客本身, 其二是部署到服务器, 其三是多人协作.</p><a id="more"></a><h3 id="a-博客本身">a) 博客本身</h3><p>构建博客大体的思路如下. 我们建立一个文件夹存放博客网站的所有内容并用hexo初始化, 在该文件夹里面会出现几个特别的文件夹和文件:</p><ul><li><strong>node_modules：是npm的依赖包</strong></li><li><strong>public：存放的是生成的页面</strong></li><li>scaffolds：命令生成文章等的模板</li><li><strong>source：用命令创建的各种文章</strong></li><li><strong>themes：主题</strong></li><li>**_config.yml：整个博客的配置**</li><li>db.json：source解析所得到的</li><li>package.json：项目所需模块项目的配置信息</li></ul><p>我们在source下的_post文件夹里编写我们需要发布的文档, 然后通过hexo命令(<code>hexo g</code>)将它们转化为可以查看的HTML网页写入public文件夹. 接着就已经可以用本机作为服务器查看网页了(<code>hexo s</code>).</p><h3 id="b-部署到服务器">b) 部署到服务器</h3><p>生成的网站我们当然希望别人能够在互联网上面看到, 这就要求我们拥有一个彻夜运行的服务器, 并且允许所有人访问. 我们这里采用的是gitee, github, coding此类代码协作平台的静态网站业务, 这项业务允许我们把任意的代码上传, 由此生成静态网站并分配域名. 这样, 别人就可以通过此域名访问我们的网站了.</p><p>网站的部署, 说白了就是把public文件夹中的内容上传到代码仓库(<code>hexo d</code>). 当然, 要完成这项工作, 需要事先将本机与代码托管平台进行连接. 为了避免每次输入账号密码, 我们采用SSH公钥的方式让代码托管平台认识到我们这台计算机是可以信任的.</p><h3 id="c-多人协作">c) 多人协作</h3><p>使用git来进行版本控制. 基本思路是使用两个仓库nju2019mathtalk和nju2019mathtalk_code.</p><p>nju2019mathtalk存放我们生成的静态网站, 由hexo deploy时自动部署, 无需特殊人为干预</p><p>nju2019mathtalk_code存放我们所有代码文件, 每个人编辑之前必须记得从远端克隆仓库(或者拉取), 以保证使用的是最新版本. 然后在修改完成后将仓库push到远端.</p><p>注: 如果两个人同时进行修改, 并且修改的是同一文件的同一行, push的时候就会报错. 这时候在VSCode中可以查看不同版本的比较, 可以选择保留哪一个版本(不过要和对方商量一下, 不要擅做主张哦)</p><h2 id="准备工作">准备工作</h2><ul class="task-list"><li><input type="checkbox" disabled>安装git</li><li><input type="checkbox" disabled>安装Node.js</li><li><input type="checkbox" disabled>安装hexo(在node.js中安装)</li><li><input type="checkbox" disabled>安装typora并配置</li></ul><h3 id="安装hexo">安装hexo</h3><p>安装hexo命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -g hexo</span><br></pre></td></tr></table></figure><h3 id="修改typora配置">修改typora配置</h3><p>打开latex行间公式</p><p>修改图片默认保存文件夹的名字为文件名</p><h2 id="正式搭建">正式搭建</h2><h3 id="初始化hexo">初始化hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure><h3 id="连接上gitee">连接上gitee</h3><p><strong>(1)创建SSH</strong></p><p>在博客根目录中进入gitbash</p><ul><li>回到gitbash中，配置git账户信息（YourName和YourEail都替换成你自己的）：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"YourName"</span></span><br><span class="line">$ git config --global user.email <span class="string">"YourEmail"</span></span><br></pre></td></tr></table></figure><figure><img src="/junblog/2021/01/20/hexo%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B%20-%20BY%20HJY/image-20210119173245944.png" alt="image-20210119173245944"><figcaption aria-hidden="true">image-20210119173245944</figcaption></figure><p>直接进入gitbash</p><ul><li>在gitbash中输入：<code>ssh-keygen -t rsa -C "youremail@example.com"</code>，生成ssh。找到<code>id_rsa.pub</code>文件的内容, 在<code>C:\Users\username\.ssh</code>文件夹内</li></ul><figure><img src="/junblog/2021/01/20/hexo%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B%20-%20BY%20HJY/image-20210119155655116.png" alt="image-20210119155655116"><figcaption aria-hidden="true">image-20210119155655116</figcaption></figure><p><strong>(2) 修改_config.yml的一些配置</strong></p><ul><li>用编辑器打开你的blog项目，修改<code>_config.yml</code>文件的一些配置(冒号之后都是有一个半角空格的)：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@gitee.com:heliumhe&#x2F;nju19mathtalk.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><ul><li>回到gitbash中，进入你的blog目录，分别执行以下命令：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>注：hexo 3.0把服务器独立成个别模块，需要单独安装：<code>npm i hexo-server</code>。</p><ul><li>打开浏览器输入：<code>http://localhost:4000</code></li><li>接着你就可以遇见天使的微笑了~</li></ul><blockquote><p>deploy的时候如果遇到如下错误:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br><span class="line">ERROR Deployer not found: git</span><br></pre></td></tr></table></figure><p>就执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后重新deploy</p></blockquote><p><strong>(3) 上传到gitee</strong></p><ul><li>先安装一波：<code>npm install hexo-deployer-git --save</code>（这样才能将你写好的文章部署到gitee服务器上并让别人浏览到）</li><li>执行命令(建议每次都按照如下步骤部署)：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo server     (可以在部署前在本地查看)</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><blockquote><p>注: 可能出现的错误解决方案</p><p>补全缺失的环境(适用于node_modules里面内容不全): 在网站文件夹下使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>安装stylus渲染器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -S hexo-renderer-stylus</span><br></pre></td></tr></table></figure><p>安装hexo的mathjax渲染器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-filter-mathjax</span><br></pre></td></tr></table></figure></blockquote><h2 id="如何发布文章">如何发布文章</h2><p>如果不考虑多人协作问题, 发布文章很简单. 最简单(但不太规范的方式): 直接使用markdown写作, 然后复制到post文件夹, 加上YAML头部信息区, 然后执行那三个命令, 最后到gitee代码仓库中找到静态网站, 按一下更新即可.</p><p>最安全的方法:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一步: </span></span><br><span class="line"><span class="comment">## a.较安全的思路: 删除nju2019mathtalk_code整个文件夹, 从云端clone整个文件夹(在外层文件夹里面操作)</span></span><br><span class="line">$ git <span class="built_in">clone</span> git@gitee.com:heliumhe/nju2019mathtalk_code.git</span><br><span class="line"></span><br><span class="line"><span class="comment">## b.一般的思路: 使用git pull(在里层文件夹下面操作), 如果出现conflict, 在VSCode里面手动解决冲突(accept all incoming)</span></span><br><span class="line">$ git pull origin master</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二步: 用hexo生成网页(nju2019mathtalk_code文件夹内)</span></span><br><span class="line">$ hexo clean</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo server</span><br><span class="line">$ hexo deploy</span><br><span class="line"><span class="comment"># 注: 如果deploy不成功,可能需要手工删除.deploy_git文件夹</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三步: 在里层文件夹(nju2019mathtalk_code)里面执行</span></span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">"这里填修改了什么"</span></span><br><span class="line">$ git push origin master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第四步: 在gitee仓库里对静态网站进行部署的更新</span></span><br></pre></td></tr></table></figure><blockquote><p>注: git push 操作常常会出现如下错误</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br><span class="line"></span><br><span class="line">fatal: HttpRequestException encountered.</span><br><span class="line">An error occurred <span class="keyword">while</span> sending the request.</span><br><span class="line">Username <span class="keyword">for</span> <span class="string">'https://github.com'</span>: cherispanty</span><br><span class="line">To https://github.com/cherispanty/demo.git</span><br><span class="line">! [rejected]        master -&gt; master (fetch first)</span><br><span class="line">error: failed to push some refs to <span class="string">'https://github.com/cherispanty/demo.git'</span></span><br><span class="line">hint: Updates were rejected because the remote contains work that you <span class="keyword">do</span></span><br><span class="line">hint: not have locally. This is usually caused by another repository pushing</span><br><span class="line">hint: to the same ref. You may want to first integrate the remote changes</span><br><span class="line">hint: (e.g., <span class="string">'git pull ...'</span>) before pushing again.</span><br><span class="line">hint: See the <span class="string">'Note about fast-forwards'</span> <span class="keyword">in</span> <span class="string">'git push --help'</span> <span class="keyword">for</span> details.</span><br></pre></td></tr></table></figure><p>原因是我的这个版本不是服务器上最新的版本，恰巧我本地的代码和远程仓库的代码在同一个文件的同一行做了修改，因此产生了冲突，这是我们应该先使用git pull命令更新最新的代码再上传。</p><p>pull一下，发现产生了冲突：</p><p>如何解决？打开冲突的文件，删除不必要的部分（不要乱删别人的代码，最好和别人协商一下），保存退出文件</p><p>再add，commit，push。（注意commit操作不要加文件名）(此过程中自动进入merge模式)</p></blockquote><blockquote><p>git简单教程: https://www.bootcss.com/p/git-guide/</p></blockquote><h2 id="利用git同步代码">利用git同步代码</h2><h3 id="初始化">初始化</h3><p>配置git账户信息完成后</p><p>输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><p>来完成初始化工作</p><h3 id="添加推送源">添加推送源</h3><p>现在继续在终端上输入如下命令，增加对我们github上创建的仓库的管理。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@gitee.com:heliumhe/nju2019mathtalk_code.git</span><br></pre></td></tr></table></figure><h3 id="当本地没有仓库的副本时-将远程仓库克隆clone下来">当本地没有仓库的副本时, 将远程仓库克隆clone下来</h3><p>然后使用clone命令, 把远程仓库内容克隆到本地</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@gitee.com:heliumhe/nju2019mathtalk_code.git</span><br></pre></td></tr></table></figure><p>(以后每次更新内容时: 先删除, 再克隆, 然后修改文件, 部署, 推送到远程分支)</p><h3 id="把仓库内容同步到本地pull">把仓库内容同步到本地pull</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull git@gitee.com:heliumhe/nju2019mathtalk_code.git</span><br></pre></td></tr></table></figure><h3 id="把本地内容同步到仓库add-commit-push">把本地内容同步到仓库add, commit, push</h3><ul><li>首先执行增加命令，如下：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add .     （这后面是一个英文的句号）</span><br></pre></td></tr></table></figure><p>add后面加了一个点，是想要提交所有文件，如果想提交指定的文件，可以写文件名.</p><ul><li>执行完增加命令后，要执行提交命令，如下：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit –m “这里写下你自己的记录本次提交内容的信息”</span><br></pre></td></tr></table></figure><p>-m后面跟提示信息，这个提示信息是一定要写的，不仅是规则，同时也方便我们记录我们提交的过程，写清晰为什么提交或修改了什么是非常有用的</p><ul><li>提交完成后，我们就要把它推送到远程仓库上去了，命令如下：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push git@gitee.com:heliumhe/nju2019mathtalk_code.git</span><br></pre></td></tr></table></figure><p>这样就完成了我们要做的所有任务</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;写在前面&lt;/h2&gt;
&lt;p&gt;我们这里采用的是hexo工具来生成博客网站的方案, 我们简单介绍一下它的基本构架.&lt;/p&gt;
&lt;p&gt;整个方案分为三大部分: 其一是博客本身, 其二是部署到服务器, 其三是多人协作.&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="https://heliumhe.gitee.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="Web开发" scheme="https://heliumhe.gitee.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Web" scheme="https://heliumhe.gitee.io/tags/Web/"/>
    
      <category term="Hexo" scheme="https://heliumhe.gitee.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>复制文件时&quot;无法读取源文件或磁盘&quot;的解决方案记录</title>
    <link href="https://heliumhe.gitee.io/2020/09/16/%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6%E6%97%B6%E6%97%A0%E6%B3%95%E8%AF%BB%E5%8F%96%E6%BA%90%E6%96%87%E4%BB%B6%E6%88%96%E7%A3%81%E7%9B%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://heliumhe.gitee.io/2020/09/16/%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6%E6%97%B6%E6%97%A0%E6%B3%95%E8%AF%BB%E5%8F%96%E6%BA%90%E6%96%87%E4%BB%B6%E6%88%96%E7%A3%81%E7%9B%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</id>
    <published>2020-09-16T08:50:37.000Z</published>
    <updated>2020-09-18T05:16:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>一段时间以前电脑上某些特定的文件开始出现无法复制、剪切的情况。一旦进行复制、剪切的操作，速度在某点处降到几乎为0，复制操作卡死，无法暂停或取消，2-3 min 后，系统弹出提示框，“无法读取源文件或磁盘”。</p><a id="more"></a><p>具体情况见下图</p><figure><img src="/junblog/2020/09/16/%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6%E6%97%B6%E6%97%A0%E6%B3%95%E8%AF%BB%E5%8F%96%E6%BA%90%E6%96%87%E4%BB%B6%E6%88%96%E7%A3%81%E7%9B%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/bandicam%202020-09-16%2013-05-55-274.mp4_20200916_163624.408%20-%201.jpg" alt="复制时突然降速"><figcaption aria-hidden="true">复制时突然降速</figcaption></figure><figure><img src="/junblog/2020/09/16/%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6%E6%97%B6%E6%97%A0%E6%B3%95%E8%AF%BB%E5%8F%96%E6%BA%90%E6%96%87%E4%BB%B6%E6%88%96%E7%A3%81%E7%9B%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/bandicam%202020-09-16%2013-05-55-274.mp4_20200916_163916.105.jpg" alt="提示无法读源文件或磁盘"><figcaption aria-hidden="true">提示无法读源文件或磁盘</figcaption></figure><p>据此进行如下猜测：</p><ul><li>文件损坏</li><li>磁盘有错误</li><li>文件系统错误</li></ul><p>下面一一排除。文件可以正常打开，说明文件应该没有损坏。接着在资源管理器中选择该磁盘，右键属性-工具-检查磁盘，结果未发现错误。</p><p>接着使用命令行 <code>chkdsk E: /f</code> 检查磁盘并修复错误，显示无错误</p><p><img src="/junblog/2020/09/16/%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6%E6%97%B6%E6%97%A0%E6%B3%95%E8%AF%BB%E5%8F%96%E6%BA%90%E6%96%87%E4%BB%B6%E6%88%96%E7%A3%81%E7%9B%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/微信图片_20200916164640-1600246095317.jpg"></p><p>那么怎么办呢？我们更进一步，输入命令<code>chkdsk E: /R</code> . 该命令执行相当缓慢，两个小时后我终于看到了结果。</p><p><img src="/junblog/2020/09/16/%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6%E6%97%B6%E6%97%A0%E6%B3%95%E8%AF%BB%E5%8F%96%E6%BA%90%E6%96%87%E4%BB%B6%E6%88%96%E7%A3%81%E7%9B%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/image-20200916165152444.png"></p><p>虽然提示出现未指定的错误，但我发现这时文件已经可以复制了。具体是什么原因造成了错误仍尚不清楚。</p><p>借此机会，我了解了以下chkdsk检查磁盘的用法：Chkdsk命令是用来检查磁盘并且显示状态报告的。</p><p>用法如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CHKDSK [volume[[path]filename]]] [/F] [/V] [/R] [/X] [/I] [/C] [/L[:size]]</span><br></pre></td></tr></table></figure><ul><li><code>volume</code> 指定驱动器(后面跟一个冒号)、装入点或卷名。</li><li><code>filename</code> 仅用于 FAT/FAT32: 指定要检查是否有碎片的文件。</li><li><code>/F</code> 修复磁盘上的错误。</li><li><code>/V</code> 在 FAT/FAT32 上: 显示磁盘上每个文件的完整路径和名称。在 NTFS 上: 如果有清除消息，将其显示。</li><li><code>/R</code> 查找不正确的扇区并恢复可读信息(隐含 <code>/F</code>)。</li><li><code>/L:size</code> 仅用于 NTFS: 将日志文件大小改成指定的 KB 数。如果没有指定大小，则显示当前的大小。</li><li><code>/X</code> 如果必要，强制卷先卸下。卷的所有打开的句柄就会无效(隐含 <code>/F</code>)。</li><li><code>/I</code> 仅用于 NTFS: 对索引项进行强度较小的检查。</li><li><code>/C</code> 仅用于 NTFS: 跳过文件夹结构的循环检查。</li><li><code>/I</code> 和 <code>/C</code> 命令行开关跳过卷的某些检查，减少运行 Chkdsk 所需的时间。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一段时间以前电脑上某些特定的文件开始出现无法复制、剪切的情况。一旦进行复制、剪切的操作，速度在某点处降到几乎为0，复制操作卡死，无法暂停或取消，2-3 min 后，系统弹出提示框，“无法读取源文件或磁盘”。&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="https://heliumhe.gitee.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="疑难杂症" scheme="https://heliumhe.gitee.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"/>
    
    
      <category term="硬盘" scheme="https://heliumhe.gitee.io/tags/%E7%A1%AC%E7%9B%98/"/>
    
      <category term="疑难杂症" scheme="https://heliumhe.gitee.io/tags/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"/>
    
  </entry>
  
  <entry>
    <title>讨论：是不是有误？——关于二项分布与负二项分布的关系</title>
    <link href="https://heliumhe.gitee.io/2020/08/28/%E8%AE%A8%E8%AE%BA%EF%BC%9A%E6%98%AF%E4%B8%8D%E6%98%AF%E6%9C%89%E8%AF%AF%EF%BC%9F%E2%80%94%E2%80%94%E5%85%B3%E4%BA%8E%E4%BA%8C%E9%A1%B9%E5%88%86%E5%B8%83%E4%B8%8E%E8%B4%9F%E4%BA%8C%E9%A1%B9%E5%88%86%E5%B8%83%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
    <id>https://heliumhe.gitee.io/2020/08/28/%E8%AE%A8%E8%AE%BA%EF%BC%9A%E6%98%AF%E4%B8%8D%E6%98%AF%E6%9C%89%E8%AF%AF%EF%BC%9F%E2%80%94%E2%80%94%E5%85%B3%E4%BA%8E%E4%BA%8C%E9%A1%B9%E5%88%86%E5%B8%83%E4%B8%8E%E8%B4%9F%E4%BA%8C%E9%A1%B9%E5%88%86%E5%B8%83%E7%9A%84%E5%85%B3%E7%B3%BB/</id>
    <published>2020-08-28T13:15:23.000Z</published>
    <updated>2020-08-28T14:28:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在阅读<em>Basic Probability Theory with Applications</em>一书, 在二项分布和负二项分布处耽搁了许久. 下图所示内容便是使我疑惑的地方.</p><a id="more"></a><figure><img src="/junblog/2020/08/28/%E8%AE%A8%E8%AE%BA%EF%BC%9A%E6%98%AF%E4%B8%8D%E6%98%AF%E6%9C%89%E8%AF%AF%EF%BC%9F%E2%80%94%E2%80%94%E5%85%B3%E4%BA%8E%E4%BA%8C%E9%A1%B9%E5%88%86%E5%B8%83%E4%B8%8E%E8%B4%9F%E4%BA%8C%E9%A1%B9%E5%88%86%E5%B8%83%E7%9A%84%E5%85%B3%E7%B3%BB/Basic%20Probability%20Theory_Binomial%20and%20negative%20binomial%20distribution.png" alt="An Excerpt From Basic Probability Theory with Applications"><figcaption aria-hidden="true">An Excerpt From Basic Probability Theory with Applications</figcaption></figure><p>注: 以下全部按照书中对于负二项分布的定义, 即随机变量<span class="math inline">\(X\)</span>表示第<span class="math inline">\(r\)</span>次伯努利试验成功时的总试验次数.</p><p>此处的两个公式意在阐明二项分布与负二项分布的联系.</p><p><strong>第一个公式</strong>不论从代数的角度还是从概率的实际意义都是容易说明的. 我们先从代数的角度说明一下.</p><p><strong>• 代数角度:</strong> 由于<span class="math inline">\(X\sim\mathrm{NB}(r,p)\)</span>, 因此 <span class="math display">\[P[X=x]=\binom{x-1}{r-1}p^{r}q^{x-r}\quad,q:=1-p\]</span> 而 <span class="math display">\[P[\mathrm{B}(x-1,p)=r-1]=\binom{x-1}{r-1}p^{r-1}q^{x-r}\]</span> 因此 <span class="math display">\[P[X=x]=P[\mathrm{B}(x-1,p)=r-1]p\]</span></p><p><strong>• 概率的实际意义:</strong> 我们来设置一个情境. 有一个狙击手进行射击, 每一发子弹命中的概率始终为<span class="math inline">\(p\)</span>. 左边的<span class="math inline">\(P[X=x]\)</span>表示要求该狙击手命中<span class="math inline">\(r\)</span>次, 结果他恰射击了<span class="math inline">\(x\)</span>次以后才完成目标的概率. 显然, 最后一次射击他命中了, 否则<span class="math inline">\(x-1\)</span>次的时候他已经完成目标了, 最后一次命中的概率为<span class="math inline">\(p\)</span>; 前面的<span class="math inline">\(x-1\)</span>次他只要任意命中<span class="math inline">\(r-1\)</span>次即可, 命中次数服从二项分布<span class="math inline">\(\mathrm{B}(x-1,p)\)</span>, 故概率为<span class="math inline">\(P[\mathrm{B}(x-1,p)=r-1]\)</span>. 所以左边的概率就等于<span class="math inline">\(P[\mathrm{B}(x-1,p)=r-1]p\)</span>.</p><p>但是, <strong>第二个公式</strong>似乎有些让人摸不着头脑. 我们按照<strong>概率的实际意义</strong>分析一下. 我们仍然设置这个情境: 狙击手进行射击, 每一发子弹命中的概率始终为<span class="math inline">\(p\)</span>. 左边的<span class="math inline">\(P[\mathrm{NB}(r,p)\leq x]\)</span>表示要求该狙击手命中<span class="math inline">\(r\)</span>次, 结果他在<span class="math inline">\(x\)</span>发子弹之内完成了任务的概率; 这与给狙击手<span class="math inline">\(x\)</span>发子弹射击, 结果他命中次数不少于<span class="math inline">\(r\)</span>次是等价的, 这用数学语言描述为<span class="math inline">\(P[\mathrm{B}(x,p)\geq r]\)</span>. 于是我们得到 <span class="math display">\[P[\mathrm{NB}(r,p)\leq x]=P[\mathrm{B}(x,p)\geq r].\]</span> 可是书中给出的公式却为<span class="math inline">\(P[\mathrm{NB}(r,p)\leq x]=P[\mathrm{B}(r+x,p)\geq r]\)</span>, 这是怎么一回事?</p><p>我们尝试用代数的方法进行解释, 如果我们得到的公式正确, 那么我们应该能够证明 <span class="math display">\[\sum_{k=r}^{x}\binom{k-1}{r-1}p^{r}q^{k-r}=\sum_{k=r}^{x}\binom{x}{k}p^{k}q^{x-k}\]</span></p><p>使用<strong>纯代数的方法</strong>可以这样证明(由别人给出的证法):</p><p>先证<span class="math inline">\(r=1\)</span>的情形, <span class="math display">\[\text{左边}=p\sum_{k=r}^{x}q^{k-1}=p\frac{1-q^{x}}{1-q}=1-q^{x}\]</span> <span class="math display">\[\text{右边}=\sum_{k=1}^{x}\binom{x}{k}p^{k}q^{x-k}=\left[\sum_{k=0}^{x}\binom{x}{k}p^{k}q^{x-k}\right]-q^{x}=(p+q)^{x}-q^{x}=1-q^{x}\]</span></p><p>对于任意<span class="math inline">\(r\in\mathbb{N}^{*}\)</span>的情形, 我们有 <span class="math display">\[\sum_{k=1}^{x}\binom{k-1}{r-1}p^{r}q^{k-r}=\sum_{k=1}^{x}\binom{x}{k}p^{k}q^{x-k}\]</span> <span class="math display">\[\sum_{k=1}^{r}\binom{k-1}{r-1}p^{r}q^{k-r}=\sum_{k=1}^{r}\binom{x}{k}p^{k}q^{x-k}\]</span> 两式相减即得结果.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在阅读&lt;em&gt;Basic Probability Theory with Applications&lt;/em&gt;一书, 在二项分布和负二项分布处耽搁了许久. 下图所示内容便是使我疑惑的地方.&lt;/p&gt;
    
    </summary>
    
    
      <category term="数学" scheme="https://heliumhe.gitee.io/categories/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="概率论" scheme="https://heliumhe.gitee.io/categories/%E6%95%B0%E5%AD%A6/%E6%A6%82%E7%8E%87%E8%AE%BA/"/>
    
    
      <category term="概率论" scheme="https://heliumhe.gitee.io/tags/%E6%A6%82%E7%8E%87%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>一份不知是否应该称为&quot;关于&quot;的博客规划</title>
    <link href="https://heliumhe.gitee.io/2020/08/24/%E4%B8%80%E4%BB%BD%E4%B8%8D%E7%9F%A5%E6%98%AF%E5%90%A6%E5%BA%94%E8%AF%A5%E7%A7%B0%E4%B8%BA_%E5%85%B3%E4%BA%8E_%E7%9A%84%E5%8D%9A%E5%AE%A2%E8%A7%84%E5%88%92/"/>
    <id>https://heliumhe.gitee.io/2020/08/24/%E4%B8%80%E4%BB%BD%E4%B8%8D%E7%9F%A5%E6%98%AF%E5%90%A6%E5%BA%94%E8%AF%A5%E7%A7%B0%E4%B8%BA_%E5%85%B3%E4%BA%8E_%E7%9A%84%E5%8D%9A%E5%AE%A2%E8%A7%84%E5%88%92/</id>
    <published>2020-08-24T13:15:12.000Z</published>
    <updated>2020-08-27T13:37:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>当初我建立此个人博客的时候，只是由于好奇心和探索欲的驱使，抱着尝尝鲜的态度创建的。网站测试完毕一切正常的时候，我虽热血沸腾，但对这个博客其实还没有一个明确的规划。“关于”页面我不知道要写些什么，于是只是留下了一个建站日期。细心的朋友也许会发现，我的主页只有一个标题，也没有填写网站简介。</p><p>这两天有了一些空闲时间，我决定对博客做一个比较明确的阶段规划。</p><a id="more"></a><h2 id="缘起">缘起</h2><p>自2020年7月4日创建此博客已经有将近两个月了。创建博客的时候其实是怀着"助人自助"的念头：发知识性博客既帮助自己梳理所学内容，形成知识体系，又或许能够帮助偶然路过的后来者。作为一名学生，由于知识能力所限，“助人”当然不能有太大的指望，如果我的文章恰好对你有帮助，那么这是我的荣幸。相比而言，更为实际的想法还是自助。</p><p>以写博客来辅助自己学习，或许会是一种有效的方式。它可以有以下的作用：</p><ol type="1"><li>输出的过程是一种相对高效的学习方式</li><li>可以把零碎的知识串联，搭建知识高速公路</li><li>相比纸质笔记本而言，便于分类收集</li><li>以后遗忘时可以方便地查看</li></ol><p>但是，它也会有以下的负面影响：</p><ol type="1"><li>费时费力，写一篇博文的时间可以用来干好些事情了。（尤其是输入大量数学公式很费时）</li><li>博文数量增多的时候管理起来也有一定挑战</li></ol><p>反思前面一段时间发布的C++系列文章，着实质量不高，变成了复习笔记的记述，而并没有突出脉络，强调重难点与易错点。如果没有写出自己的理解，那么文章还不如不写。于是，我列了一个规划，以约束自己以后发文的内容。</p><h2 id="博客规划">博客规划</h2><p>根据我目前的规划，为了最大化学习效果，我计划按以下方式编写博文：</p><h3 id="博文的主题">博文的主题</h3><p>以应用数学、统计学、计算数学为重点；计算机、程序设计、人工智能为次重点；英语摘录、闲书笔记不定期更新。</p><h3 id="博文的内容">博文的内容</h3><ol type="1"><li><strong>数学方面</strong>：由于逻辑体系已经较为清晰，书上定理都已经分条陈述，故不进行笔记类的知识记述，那样和把书上的内容照搬没啥区别。主要发布：<strong>专题式知识整合、有启发性的题组、数学趣题、在实际生产生活的应用</strong></li><li><strong>计算机方面</strong>：记录最<strong>核心知识脉络、关键点和易错点</strong>。如果知识较为零碎，则进行知识梳理。主要目的是理清主线，抗遗忘。</li><li><strong>其它</strong>：英语主要摘录好句，闲书笔记摘录核心思路与书摘，自己的探究性实践。</li></ol><p>关于内容还要作一点说明：由于输入数学公式的复杂性和设备局限性（难以在移动端输入），我会略过大部分基础知识，仅记录那些有启发性的、有趣的或者是有应用的数学内容。数学类的文章在数量上很可能会少于计算机类，但由于我的主要学习方向是数学，数学类的内容在深度上一定会更深一些。</p><h3 id="写作的方式">写作的方式</h3><p>预计在白天学习，非计算机内容在纸上记录要点，晚上整理一天的学习成果，正好复习；计算机内容因为多数会涉及代码，直接使用手机随学随记。</p><h3 id="错误的更正">错误的更正</h3><p>知识类或技术性博客，笔误或者由于知识水平所限而出现的错误在所难免。如果读者发现影响不大的笔误，在评论区评论即可，这样可以提醒其他读者注意存在笔误。但是目前使用的Valine评论区有一大弊端，我可以收到大家的评论，却难以区分是哪一篇文章的评论。因此，如果的确有问题向笔者反馈，欢迎点击页面最下方的邮件小按钮给我发送邮件，我将视情况对文章进行修改。</p><h2 id="致谢">致谢</h2><p>这个博客网站是我一手搭建的，并现在由我独立运营。页面的生成用的是Hexo工具，博客布局使用的是Volantis主题，在此我对其官方团队表示感谢！</p><p>本网站永久域名为 <a href="https://junyuanhe.github.io/" target="_blank" rel="noopener">https://junyuanhe.github.io/</a> （注意是https，使用http协议无效）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当初我建立此个人博客的时候，只是由于好奇心和探索欲的驱使，抱着尝尝鲜的态度创建的。网站测试完毕一切正常的时候，我虽热血沸腾，但对这个博客其实还没有一个明确的规划。“关于”页面我不知道要写些什么，于是只是留下了一个建站日期。细心的朋友也许会发现，我的主页只有一个标题，也没有填写网站简介。&lt;/p&gt;
&lt;p&gt;这两天有了一些空闲时间，我决定对博客做一个比较明确的阶段规划。&lt;/p&gt;
    
    </summary>
    
    
      <category term="关于" scheme="https://heliumhe.gitee.io/categories/%E5%85%B3%E4%BA%8E/"/>
    
    
      <category term="关于" scheme="https://heliumhe.gitee.io/tags/%E5%85%B3%E4%BA%8E/"/>
    
  </entry>
  
  <entry>
    <title>C++程序设计基础(8) - 变量的存储类型</title>
    <link href="https://heliumhe.gitee.io/2020/08/23/C++%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80(8)%20-%20%E5%8F%98%E9%87%8F%E7%9A%84%E5%AD%98%E5%82%A8%E7%B1%BB%E5%9E%8B/"/>
    <id>https://heliumhe.gitee.io/2020/08/23/C++%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80(8)%20-%20%E5%8F%98%E9%87%8F%E7%9A%84%E5%AD%98%E5%82%A8%E7%B1%BB%E5%9E%8B/</id>
    <published>2020-08-23T01:20:12.000Z</published>
    <updated>2020-08-23T01:25:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>先简要介绍程序的内存映像，然后重点介绍C++变量的存储类型, 包括auto类型、static类型、register类型，以及无名变量和多文件程序中的变量与函数使用.</p><a id="more"></a><h2 id="程序的内存映像">程序的内存映像</h2><p>程序运行时，先要将硬盘上的程序代码装载到内存中，然后运行内存中的代码。装载到内存中的程序区域就叫做程序的内存映像。那么，在内存映像中程序是如何存放的呢？</p><p>按存放内容的不同可以分为3个区域：</p><ol type="1"><li>程序区：存放程序指令</li><li>静态存储区：存放永久数据（常量、静态变量、全局变量）</li><li>动态存储区：存放临时数据（动态变量、局部变量）</li></ol><p>其中，如果在局部变量前面加上<code>static</code>前缀，则它变成了静态的局部变量，会存放在静态存储区；如果前缀为<code>auto</code>则为临时数据，存放在动态存储区；如果无前缀则默认为<code>auto</code>前缀。</p><p>如果再细分，可以分为以下区域：</p><ul><li><p>程序区：存放程序指令</p></li><li><p>静态存储区：存放永久数据（常量、静态变量、全局变量）</p><ul><li>常量区</li><li>静态变量区（静态变量、全局变量）</li></ul></li><li><p>动态存储区：存放临时数据（动态变量、局部变量）</p><ul><li>栈区（自动变量）</li><li>堆区（动态变量）</li></ul></li></ul><p>关于栈，还要解释几句。我们把栈形象地比喻为堆盘子。一堆盘子看作一个栈，最下面的盘子称为栈底，地址较大；最上面的盘子称为栈顶，地址较小。放上去一个盘子（存储一个变量）称为入栈或压栈，栈顶上移，地址变小；取出来一个盘子称为出栈，栈顶下移，地址变大。后叠上的盘子只能先取下（后存储的变量只能先取出）。</p><h2 id="变量的存储类型">变量的存储类型</h2><h3 id="auto类型和static类型">auto类型和static类型</h3><p><strong>Attention:</strong></p><p>• 当变量或数组没有给出初值时，静态存储区中的变量默认为0（所占字节全部为0）。也就是说 常量、静态变量、全局变量 未赋初值时默认初值为0。</p><p>当保存临时数据时，初始的数值不确定（残留值或者清为特定字节值）。也就是说，自动变量、动态变量的值是不确定的。</p><p>• 函数参数是自动数据（auto类型）</p><p>• 静态变量的定义和赋初值语句不论在程序的什么位置都会在主函数之前执行，且只会执行一次（运行主函数时会跳过该语句）。静态局部变量可以突破作用域的限制，在整个文件中都可使用。（故可以记录函数调用次数）</p><p>• static修饰的全局变量和函数只能在本文件中访问，不能在其它文件中访问。</p><h3 id="register类型">register类型</h3><p>在变量定义时，前缀<code>register</code>申请使用CPU的寄存器存储变量（可以提高运行效率）</p><h3 id="无名变量">无名变量</h3><p>• 动态变量是无名变量，可以通过指针调用</p><p>• 函数值也是无名变量，在所在调用语句结束后就撤销该变量。</p><h3 id="多文件程序中的变量或函数">多文件程序中的变量或函数</h3><p>• 一个程序可以由多个源文件构成，但是一个程序只能由一个<code>main</code>函数。</p><p>• 全局变量和函数可以跨文件使用（局部变量不可以）</p><p>• 在全局变量或函数之前加<code>static</code>关键字可以限制变量跨文件使用</p><p>• 一个文件定义了全局变量或者函数，其它文件对这些全局变量作extern变量说明后即可使用</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先简要介绍程序的内存映像，然后重点介绍C++变量的存储类型, 包括auto类型、static类型、register类型，以及无名变量和多文件程序中的变量与函数使用.&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="https://heliumhe.gitee.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="C++" scheme="https://heliumhe.gitee.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/C/"/>
    
    
      <category term="C++" scheme="https://heliumhe.gitee.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++程序设计基础(7) - 作用域</title>
    <link href="https://heliumhe.gitee.io/2020/08/22/C++%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80(7)%20-%20%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <id>https://heliumhe.gitee.io/2020/08/22/C++%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80(7)%20-%20%E4%BD%9C%E7%94%A8%E5%9F%9F/</id>
    <published>2020-08-22T13:34:12.000Z</published>
    <updated>2020-08-22T14:14:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>C++作用域</p><a id="more"></a><figure><img src="/junblog/2020/08/22/C++%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80(7)%20-%20%E4%BD%9C%E7%94%A8%E5%9F%9F/Cpp程序设计7%20作用域.png" alt="C++程序设计7 作用域"><figcaption aria-hidden="true">C++程序设计7 作用域</figcaption></figure><p><strong>特别注意:</strong></p><ol type="1"><li><p>同一层级的作用域不允许出现同名的标识符。重名的标识符必须在不同层级出现，内层标识符隐藏外层标识符。</p></li><li><p>同一层级可以进行函数重载。不同层级下，<strong>内层函数说明隐藏一切外层函数（不论参数表是否相同）的说明</strong>。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C++作用域&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="https://heliumhe.gitee.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="C++" scheme="https://heliumhe.gitee.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/C/"/>
    
    
      <category term="C++" scheme="https://heliumhe.gitee.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++程序设计基础(6) - 函数</title>
    <link href="https://heliumhe.gitee.io/2020/08/22/C++%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80(6)%20-%20%E5%87%BD%E6%95%B0/"/>
    <id>https://heliumhe.gitee.io/2020/08/22/C++%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80(6)%20-%20%E5%87%BD%E6%95%B0/</id>
    <published>2020-08-22T11:32:47.000Z</published>
    <updated>2020-08-22T13:27:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>C++函数的核心知识</p><a id="more"></a><h2 id="核心知识自测">核心知识(自测)</h2><h3 id="函数的定义">函数的定义</h3><ol type="1"><li>函数定义、函数调用、函数说明的形式</li><li>函数定义的位置（可不可以放在另一个函数的函数体内？不可以）。函数说明什么时候可以省略？（先定义，后使用；如果要在定义之前使用，就必须添加函数说明。）函数说明的位置（可不可以放在另一个函数的函数体内？可以）</li><li>函数返回值的写法？void类型函数返回值的写法？函数返回值何种情况可以省略？（void类型函数，且return语句是函数体的最后一个语句）</li><li><code>rand()</code>函数定义所在的头文件?(<code>&lt;cstdlib&gt;</code>).</li><li><code>clock()</code>函数定义所在的头文件?(<code>&lt;ctime&gt;</code>). <code>clock()</code>函数的作用?(返回程序开始至此句经过的毫秒数).</li></ol><h3 id="函数的参数传递">函数的参数传递</h3><ol type="1"><li>函数的三种参数传递？(值传递、地址传递、引用传递)。描述三种参数传递的过程。</li><li>形参为普通变量，在函数体内改变变量值，实参的值会改变吗？（不会）。形参为数组，在函数体内改变数组元素，实参数组的值会改变吗？（会）。试解释原因。（形参数组的本质是形参指针变量）</li><li>若定义了<code>double a[10];</code>则执行<code>sizeof(a)</code>返回的值?(80). 有函数<code>void f(double a[], int n){ cout &lt;&lt; sizeof(a) &lt;&lt; endl; }</code>中执行<code>f(a, 10);</code>的值?(4, 同时可能会有Warning). 为什么?(返回的是<code>double*</code>类型的大小)</li><li>函数参数的传递次序? (从最后一个参数到第一个参数依次传递)</li></ol><h3 id="递归函数函数的重载含默认参数的函数">递归函数、函数的重载、含默认参数的函数</h3><ol type="1"><li>递归函数的设计?(递归终止点和递归调用).</li><li>写出求解汉诺塔(河内塔)问题的函数.</li><li>什么叫重载函数？（同一个函数名，使用不同的参数列表）</li><li>C++是否允许同名函数有相同的参数列表但函数类型不同？（不允许）</li><li>将默认参数函数<code>void f(int x, int y = 3){ cout &lt;&lt; x &lt;&lt; "\t" &lt;&lt; y &lt;&lt; endl; }</code>改写成重载函数以实现同样效果.</li><li>如何给出函数的默认参数? (默认参数函数通常在函数说明中给出(函数定义中无需给出), 函数给出的默认参数是靠后面的参数.)</li></ol><h3 id="内联函数">内联函数</h3><ol type="1"><li>内联函数与普通函数的最大区别? (直接嵌入代码)</li><li>如何定义内联函数? (在前面加<code>inline</code>关键字)</li><li>内联函数的注意点: 不可出现循环和switch语句, 不能递归, 实际是否嵌入函数由编译器决定.</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C++函数的核心知识&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="https://heliumhe.gitee.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="C++" scheme="https://heliumhe.gitee.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/C/"/>
    
    
      <category term="C++" scheme="https://heliumhe.gitee.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++程序设计基础(5) - 复合类型数据：指针与引用初步</title>
    <link href="https://heliumhe.gitee.io/2020/08/20/C++%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80(5)%20-%20%E5%A4%8D%E5%90%88%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE_%E6%8C%87%E9%92%88%E4%B8%8E%E5%BC%95%E7%94%A8%E5%88%9D%E6%AD%A5/"/>
    <id>https://heliumhe.gitee.io/2020/08/20/C++%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80(5)%20-%20%E5%A4%8D%E5%90%88%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE_%E6%8C%87%E9%92%88%E4%B8%8E%E5%BC%95%E7%94%A8%E5%88%9D%E6%AD%A5/</id>
    <published>2020-08-20T12:01:04.000Z</published>
    <updated>2020-08-21T15:10:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>指针和引用类型的初步介绍, 更深入的内容留到后面再讲.</p><a id="more"></a><h2 id="指针">指针</h2><p><strong>指针就是地址</strong>. 所有的变量都在内存中有一个地址, 通过地址可以使用变量, 我们就把这些地址形象地称为指向变量的指针.</p><h3 id="指针的最基本用法">指针的最基本用法:</h3><p><strong>(1) 指针变量的定义</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">int</span> *p;  <span class="comment">//定义指针变量p, 指向int型变量. 称p为int*类型</span></span><br><span class="line">p = &amp;a;  <span class="comment">//&amp;表示取地址. 此句表明将a的地址赋给p.</span></span><br><span class="line">*p = <span class="number">3</span>;  <span class="comment">//使用p指向的变量</span></span><br></pre></td></tr></table></figure><p>注: 行2中和行4中星号的含义不同. 行2中是指针变量的定义, 星号表示该变量是一个指针变量, 即<code>int*</code>类型, 等价的写法是<code>int* p</code>(空格位置不影响), 但是我们提倡将<code>*</code>跟随变量名而不是类型名. 行4中星号表示取指针指向的变量.</p><p><strong>(2) 一次定义多个指针变量, 同时定义变量和指针</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a, *p = &amp;a, *q, b, *r = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>在这里, <code>a</code>, <code>b</code>为int型变量. <code>p</code>为int型指针, 指向<code>a</code>, 注意这里初值<code>&amp;a</code>赋给<code>p</code>, 而不是赋给<code>*p</code>, 等价于<code>int *p; p = &amp;a;</code>. <code>q</code>为int型指针, 没有指向任何变量, 称为野指针, 不可使用<code>*p</code>. <code>r</code>是0指针，不指向任何变量。使用0指针指向的变量是非法的。</p><p><strong>(3) 指针变量的指向类型不同, 使用结果也不同</strong></p><p>我们来看下面例子:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> f = <span class="number">5.0f</span>, *pf = &amp;f;</span><br><span class="line"><span class="keyword">int</span> *pi = (<span class="keyword">int</span> *) &amp;f;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *pf &lt;&lt; <span class="string">"\t"</span> &lt;&lt; *pi &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//结果: 51084227584</span></span><br></pre></td></tr></table></figure><p>这里, <code>pf</code>和<code>pi</code>保存的地址是相同的, 指向同一块二进制数据, 但是它们将这部分二进制数分别按int型解释和float型解释, 所以得到的结果不一样.</p><h3 id="指针的算术运算">指针的算术运算</h3><p>C++的指针可以进行算术运算, 但是指针的算术运算仅限于</p><p>①指针加/减一个整数, 表示以指向类型的存储单元为单位, 向前或向后移动若干个元素的位置. 如double型8个字节为一个单元, 若有定义<code>double a, *p = &amp;a;</code>则<code>p+1</code>表示的是<code>p</code>后面8个字节的位置.</p><p>②两个同类型的指针相减, 表示以指向类型的存储单元为单位, 两个地址之间相差的元素个数</p><h3 id="用指针处理数组">用指针处理数组</h3><p>指针的算术运算常常用来处理数组</p><p>在<strong>绝大多数情况下，数组名表示数组的首地址</strong>(数组第一个元素的地址)。即若定义<code>int a[]</code>则<code>a</code>等价于<code>&amp;a[0]</code>。</p><p>但是，需要注意的是，这里有<strong>两个例外: 第一个是<code>sizeof()</code>，第二个是取地址<code>&amp;</code></strong>。在这两种情况之下，我们不能把数组名等同于数组的首地址。</p><p>假设我们已经定义了<code>int a[10]</code>，那么</p><p>• <code>sizeof(a)</code>返回的是<strong>整个数组的长度</strong>40，而不是指向数组的指针的长度4。</p><p>• <code>&amp;a</code>得到的是一个<strong>指向数组的指针</strong>，而不是一个指向指针常量的指针。这里再要特别注意，是指向数组的指针，而不是指向数组第一个元素的指针。即<code>&amp;a</code>和<code>&amp;a+1</code>相差的是整个数组的长度，而<code>a</code>和<code>a+1</code>相差的只是一个数组元素的长度。</p><p>扫描数组的n个元素并进行处理有一下几种方式:</p><p>• 下标方式: <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="comment">//处理a[i]，或者处理*(a+i)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>• 指针方式: <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (p = a, <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="comment">//处理*p</span></span><br><span class="line"><span class="comment">//此方法用下标控制循环，用指针处理数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>• 纯指针方式: <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (p = a; p &lt; a + n; p++) &#123;</span><br><span class="line"><span class="comment">//处理*p</span></span><br><span class="line"><span class="comment">//此方法循环控制和数据处理均使用指针</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>利用好数组元素首地址这个指针常量，有时可以使得代码更加简洁。</p><h3 id="动态变量和动态数组">动态变量和动态数组</h3><p>用<code>new</code>运算符可以开辟一些临时变量和临时数组，不再使用时可以通过<code>delete</code>来释放空间。这样开辟的变量称为动态变量，开辟的数组称为动态数组它们没有名字，因此只能通过指针来使用它们。</p><p>动态数组的一个优势是它的长度可以使用变量给出(如<code>int *p, n=10; p = new int[n];</code>，而普通数组只可以使用常量<code>int a[10];</code>。这就为很多情况下程序的设计提供了方便。</p><p>下面是动态数组使用的一个例子 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">double</span> *p = <span class="keyword">new</span> <span class="keyword">double</span>[n];  <span class="comment">// 动态数组的定义</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) p[i] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">cout</span> &lt;&lt; p[i] &lt;&lt; <span class="string">"\t"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">delete</span>[] p;  <span class="comment">//释放动态数组p</span></span><br></pre></td></tr></table></figure></p><h2 id="引用">引用</h2><p>引用就是取别名.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a; <span class="keyword">int</span> &amp;b = a; <span class="keyword">int</span> &amp;c = b;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">5</span>;  <span class="comment">//等效于int a = 5;也等效于int c = 5;</span></span><br></pre></td></tr></table></figure><p>如上例, 我们先对<code>a</code>取了一个别名<code>b</code>, 于是<code>a</code>和<code>b</code>表示的是同一个变量. 我们接着对<code>b</code>取了一个别名叫<code>c</code>, 则<code>a</code>, <code>b</code>, <code>c</code>都表示同一个变量了. 我们称<code>b</code>, <code>c</code>都是<code>a</code>的引用.</p><p>取了别名后, 别名和原来的名字没有区别.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;指针和引用类型的初步介绍, 更深入的内容留到后面再讲.&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="https://heliumhe.gitee.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="C++" scheme="https://heliumhe.gitee.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/C/"/>
    
    
      <category term="C++" scheme="https://heliumhe.gitee.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++程序设计基础(4) - 复合类型数据：数组</title>
    <link href="https://heliumhe.gitee.io/2020/08/16/C++%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80(4)%20-%20%E5%A4%8D%E5%90%88%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE_%E6%95%B0%E7%BB%84/"/>
    <id>https://heliumhe.gitee.io/2020/08/16/C++%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80(4)%20-%20%E5%A4%8D%E5%90%88%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE_%E6%95%B0%E7%BB%84/</id>
    <published>2020-08-16T14:02:16.000Z</published>
    <updated>2020-08-22T11:36:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>介绍数组和C风格字符串的处理, 以及一些十分常用的数组算法.</p><a id="more"></a><h2 id="一维数组">一维数组</h2><p><strong>• 数组的定义:</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>]; <span class="keyword">double</span> b[<span class="number">20</span>]; <span class="keyword">char</span> c[<span class="number">80</span>];</span><br></pre></td></tr></table></figure><p>数组的大小必须是正的整数类型的常量表达式.</p><p><strong>• 一维数组赋初值:</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;; </span><br><span class="line"><span class="keyword">int</span> a1[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> a2[<span class="number">5</span>] = &#123;<span class="number">1</span>&#125;; <span class="comment">//后面默认初值为0</span></span><br></pre></td></tr></table></figure><p>注意: 如果数组未赋初值, 则数组中元素的值是不确定的(有的编译器会清为特定的值, 有的编译器保留残留值)</p><p><strong>• 计算数组元素个数:</strong> <code>sizeof(a)/sizeof(a[0])</code></p><h2 id="多维数组">多维数组</h2><p><strong>• 多维数组的定义:</strong> <code>int a[2][3][4];</code></p><p><strong>• 多维数组在内存中的存储:</strong> 按<code>a[0][0][0], a[0][0][1], a[0][0][2], a[0][0][3], a[0][1][0], a[0][1][1], a[0][1][2], a[0][1][3], a[0][2][0], ...</code> 依次存放, 占据连续空间</p><p><strong>• 多维数组赋初值:</strong></p><p>​ (1) 按行形式: <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">4</span>][<span class="number">4</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>&#125;,&#123;<span class="number">8</span>&#125;,&#123;<span class="number">0</span>&#125;&#125;; <span class="comment">//每行初值不足补0</span></span><br><span class="line"><span class="keyword">int</span> b[][<span class="number">4</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>&#125;,&#123;<span class="number">8</span>&#125;,&#123;<span class="number">0</span>&#125;&#125;; <span class="comment">//第一维大小可以省略,由初值行数确定. 但第二维大小不可省略.</span></span><br></pre></td></tr></table></figure> ​ (2) 按整体形式: <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">4</span>][<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">9</span>&#125;; <span class="comment">//数据按照内存中存放的顺序依次存储</span></span><br><span class="line"><span class="keyword">int</span> b[][<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">9</span>&#125;; <span class="comment">//第一维大小由初值个数所能构成的行数确定, 此处为2.</span></span><br></pre></td></tr></table></figure></p><h2 id="c风格字符串字符数组">C风格字符串(字符数组)</h2><p><strong>• C风格字符串:</strong> 用字符数组存放并用 '\0' 结束字符串, 用字符串首地址来使用字符串.</p><p><strong>• 赋初值:</strong> 可以按照普通字符数组赋初值的方式(不提倡, 繁琐且容易遗漏串结束标志<code>\0</code>), 通常按照赋字符串初值的方式. 见下例:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> s1[<span class="number">10</span>] = &#123;<span class="string">'H'</span>,<span class="string">'e'</span>,<span class="string">'l'</span>,<span class="string">'l'</span>,<span class="string">'o'</span>&#125;;  <span class="comment">//遗漏了串结束标志</span></span><br><span class="line"><span class="keyword">char</span> s2[] = &#123;<span class="string">'H'</span>,<span class="string">'e'</span>,<span class="string">'l'</span>,<span class="string">'l'</span>,<span class="string">'o'</span>,<span class="string">'\0'</span>&#125;;  <span class="comment">//正确</span></span><br><span class="line"><span class="keyword">char</span> s3[] = <span class="string">"Hello"</span>;  <span class="comment">//与s2的赋值等价</span></span><br></pre></td></tr></table></figure><p><strong>• 字符串的输入输出:</strong> C风格字符串可以直接输入输出, 无需使用循环</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> s[<span class="number">80</span>];</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s;  <span class="comment">//直接输入</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//直接输出</span></span><br></pre></td></tr></table></figure><p>几种输入方式的比较:</p><p>(定义<code>char ch; char s[80];</code>)</p><p><code>cin &gt;&gt; ch;</code> //输入一个字符到ch中, 跳过空格、跳格、回车等空白间隔符</p><p><code>ch = cin.get();</code> //等价于<code>cin.get(ch)</code>, 读取一个字符保存到ch中, 不跳过空白间隔符</p><p><code>cin &gt;&gt; s;</code> //输入一个单词到ch中, 遇到空白间隔符截断</p><p><code>cin.get(s, 80, '\n');</code> //第一个参数表示输入字符串到字符数组s中, 第二个参数表示此次输入保存的最大字符数(79个有效字符加一个串结束标志), 第三个参数(默认参数为<code>\n</code>,常常省略)表示遇到该字符结束输入, 不读取该字符, 并添加串结束标志. 注意: 如果前80个字符都没有回车字符, 那么将读取79个字符, 添加串结束标志, 并产生输入错误标志.</p><p><code>if(!cin) cin.clear();</code> //清除输入错误标志</p><p><code>cin.getline(s, 80, '\n');</code> //类似于<code>cin.get(s, 80, '\n')</code>, 只不过会读取回车字符<code>\n</code>然后丢弃.</p><p><strong>• 字符串的处理:</strong></p><ol type="1"><li><p>利用串结束标志控制循环</p></li><li><p>使用库函数. 常用的字符串</p></li></ol><p><code>strlen(s);</code> //求字符串s的长度, 不含串结束标志. 英文: length</p><p><code>strcpy(s1, s2);</code> //将字符串s2复制到s1中. 英文: copy</p><p><code>strcmp(s1, s2);</code> //按字典序比较s1和s2. 相同时函数值为0, 不相同时比较ASCII码, s1&gt;s2时函数值为1, s1&lt;s2时函数值为-1. (注意, 大写字符的ASCII码小于小写字母的). 英文: compare</p><p><code>strcat(s1, s2);</code> //将字符串s2合并到s1的后面. 英文: catenate</p><p><code>strlwr(s);</code> //变为小写. 英文: lowercase</p><p><code>strupr(s);</code> //变为大写. 英文: uppercase</p><h2 id="常用数组算法">常用数组算法</h2><p>非常常用! 非常重要! 必须掌握!</p><p>为突出重点, 我们这里只列出核心代码</p><h3 id="有序插入">有序插入</h3><p>有序插入指在一个已经排序的数组中将数据插入, 使得到的数组保持已排序的状态. 此处我们以升序数组中有序插入为例.</p><p>假设已有定义<code>double d[20]; double x; int i,n=19;</code> 其中<code>double d[20]</code>中已有<code>n=19</code>个升序排列的数值. 我们要将<code>x</code>有序插入数组<code>d</code>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i=n<span class="number">-1</span>; i&gt;=<span class="number">0</span> &amp;&amp; x&lt;d[i]; i--) &#123;  <span class="comment">//从后往前扫描数组直到插入位置, i始终处于空位的前一位</span></span><br><span class="line">    d[i+<span class="number">1</span>] = d[i];  <span class="comment">//扫描过的数据向后移动一位</span></span><br><span class="line">&#125;</span><br><span class="line">d[i+<span class="number">1</span>] = x; n++;  <span class="comment">// 插入数据, 数据个数增加1个</span></span><br></pre></td></tr></table></figure><h3 id="顺序查找">顺序查找</h3><p>较为简单. 假设已有定义<code>double d[20]; double x; int i,n=20;</code> 其中<code>double d[20]</code>中已有<code>n=20</code>个值. 我们在数组d中查找x. 只要</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">if</span>(d[i] == x) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (i &lt; n) &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"查找的数是数组中第"</span> &lt;&lt; i+<span class="number">1</span> &lt;&lt; <span class="string">"个数"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"查找的数不在数组中"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br></pre></td></tr></table></figure><p>即可</p><h3 id="折半查找">折半查找</h3><p>折半查找的前提是数组有序. 对于有序数组, 折半查找的效率大大高于顺序查找.</p><p>假设已有定义<code>double d[20]; double x; int i,n=20;</code> 其中<code>double d[20]</code>中已有<code>n=20</code>个值. 我们在数组d中查找x.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> low, up;  <span class="comment">//定义low, up, 分别表示正在查找区间的上界和下界</span></span><br><span class="line"><span class="keyword">for</span> (low = <span class="number">0</span>, up = n<span class="number">-1</span>; low &lt;= up; ) &#123;</span><br><span class="line">    i = (low + up)/<span class="number">2</span>;  <span class="comment">//取中间数的下标i</span></span><br><span class="line">    <span class="keyword">if</span>(d[i] == x) <span class="keyword">break</span>;  <span class="comment">//找到就跳出循环</span></span><br><span class="line">    <span class="keyword">if</span>(x &lt; d[i]) &#123; up = i<span class="number">-1</span>; &#125;  <span class="comment">//x在d[low]~d[i-1]内</span></span><br><span class="line">    <span class="keyword">else</span> &#123; low = i+<span class="number">1</span>; &#125;  <span class="comment">//x在d[i+1]~d[up]内</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (low &gt; up) &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"查找的数不在数组中"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"查找的是数组中第"</span> &lt;&lt; i+<span class="number">1</span> &lt;&lt; <span class="string">"个数"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br></pre></td></tr></table></figure><h3 id="选择法排序">选择法排序</h3><p>选择法排序(升序)的核心思想就是每次选择未处理的数中最小的, 放到左端已处理的数据之后.</p><p>假设已有定义<code>double d[100],t; int n,i,k,j;</code> 我们固定字母k用来记录下标.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (k=i, j=i+<span class="number">1</span>; j&lt;n; j++)  </span><br><span class="line">    <span class="keyword">if</span>(d[j]&lt;d[k]) k = j;  <span class="comment">//找i到n-1范围内的最小值, 下标记录在k中</span></span><br><span class="line"><span class="keyword">if</span>(k!=i) &#123; t = d[k]; d[k] = d[i]; d[i] = t; &#125;  <span class="comment">//若最小值不在d[i], 则交换到d[i]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="冒泡法排序">冒泡法排序</h3><p>冒泡排序法(升序), 就是每次从前往后对相邻的数据进行比较, 若次序不正确, 则交换次序. 注意到最大的数据每次交换后都移至最后, 所以每次扫描的数据就要减少1个. 这样, 经过n-1次扫描, 排序就完成了.</p><p>具体实现是这样的: 假设已有定义<code>double d[100],t; int n,i,k;</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (k = n<span class="number">-1</span>; k&gt;<span class="number">0</span>; k--) &#123;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;k; i++)   <span class="comment">//扫描数组的前k+1项数据</span></span><br><span class="line"><span class="keyword">if</span> (d[i]&gt;d[i+<span class="number">1</span>]) &#123; t = d[i]; d[i] = d[i+<span class="number">1</span>]; d[i+<span class="number">1</span>] = t; &#125;</span><br><span class="line">        <span class="comment">//相邻两项比较, 次序不对就换序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介绍数组和C风格字符串的处理, 以及一些十分常用的数组算法.&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="https://heliumhe.gitee.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="C++" scheme="https://heliumhe.gitee.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/C/"/>
    
    
      <category term="C++" scheme="https://heliumhe.gitee.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++程序设计基础(3) - 结构化程序设计</title>
    <link href="https://heliumhe.gitee.io/2020/08/15/C++%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80(3)%20-%20%E7%BB%93%E6%9E%84%E5%8C%96%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    <id>https://heliumhe.gitee.io/2020/08/15/C++%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80(3)%20-%20%E7%BB%93%E6%9E%84%E5%8C%96%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</id>
    <published>2020-08-15T13:02:56.000Z</published>
    <updated>2020-08-22T11:35:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>介绍两种基本的结构: 选择结构与循环结构</p><a id="more"></a><h2 id="语句">语句</h2><p>语句是C++程序的基本执行单位. 在C++中, 一个语句后面加分号表示语句的结束.</p><p>C++中的语句分为单语句、复合语句和结构性语句.</p><p>• 单语句: 单一用分号结束的语句. (可以为空语句, 即只有一个分号)</p><p>• 复合语句: 由多个语句组成, 用花括号括起来. 复合语句后面不用加分号.</p><p>• 结构性语句: 特定的语句结构, 如for语句、while语句、do...while语句、if语句、switch语句等.</p><p>语句可以嵌套, 因此有层级之分, 这在后面提及语句作用域的时候会特别说明.</p><h2 id="选择结构">选择结构</h2><h3 id="if语句">if语句</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(表达式) &#123;...&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(表达式) &#123;...&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(表达式) &#123;...&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;...&#125;</span><br></pre></td></tr></table></figure><h3 id="条件表达式">条件表达式</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">表达式<span class="number">1</span> ? 表达式<span class="number">2</span> : 表达式<span class="number">3</span></span><br></pre></td></tr></table></figure><p>表达式1为true时计算表达式2的值作为结果, 为false时计算表达式3的值作为结果.</p><h3 id="switch语句">switch语句</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(整数表达式)   <span class="comment">//包括int及其派生类型、字符类型、逻辑类型</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> 常量表达式<span class="number">1</span>: 语句序列<span class="number">1</span></span><br><span class="line"><span class="keyword">case</span> 常量表达式<span class="number">2</span>: 语句序列<span class="number">2</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">case</span> 常量表达式n: 语句序列n</span><br><span class="line"><span class="keyword">default</span>: 语句序列n+<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(grade)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'A'</span>:</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; “<span class="number">90</span>~<span class="number">100</span>” &lt;&lt; <span class="built_in">endl</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'B'</span>:</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; “<span class="number">80</span>~<span class="number">89</span>” &lt;&lt; <span class="built_in">endl</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'C'</span>:</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; “<span class="number">70</span>~<span class="number">79</span>” &lt;&lt; <span class="built_in">endl</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'D'</span>:</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; “<span class="number">60</span>~<span class="number">69</span>” &lt;&lt; <span class="built_in">endl</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'E'</span>:</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; “<span class="number">0</span>~<span class="number">59</span>” &lt;&lt; <span class="built_in">endl</span>; <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="循环结构">循环结构</h2><h3 id="while语句和do...while语句">while语句和do...while语句</h3><p>• while语句:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(表达式)&#123;...&#125;</span><br></pre></td></tr></table></figure><p>• do...while语句:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;...&#125;<span class="keyword">while</span>(表达式);</span><br></pre></td></tr></table></figure><p>两者的区别是while语句先进行判断再决定是否执行语句, 而do...while先执行一次内嵌语句再进行判断.</p><h3 id="for语句">for语句</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(表达式<span class="number">1</span>; 表达式<span class="number">2</span>; 表达式<span class="number">3</span>)&#123;...&#125;</span><br></pre></td></tr></table></figure><p>其中 表达式1为初始操作; 表达式2为循环条件; 表达式3在内嵌语句后执行</p><blockquote><p><strong>算法. 求最大公约数(辗转相除法)</strong> 求a, b两个整数的最大公约数 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b; b!=<span class="number">0</span>; r=a%b, a=b, b=r);</span><br></pre></td></tr></table></figure> 则得到的a为最大公约数.</p></blockquote><h3 id="break和continue语句">break和continue语句</h3><p>break跳出循环, 但只跳出一层循环. continue终止本次循环, 进入下一次循环.</p><blockquote><p><strong>算法. 判断是否为素数</strong> 设输入的数据为n, 判断其是否为素数 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (sqrtn = <span class="built_in">sqrt</span>((<span class="keyword">double</span>)n), i = <span class="number">2</span>; i &lt;= sqrtn; i++);</span><br><span class="line"><span class="keyword">if</span> (n % i == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (n &gt;= <span class="number">2</span> &amp;&amp; i &gt; sqrtn) <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; “ is prime” &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; “ is <span class="keyword">not</span> prime” &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介绍两种基本的结构: 选择结构与循环结构&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="https://heliumhe.gitee.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="C++" scheme="https://heliumhe.gitee.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/C/"/>
    
    
      <category term="C++" scheme="https://heliumhe.gitee.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++程序设计基础(2) - 数据与运算</title>
    <link href="https://heliumhe.gitee.io/2020/08/15/C++%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80(2)%20-%20%E6%95%B0%E6%8D%AE%E4%B8%8E%E8%BF%90%E7%AE%97/"/>
    <id>https://heliumhe.gitee.io/2020/08/15/C++%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80(2)%20-%20%E6%95%B0%E6%8D%AE%E4%B8%8E%E8%BF%90%E7%AE%97/</id>
    <published>2020-08-15T13:00:34.000Z</published>
    <updated>2020-08-19T11:42:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>主要介绍C++的基本数据类型和运算符, 略去了较为简单的内容</p><a id="more"></a><h2 id="c标识符">C++标识符</h2><p>• C++标识符的含义: C++中使用的名字, 如变量名、类型名、函数名等</p><p>• 合法的C++标识符：由字母、数字、下划线构成，首字母不能是数字.</p><h2 id="常量">常量</h2><p>• 八进制: 前缀为<code>0</code>十六进制: 前缀为<code>0x</code>或<code>0X</code></p><p>• 转义序列(预定义): 换行<code>\n</code> (newline), 跳格<code>\t</code> (tab), 回车<code>\r</code> (return), 警报<code>\a</code> (alarm), 回退一个字符<code>\b</code> (backspace), 反斜杠<code>\\</code>, 单引号<code>\'</code> 转义序列(ASCII): 用最多3位八进制(如<code>\103</code>) 或 <code>x</code>加上最多2位十六进制(如<code>\x6f</code>)表示字符.</p><p>• 最大整数 <code>maxInt = 0x7fffffff</code>, 最小整数 <code>minInt = 0x80000000</code></p><p>• 八进制输出 <code>cout &lt;&lt; oct &lt;&lt; maxInt;</code> 十六进制输出 <code>cout &lt;&lt; hex &lt;&lt; maxInt;</code> 十进制输出 <code>cout &lt;&lt; dec &lt;&lt; maxInt;</code></p><h2 id="基本运算及表达式">基本运算及表达式</h2><p>• 结合方向从右向左: (1) 部分一元运算: <code>*</code>(指向),<code>&amp;</code>(取地址), <code>new</code>, <code>delete</code>, <code>!</code>, <code>~</code>, <code>++</code>, <code>--</code>, <code>-</code>(取负), <code>sizeof()</code>, 显式转换 (2) 三元运算: <code>? :</code> (3) 赋值运算: <code>=</code>, <code>+=</code>, <code>-=</code>,<code>*=</code>, <code>/=</code>, <code>%=</code>, <code>&lt;&lt;=</code>, <code>&gt;&gt;=</code>, <code>&amp;=</code>, <code>^=</code>, <code>|=</code></p><p>• 左值: 表示存储单元的表达式, 可被赋值. 在C++中, 前置增量/减量运算, 赋值运算的结果是左值. 右值: 不是左值的表达式, 不可被赋值. 常量和计算值是右值.</p><p>• 连续输入数据, 以Ctrl^Z结束的方式: <code>while (cin &gt;&gt; x){...}</code></p><p>• 显式类型转换: 若定义<code>int a = 3;</code> 将其转换为double类型的方法如下<code>double(a);</code> 或 <code>(double)a;</code> 或 <code>static_cast&lt;double&gt;(a);</code></p><p>• 短路表达式: 逻辑表达式(与、或)一旦有了最终结果就不再计算.</p><h2 id="位运算">位运算</h2><p>与运算 <code>&amp;</code> : 都为1, 结果才为1.</p><p>或运算 <code>|</code> :只要有一个为1, 结果就为1.</p><p>非运算(取反运算) <code>~</code> : 0变1, 1变0.</p><p>异或运算 <code>^</code> : 不进位加法</p><p>移位运算: 左移 <code>&lt;&lt;</code> (右边补0), 右移 <code>&gt;&gt;</code> (左边拓展高位数字, 有符号类型进行符号拓展, 无符号类型进行0拓展)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要介绍C++的基本数据类型和运算符, 略去了较为简单的内容&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="https://heliumhe.gitee.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="C++" scheme="https://heliumhe.gitee.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/C/"/>
    
    
      <category term="C++" scheme="https://heliumhe.gitee.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++程序设计基础(1) - 计算机基础知识</title>
    <link href="https://heliumhe.gitee.io/2020/08/15/C++%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80(1)%20-%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://heliumhe.gitee.io/2020/08/15/C++%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80(1)%20-%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2020-08-15T12:36:59.000Z</published>
    <updated>2020-08-19T11:33:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>主要介绍进制的转换和计算机数值表示</p><a id="more"></a><h2 id="进制的转换">进制的转换</h2><p><strong>1.其它进制转换为十进制</strong></p><p>利用展开式直接计算。例如：将八进制数<span class="math inline">\((137.45)_{8}\)</span>转换为十进制</p><p><span class="math display">\[(137.45)_{8}=1\times8^{2}+3\times8^{1}+7\times8^{0}+4\times8^{-1}+5\times8^{-2}\]</span></p><p><strong>2.十进制转换为其它进制</strong></p><p>整数用短除法(反复除以进制数), 余数倒排. 小数反复乘以进制数, 余数部分依次排列</p><p><strong>3.二进制与八进制, 二进制与十六进制转换</strong></p><p>它们有直接的对应关系, 每3位二进制对应1位八进制, 每4位二进制对应1位十六进制.</p><h2 id="计算机数值表示">计算机数值表示</h2><p>1个<strong>字节</strong>由8位二进位组成, 是计算机的基本存储单位.</p><h3 id="整数表示">整数表示</h3><p>• <strong>无符号整数</strong>(unsigned类型): 直接用二进制表示, 高位补0.</p><p>• <strong>有符号整数</strong>(signed类型): 使用<strong>补码</strong>表示. 规定: 补码的最高位是符号位, 正数为0, 负数为1; 其余的位数用来表示数值. 正数直接用二进制表示, 负数用与正数二进制数相补的数表示(相加进位).</p><h3 id="实数表示-ieee标准">实数表示 (IEEE标准)</h3><p>实数采用二进制标准化科学计数法表示: 先写成二进制小数再使用科学计数法. 如:</p><p><span class="math display">\[+0.001=\underset{\text{符号位}}{+}\underset{\text{尾数部分(小数点以后)}}{1.0000011\ 00010010\ 01101110\ 10010111\ \cdots}\times\underset{\text{指数部分}}{2^{-10}}\]</span></p><p>数据分为三个部分存储: 符号位、指数部分、尾数部分.</p><p>• 符号位: 正数用0, 负数用1.</p><p>• 指数部分: 采用<strong>移码</strong>表示法. 对指数部分加上 <span class="math inline">\((0111\cdots111)_{2}\)</span> , 得到的二进制数称为移码. (加上一个大整数是为了将负数转化为正数)</p><p>• 尾数部分: 截断时舍入规则为0舍1入. 注意: 单精度和双精度格式的尾数部分只保存小数点后的小数, 而扩展精度的要保存整数部分的1.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要介绍进制的转换和计算机数值表示&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="https://heliumhe.gitee.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="C++" scheme="https://heliumhe.gitee.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/C/"/>
    
    
      <category term="C++" scheme="https://heliumhe.gitee.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Linux Mint安装及LaTeX-Lyx配置踩坑记</title>
    <link href="https://heliumhe.gitee.io/2020/07/26/Linux-Mint%E5%AE%89%E8%A3%85%E5%8F%8ALaTeX-Lyx%E9%85%8D%E7%BD%AE%E8%B8%A9%E5%9D%91%E8%AE%B0/"/>
    <id>https://heliumhe.gitee.io/2020/07/26/Linux-Mint%E5%AE%89%E8%A3%85%E5%8F%8ALaTeX-Lyx%E9%85%8D%E7%BD%AE%E8%B8%A9%E5%9D%91%E8%AE%B0/</id>
    <published>2020-07-26T08:43:01.000Z</published>
    <updated>2020-08-16T12:17:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录安装Linux Mint系统过程中以及使用Linux版的LaTeX和Lyx时出现的问题，并给出解决方案。</p><a id="more"></a><h2 id="来由">来由</h2><p>前几天在Deepin系统上试图安装Lyx，但是Lyx在Deepin软件源中的版本滞后，无法打开我之前的Lyx文档。于是我便试图在Deepin中加载Ubuntu的软件源。一开始，一切似乎都无比正常，<code>sudo apt-get update</code>顺利执行，说明软件源加载成功。然后，我用<code>sudo apt-cache policy lyx</code>检查了软件源中Lyx的版本，由原来的<code>2.2.2</code>提升到了<code>2.3.5.2</code>，是最新的stable版本。大喜之下，一行<code>sudo apt-get install lyx</code>开始安装，提示要添加三百多个软件包，更新四百多个，删除两百多个。也没多想，就敲了Y，漫长的更新过程大概持续了十几分钟。然后怀着迫切的心情，我立即查看是否安装成功，打开Lyx正常，版本号正确。但很快，我就发现了事情的严重性，开始菜单无法弹出，深度监视器无法打开，最糟糕的是——无法关机，无法重启！只好强制关机，可谁知，关机后便再也无法进入系统（卡在Deepin的徽标界面）。网友们给出的解释是Deepin的图形界面相关的软件包被卸载或者更新，而更新后的软件包可能与其它模块不兼容，因此无法进入系统。</p><p>所以，总结一下，<strong>第一个坑：不要在Deepin上加载Ubuntu软件源！</strong></p><p>LaTeX对于我是刚需，而Lyx对于喜欢记记杂碎问题的我是一大利器。于是，我决定果断放弃Deepin。</p><h2 id="初识linux-mint">初识Linux Mint</h2><p>在网上进行了一番比较，似乎对于个人家用，Ubuntu和Linux Mint是首选，而Linux Mint基于Ubuntu，在图形界面上占优势。便挑选了Linux Mint。</p><p>一番常规操作之后，我用U盘作为启动盘进入了安装程序，磁盘分区可把我分的头都大了，本来就是双硬盘双系统，分出的区特别多。这里建议<strong>可以事先在Windows上用DiskGenius查看原本有哪些分区，分别对应什么，然后手机拍照记录下来</strong>。这样等到真正分区的时候就不会乱了。</p><p>麻烦的事情发生了：我选择将启动引导器安装到<code>dev/sdb</code>（我的SSD），可是却报错</p><blockquote><p>Ubuntu Error: The partition table format in use on your disks normally requires you to create a separate partition for boot loader code. This partition should be marked for use as a "Reserved BIOS boot area" and should be at least 1MB in size. Note that this is not the same as a partition mounted on <code>/boot</code>.</p></blockquote><p>于是，我按照它的提示，创建了一个保留BIOS分区。选择安装启动引导器到该分区，没有报错。但这只是冰山一角。</p><p>安装即将结束的时候，报错：</p><blockquote><p>fatal error: 执行 ‘grub-install /dev/sdb' 失败，这是一个致命错误</p></blockquote><p>解决方案：<strong>制作Linux Mint启动盘不可以用Ultra ISO</strong>，它会默认选择UEFI的启动模式，而且Linux Mint的原生安装包实际上还缺失两个文件，需要制作时补上。那么如何制作呢？<strong>使用rufus，避开UEFI启动的选项</strong>，制作前，它会提示自动下载那两个文件。使用重新制作的启动盘，那两个错误都不会出现。并且<strong>启动引导器就直接安装在硬盘上，不要安装在分区中，更无需创建保留BIOS分区</strong>。</p><p>Linux Mint刚刚打开的时候，第一眼注意到的就是它优美的图形界面。字体或许有点小，但这是容易调节的。</p><h2 id="安装texlive和lyx">安装Texlive和Lyx</h2><p>LaTeX是刚需，自然少不了安装相关的环境。安装Texlive和Lyx除了耗时较长以外，没有出现错误信息。问题出现在全部安装完毕，打开Lyx编写文档时。我选择“从模版新建”，并选择ctex.lyx ，这时弹出提示信息ctexart.cls和一些sty找不到，导致无法编译文档。经过检查，Texlive已经完整安装，ctexart.cls和相关sty文件都存在。</p><p>解决方案：<strong>终端中执行<code>texhash</code> ，然后在Lyx中“重新配置Lyx“</strong>。</p><h2 id="一些其它的坑">一些其它的坑</h2><p>关于Linux分区大小问题：最好一次到位，后面调整比较麻烦。要充分预估后面安装的软件数量。我这次的分区为： <code>/boot</code> 500MB；<code>/</code> 46GB；<code>/home</code> 45GB</p><p>但是实际使用过程中发现，安装完必备的软件（主要是Texlive较大）已经占用了27GB <code>/</code> 下的空间了，而 <code>/home</code> 才放了不到2GB的文件。实际上，<code>/home</code> 的用处不是很大，因为在Windows和Linux双系统中，可以挂载Windows下的磁盘，也就是说，Linux下可以访问Windows系统的文件（但Windows下不能直接访问Linux的文件，原因是磁盘文件系统不同（Linux为ext4））。所以，在Linux下我们存储文件可以存放在磁盘的任意位置，不需要存放于 <code>/home</code> 中，在分区时根目录 <code>/</code> 应该适当预留大一些，而 <code>/home</code> 则不需要太大。</p><p>如果让我重新分区，我会分为 <strong><code>/boot</code> 500MB；<code>/</code> 71GB；<code>/home</code> 20GB</strong> <strong>这是Linux Mint和Windows双系统中比较合适的比例。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文记录安装Linux Mint系统过程中以及使用Linux版的LaTeX和Lyx时出现的问题，并给出解决方案。&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="https://heliumhe.gitee.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="Linux" scheme="https://heliumhe.gitee.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/Linux/"/>
    
    
      <category term="Linux" scheme="https://heliumhe.gitee.io/tags/Linux/"/>
    
      <category term="LaTeX" scheme="https://heliumhe.gitee.io/tags/LaTeX/"/>
    
      <category term="Lyx" scheme="https://heliumhe.gitee.io/tags/Lyx/"/>
    
  </entry>
  
  <entry>
    <title>集合元素个数与线性空间的维数</title>
    <link href="https://heliumhe.gitee.io/2020/07/12/%E9%9B%86%E5%90%88%E5%85%83%E7%B4%A0%E4%B8%AA%E6%95%B0%E4%B8%8E%E7%BA%BF%E6%80%A7%E7%A9%BA%E9%97%B4%E7%9A%84%E7%BB%B4%E6%95%B0/"/>
    <id>https://heliumhe.gitee.io/2020/07/12/%E9%9B%86%E5%90%88%E5%85%83%E7%B4%A0%E4%B8%AA%E6%95%B0%E4%B8%8E%E7%BA%BF%E6%80%A7%E7%A9%BA%E9%97%B4%E7%9A%84%E7%BB%B4%E6%95%B0/</id>
    <published>2020-07-12T07:22:52.000Z</published>
    <updated>2020-08-16T12:17:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>证明一个集合元素个数不超过线性空间的维数, 可以去证明这个集合的元素是线性无关的. 而证明线性空间的维数不超过集合元素个数n, 可以考虑证明线性空间中任意n+1个元素都线性相关. 这在域论中是常见的手法.</p><p>下面给出几个例子.</p><a id="more"></a><blockquote><p><strong>问题 1</strong> 设<span class="math inline">\(V\)</span>为 n 维实线性空间, <span class="math inline">\(M\subseteq\mathrm{End}V\)</span>, 满足</p><ol type="1"><li><p><span class="math inline">\(\mathrm{id}\in M,0\notin M\)</span>;</p></li><li><p>若<span class="math inline">\(\mathscr{A},\mathscr{B}\in M\)</span>, 则<span class="math inline">\(\mathscr{AB}\in M\)</span>或<span class="math inline">\(\mathscr{BA}\in M\)</span>;</p></li><li><p>若<span class="math inline">\(\mathscr{A},\mathscr{B}\in M\)</span>, 则<span class="math inline">\(\mathscr{AB}=\mathscr{BA}\)</span>或<span class="math inline">\(\mathscr{AB}=-\mathscr{BA}\)</span>;</p></li><li><p>若<span class="math inline">\(\mathscr{A}\in M\)</span>且<span class="math inline">\(\mathscr{A}\neq\pm\mathrm{id}\)</span>, 则存在<span class="math inline">\(\mathscr{B}\in M\)</span>, s.t. <span class="math inline">\(\mathscr{AB=-BA}\)</span></p></li></ol><p>证明: <span class="math inline">\(M\)</span>中的元素个数不超过<span class="math inline">\(2n^{2}\)</span>.</p></blockquote><p>证明: (提示: 证明一个集合元素个数不超过线性空间的维数, 可以去证明这个集合的元素是线性无关的. 此处<span class="math inline">\(n^{2}\)</span>暗示维数, <span class="math inline">\(\mathscr{A},-\mathscr{A}\)</span>可以同时出现, 所以有个 2 倍.)</p><p>首先证明<span class="math inline">\(\forall\mathscr{A}\in M\)</span>, 都有<span class="math inline">\(\mathscr{A}^{2}=\pm\mathrm{id}\)</span>.</p><p>任取<span class="math inline">\(\mathscr{A}\in M\)</span> , 由(2)得<span class="math inline">\(\mathscr{A}^{2}\in M\)</span>. 如果<span class="math inline">\(\mathscr{A}^{2}\neq\pm\mathrm{id}\)</span> , 则由(4), <span class="math inline">\(\exists\mathscr{B}\in M\)</span>, s.t. <span class="math inline">\(\mathscr{A}^{2}\mathscr{B}=-\mathscr{BA}^{2}\)</span>.</p><p>另一方面, 若<span class="math inline">\(\mathscr{AB}=\mathscr{BA}\)</span>, 则<span class="math inline">\(\mathscr{A}^{2}\mathscr{B}=\mathscr{A}(\mathscr{AB})=\mathscr{A}(\mathscr{BA})=(\mathscr{AB})\mathscr{A}=\mathscr{B}\mathscr{A}^{2}\)</span>; 若<span class="math inline">\(\mathscr{AB}=-\mathscr{BA}\)</span>, 则<span class="math inline">\(\mathscr{A}^{2}\mathscr{B}=\mathscr{A}(\mathscr{AB})=\mathscr{A}(-\mathscr{BA})=-(\mathscr{AB})\mathscr{A}=\mathscr{B}\mathscr{A}^{2}\)</span>. 即总有<span class="math inline">\(\mathscr{A}^{2}\mathscr{B}=\mathscr{B}\mathscr{A}^{2}\)</span>. 所以<span class="math inline">\(M\ni\mathscr{A}^{2}\mathscr{B}=0\)</span>, 这与(1)矛盾.</p><p>然后证明<span class="math inline">\(M\)</span>中不同且不互为相反数的元素线性无关.</p><p>(反证法)假设<span class="math inline">\(M\)</span>中不同且不互为相反数的元素线性相关, 那么一定可以找到一个最小的<span class="math inline">\(n\)</span>, 使得<span class="math inline">\(M\)</span>中不同且不互为相反数的<span class="math inline">\(n\)</span>个元素线性相关.</p><p>设<span class="math inline">\(\mathscr{A}_{1}, \mathscr{A}_{2}, \cdots, \mathscr{A}_{n}\in M\)</span>互不相同且<span class="math inline">\(\forall i\neq j\)</span>, <span class="math inline">\(\mathscr{A}_{i}+\mathscr{A}_{j}\neq0\)</span>, <span class="math inline">\(\mathscr{A}_{1}, \mathscr{A}_{2}, \cdots, \mathscr{A}_{n}\)</span>线性相关.</p><p><span class="math inline">\(\exists k_{i}\neq0\)</span> , 使得 <span class="math inline">\(\sum_{i=1}^{n} k_{i} \mathscr{A}_{i}=0\)</span>. 不妨设<span class="math inline">\(\mathscr{A}_{1}=\pm\mathrm{id}\)</span> (否则考虑<span class="math inline">\(\sum_{i=1}^{n} k_{i} \mathscr{A}_{1} \mathscr{A}_{i}=0\)</span>) , 则<span class="math inline">\(\mathscr{A}_{2},\cdots,\mathscr{A}_{n}\neq\pm\mathrm{id}\)</span>.</p><p><span class="math inline">\(\mathscr{A}_{n}\neq\pm\mathrm{id}\)</span>和(4)可知<span class="math inline">\(\mathscr{C}\in M\)</span>, s.t. <span class="math inline">\(\mathscr{A}_{n}\mathscr{C}=-\mathscr{C}\mathscr{A}_{n}\)</span>.</p><p>不妨假设对<span class="math inline">\(1\leq i\leq t\)</span>, <span class="math inline">\(\mathscr{A}_{i}\mathscr{C}=\mathscr{C}\mathscr{A}_{i}\)</span>; 对<span class="math inline">\(t+1\leq i\leq n-1\)</span>, <span class="math inline">\(\mathscr{A}_{i}\mathscr{C}=-\mathscr{C}\mathscr{A}_{i}\)</span>. 对式子</p><p><span class="math display">\[\sum_{i=1}^{n-1}k_{i}\mathscr{A}_{i}=-k_{n}\mathscr{A}_{n}\]</span></p><p>分别用<span class="math inline">\(\mathscr{C}\)</span>左作用和右作用, 得</p><p><span class="math display">\[\sum_{i=1}^{t}k_{i}\mathscr{C}\mathscr{A}_{i}+\sum_{i=t}^{n-1}k_{i}\mathscr{C}\mathscr{A}_{i}=-k_{n}\mathscr{C}\mathscr{A}_{n}\]</span></p><p><span class="math display">\[\sum_{i=1}^{t}k_{i}\mathscr{A}_{i}\mathscr{C}+\sum_{i=t}^{n-1}k_{i}\mathscr{A}_{i}\mathscr{C}=-k_{n}\mathscr{A}_{n}\mathscr{C}\]</span></p><p>由于对<span class="math inline">\(t+1\leq i\leq n\)</span>, <span class="math inline">\(\mathscr{A}_{i}\mathscr{C}=-\mathscr{C}\mathscr{A}_{i}\)</span>. 故将两式相加, 得到</p><p><span class="math display">\[\sum_{i=1}^{t}k_{i}\mathscr{C}\mathscr{A}_{i}=0\]</span></p><p>而<span class="math inline">\(t\leq n-1\)</span>, 与<span class="math inline">\(n\)</span>的最小性矛盾.</p><p>因此, <span class="math inline">\(M\)</span>中不同且不互为相反数的元素线性无关. 而<span class="math inline">\(\dim M\leq n^{2}\)</span>. 故<span class="math inline">\(\left|M\right|\leq2n^{2}\)</span>. <span class="math inline">\(\square\)</span></p><blockquote><p><strong>问题 2</strong> [Dedekind-Artin] 设<span class="math inline">\(G\)</span>是一个幺半群, <span class="math inline">\(\mathbb{K}\)</span>是一个域 (则<span class="math inline">\(K^{*} := \mathbb{K}-\{0\}\)</span>是一个群). <span class="math inline">\(\sigma_{1},\sigma_{2},\ldots,\sigma_{n}\)</span>是两两不同的非零同态<span class="math inline">\(G\rightarrow K^{*}\)</span>, 则它们在<span class="math inline">\(\mathbb{K}\)</span>上线性无关.</p></blockquote><p>证明: 假设存在这样的一组非零同态, 使得它们在<span class="math inline">\(\mathbb{K}\)</span>上线性无关, 则一定能找到其中元素个数最少的一组. 设<span class="math inline">\(n\)</span>是满足</p><p><span class="math display">\[a_{1}\sigma_{1}+\cdots+a_{n}\sigma_{n}=0,\ a_{i}\in\mathbb{K}\text{不全为}0\]</span></p><p>的最小的正整数. 则<span class="math inline">\(n\geq2\)</span>, <span class="math inline">\(a_{i}\)</span>均不为 0.</p><p>因为<span class="math inline">\(\sigma_{1},\sigma_{2}\)</span>不同, 故<span class="math inline">\(\exists z\in G\)</span>使得<span class="math inline">\(\sigma_{1}(z)\neq\sigma_{2}(z)\)</span>. 对于任意<span class="math inline">\(x\in G\)</span>, 都有 <span class="math display">\[a_{1}\sigma_{1}(xz)+\cdots+a_{n}\sigma_{n}(xz)=0\]</span></p><p>由于<span class="math inline">\(\sigma_{i}\)</span>是同态, 则有</p><p><span class="math display">\[a_{1}\sigma_{1}(z)\sigma_{1}+\cdots+a_{n}\sigma_{n}(z)\sigma_{n}=0\]</span></p><p>两边同除<span class="math inline">\(\sigma_{1}\)</span>并与第一个式子相减, 得</p><p><span class="math display">\[\left(a_{2}\dfrac{\sigma_{2}(z)}{\sigma_{1}(z)}-a_{2}\right)\sigma_{2}+\cdots+\left(a_{n}\dfrac{\sigma_{n}(z)}{\sigma_{1}(z)}-a_{n}\right)\sigma_{n}=0\]</span></p><p>其第一个系数就不为 0, 且比第一个式子少一个元素, 这与<span class="math inline">\(n\)</span>的最小性矛盾.</p><p>因此, 任意一组两两不同的非零同态<span class="math inline">\(G\rightarrow K^{*}\)</span>在<span class="math inline">\(\mathbb{K}\)</span>上线性无关. <span class="math inline">\(\square\)</span></p><blockquote><p><strong>问题 3</strong> [Artin] 设<span class="math inline">\(\mathbb{E}\)</span>为数域, <span class="math inline">\(G\)</span>为<span class="math inline">\(\mathrm{Aut}\mathbb{E}\)</span>的有限子群, 则<span class="math inline">\(\left|G\right|\geq\left[\mathbb{E}:\mathbb{F}\right]\)</span>.</p></blockquote><p>证明: 设<span class="math inline">\(G=\{\sigma_{1}=\mathrm{id},\sigma_{2},\ldots,\sigma_{n}\}\)</span>. 要证<span class="math inline">\(\left[\mathbb{E}:\mathbb{F}\right]\leq\left|G\right|=n\)</span>, 只要证<span class="math inline">\(\mathbb{E}\)</span>上任意<span class="math inline">\(n+1\)</span>个元素在<span class="math inline">\(\mathbb{F}\)</span>上线性相关.</p><p><span class="math inline">\(\forall\alpha_{1},\alpha_{2},\ldots,\alpha_{n},\alpha_{n+1}\in\mathbb{E}\)</span>, 则<span class="math inline">\(\mathbb{E}\)</span>上的线性方程组</p><p><span class="math display">\[\begin{pmatrix}\sigma_{1}(\alpha_{1}) &amp; \sigma_{1}(\alpha_{2}) &amp; \cdots &amp; \sigma_{1}(\alpha_{n+1})\\\sigma_{2}(\alpha_{1}) &amp; \sigma_{2}(\alpha_{2}) &amp; \cdots &amp; \sigma_{2}(\alpha_{n+1})\\\vdots &amp; \vdots &amp;  &amp; \vdots\\\sigma_{n}(\alpha_{1}) &amp; \sigma_{n}(\alpha_{2}) &amp; \cdots &amp; \sigma_{1}(\alpha_{n+1})\end{pmatrix}_{n\times(n+1)}\begin{pmatrix}x_{1}\\x_{2}\\\vdots\\x_{n+1}\end{pmatrix}=0\]</span></p><p>必有非 0 解 (未知数的个数大于方程个数).</p><p>考虑其中包含非 0 元素最少的非零解<span class="math inline">\(\begin{pmatrix}b_{1} &amp; b_{2} &amp; \cdots &amp; b_{m} &amp; 0 &amp; \cdots &amp; 0\end{pmatrix}\)</span>, 其中<span class="math inline">\(b_{i}\neq0,i=1,2,\ldots,m\)</span>. 不妨设<span class="math inline">\(b_{1}=1\)</span>, (否则考虑<span class="math inline">\(\begin{pmatrix}1 &amp; \dfrac{b_{2}}{b_{1}} &amp; \cdots &amp; \dfrac{b_{m}}{b_{1}} &amp; 0 &amp; \cdots &amp; 0\end{pmatrix}\)</span>).</p><p>方程组两边用<span class="math inline">\(\sigma_{i}\)</span>作用, 由<span class="math inline">\(\sigma_{i}\)</span>是同态, 可以得到<span class="math inline">\(\begin{pmatrix}\sigma_{i}(b_{1}) &amp; \sigma_{i}(b_{2}) &amp; \cdots &amp; \sigma_{i}(b_{m}) &amp; 0 &amp; \cdots &amp; 0\end{pmatrix}\)</span>是一组非零解, 其中<span class="math inline">\(\sigma_{i}(b_{1})=\sigma_{i}(1)=1\)</span>. 将两组解相减, 得</p><p><span class="math display">\[\begin{pmatrix}0 &amp; \sigma_{i}(b_{2})-b_{2} &amp; \cdots &amp; \sigma_{i}(b_{m})-b_{m} &amp; 0 &amp; \cdots &amp; 0\end{pmatrix}\]</span></p><p>也是一组非零解. 但这组解比<span class="math inline">\(\begin{pmatrix}b_{1} &amp; b_{2} &amp; \cdots &amp; b_{m} &amp; 0 &amp; \cdots &amp; 0\end{pmatrix}\)</span>含有更少的非零元, 因此它只能是零解, 即</p><p><span class="math display">\[\sigma_{i}(b_{j})=b_{j},\ \forall1\leq i\leq n,\ 1\leq j\leq m\]</span></p><p>由<span class="math inline">\(\mathbb{F}\)</span>的定义知<span class="math inline">\(b_{j}\in\mathbb{F},\ \forall1\leq j\leq m\)</span>. 所以</p><p><span class="math display">\[0=\sum_{j=1}^{n+1}\sigma_{1}(\alpha_{j})b_{j}=\sum_{j=1}^{n+1}\mathrm{id}(\alpha_{j})b_{j}=\sum_{j=1}^{n+1}b_{j}\alpha_{j}\]</span></p><p>这表明<span class="math inline">\(\alpha_{1},\ldots,\alpha_{n+1}\)</span>在<span class="math inline">\(\mathbb{F}\)</span>上线性相关. <span class="math inline">\(\square\)</span></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;证明一个集合元素个数不超过线性空间的维数, 可以去证明这个集合的元素是线性无关的. 而证明线性空间的维数不超过集合元素个数n, 可以考虑证明线性空间中任意n+1个元素都线性相关. 这在域论中是常见的手法.&lt;/p&gt;
&lt;p&gt;下面给出几个例子.&lt;/p&gt;
    
    </summary>
    
    
      <category term="数学" scheme="https://heliumhe.gitee.io/categories/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="代数" scheme="https://heliumhe.gitee.io/categories/%E6%95%B0%E5%AD%A6/%E4%BB%A3%E6%95%B0/"/>
    
    
      <category term="抽象代数" scheme="https://heliumhe.gitee.io/tags/%E6%8A%BD%E8%B1%A1%E4%BB%A3%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Excerpts of Where the Crawdads Sing</title>
    <link href="https://heliumhe.gitee.io/2020/07/08/Excerpts-of-Where-the-Crowdads-Sing/"/>
    <id>https://heliumhe.gitee.io/2020/07/08/Excerpts-of-Where-the-Crowdads-Sing/</id>
    <published>2020-07-08T14:00:00.000Z</published>
    <updated>2020-07-22T01:06:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>Excerpts made when reading the novel <em>Where the Crawdads Sing</em>.</p><a id="more"></a><blockquote><p>Secretly Kya hoped not to catch a fish, but she felt a tug, jerked her line, and raised a thick bream, flashing silver and blue. Pa leaned out and snatched it in the net, then sat back, slapping his knee and yahooing like she'd never seen. She grinned wide and they looked into each other's eyes, closing a circuit.</p><p>---- <em>Chapter 7: The Fishing Season</em></p></blockquote><blockquote><p>Sycamore and hickories stretched naked limbs against the dull sky and the relentless wind sucked any joy the winter sun might have spread across the bleakness.</p><p>---- <em>Chapter 11 Croker Sacks Full</em></p></blockquote><blockquote><p>Then the kerosene light flickered, faded, and died. One minute there was a soft circle of the world, and then darkness.</p><p>---- <em>Chapter 11 Croker Sacks Full</em></p></blockquote><blockquote><p>Here - instead of the estuaries and enormous sweeps of grass, as in her marsh - clear water followed as far as she could see through a bright and open cypress forest. Brilliant white herons and storks stood among water lilies and floating plants so green they seemed to glow.</p><p>---- <em>Chapter 26 The Boat Ashore</em></p></blockquote><blockquote><p>Clouds lazed in the folded arms of the hills, then billowed up and drifted away. Some tendrils twisted into tight spirals and traced the warmer ravines, behaving like mist tracking the dank fens of the marsh.</p><p>---- <em>Chapter 27 Out Hog Mountain Road</em></p></blockquote><blockquote><p>Colors, which had been muted by the dimness formed into shapes as they moved into the light.</p><p>---- <em>Chapter 35 The Compass</em></p></blockquote><blockquote><p>Sunsets are never simple. Twilight is refracted and reflected, But never true. Even tide is a disguise Covering tracks, Covering lies.</p><p>We don't care That dusk deceives, We see brilliant colors, And never learn The sun has dropped Beneath the earth. By the time we see the burn.</p><p>Sunsets are in disguise, Covering truth, covering lies.</p><p>---- <em>Chapter 35 The Compass</em></p></blockquote><blockquote><p>Even though she only went to school one day in her life - because the other children harassed her - she educated herself and became a well known naturalist and author. We called her the Marsh Girl; now scientific institutions recognize her as the Marsh Expert.</p><p>---- <em>Chapter 53 Missing Link</em></p></blockquote><blockquote><p>I believe you can put all of the rumors and tall tales aside, I believe you will come to a judgment based on the facts you heard in this courtroom, not the false rumors you have heard for years.</p><p>---- <em>Chapter 53 Missing Link</em></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Excerpts made when reading the novel &lt;em&gt;Where the Crawdads Sing&lt;/em&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="English" scheme="https://heliumhe.gitee.io/categories/English/"/>
    
    
      <category term="English" scheme="https://heliumhe.gitee.io/tags/English/"/>
    
      <category term="book" scheme="https://heliumhe.gitee.io/tags/book/"/>
    
      <category term="novel" scheme="https://heliumhe.gitee.io/tags/novel/"/>
    
      <category term="excerpt" scheme="https://heliumhe.gitee.io/tags/excerpt/"/>
    
  </entry>
  
  <entry>
    <title>测试文档</title>
    <link href="https://heliumhe.gitee.io/2020/07/04/%E6%B5%8B%E8%AF%95%E6%96%87%E6%A1%A3/"/>
    <id>https://heliumhe.gitee.io/2020/07/04/%E6%B5%8B%E8%AF%95%E6%96%87%E6%A1%A3/</id>
    <published>2020-07-04T03:46:50.000Z</published>
    <updated>2020-11-09T05:43:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>此文档用于测试网站兼容性，路人请忽略此文档。</p><a id="more"></a><h2 id="数学测试">数学测试</h2><p>这是一个测试文档，我们将在这里进行网站内容发布的一些测试。</p><p>首先是数学公式测试</p><p>行内公式 <span class="math inline">\(\int_0^1 \sin x dx = -\cos x|_0^1\)</span> 测试。</p><p>行间公式测试 <span class="math display">\[e^{i\pi}=-1\]</span></p><p><span class="math display">\[\left(\dfrac{n+1}{e}\right)^{n}&lt;n!&lt;e\left(\dfrac{n+1}{e}\right)^{n+1}\]</span></p><p><span class="math display">\[\dfrac{1}{2}+\dfrac{1}{3}+\cdots+\dfrac{1}{n}&lt;\ln(n+1)&lt;1+\dfrac{1}{2}+\cdots+\dfrac{1}{n}\]</span></p><p>行间公式测试完毕。</p><h2 id="代码测试">代码测试</h2><p>下面是一段C++代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, n = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">2</span>; j &lt; <span class="built_in">sqrt</span>(i); j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%j == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j &gt; <span class="built_in">sqrt</span>(i)) <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">"\t"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="图片测试">图片测试</h2><p>下面插入一张图片</p><figure><img src="/junblog/2020/07/04/%E6%B5%8B%E8%AF%95%E6%96%87%E6%A1%A3/SquirrelHeather_ZH-CN1683129884_1920x1080.jpg" alt="Squirrel"><figcaption aria-hidden="true">Squirrel</figcaption></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此文档用于测试网站兼容性，路人请忽略此文档。&lt;/p&gt;
    
    </summary>
    
    
      <category term="使用说明及测试" scheme="https://heliumhe.gitee.io/categories/%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E%E5%8F%8A%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="测试" scheme="https://heliumhe.gitee.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://heliumhe.gitee.io/2020/07/04/hello-world/"/>
    <id>https://heliumhe.gitee.io/2020/07/04/hello-world/</id>
    <published>2020-07-03T23:29:50.000Z</published>
    <updated>2020-12-23T11:15:01.210Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="使用说明及测试" scheme="https://heliumhe.gitee.io/categories/%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E%E5%8F%8A%E6%B5%8B%E8%AF%95/"/>
    
    
  </entry>
  
</feed>
